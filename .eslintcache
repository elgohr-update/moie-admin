[{"/Users/ramon/Repositories/lucy-moie/src/index.js":"1","/Users/ramon/Repositories/lucy-moie/src/App.js":"2","/Users/ramon/Repositories/lucy-moie/src/serviceWorker.js":"3","/Users/ramon/Repositories/lucy-moie/src/store/index.js":"4","/Users/ramon/Repositories/lucy-moie/src/routes/allRoutes.js":"5","/Users/ramon/Repositories/lucy-moie/src/routes/middleware/Authmiddleware.js":"6","/Users/ramon/Repositories/lucy-moie/src/components/NonAuthLayout.js":"7","/Users/ramon/Repositories/lucy-moie/src/components/MessageToast/ShowToastMessages.js":"8","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/index.js":"9","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/index.js":"10","/Users/ramon/Repositories/lucy-moie/src/store/sagas.js":"11","/Users/ramon/Repositories/lucy-moie/src/store/reducers.js":"12","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Header.js":"13","/Users/ramon/Repositories/lucy-moie/src/store/actions.js":"14","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Navbar.js":"15","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Footer.js":"16","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Header.js":"17","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Sidebar.js":"18","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Footer.js":"19","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/index.js":"20","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductDetail.js":"21","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Login.js":"22","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Logout.js":"23","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/index.js":"24","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderDetail.js":"25","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/ForgetPassword.js":"26","/Users/ramon/Repositories/lucy-moie/src/pages/PostSaleEdit/PostSaleDetail.js":"27","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/user-profile.js":"28","/Users/ramon/Repositories/lucy-moie/src/pages/commons/404.js":"29","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Register.js":"30","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerDetail.js":"31","/Users/ramon/Repositories/lucy-moie/src/pages/BillEdit/BillDetail.js":"32","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/Rightbar.js":"33","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actions.js":"34","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/saga.js":"35","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/index.js":"36","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/index.js":"37","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/index.js":"38","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/saga.js":"39","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/saga.js":"40","/Users/ramon/Repositories/lucy-moie/src/store/customer/saga.js":"41","/Users/ramon/Repositories/lucy-moie/src/store/category/saga.js":"42","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/saga.js":"43","/Users/ramon/Repositories/lucy-moie/src/store/sizes/saga.js":"44","/Users/ramon/Repositories/lucy-moie/src/store/product/saga.js":"45","/Users/ramon/Repositories/lucy-moie/src/store/comment/saga.js":"46","/Users/ramon/Repositories/lucy-moie/src/store/productImages/saga.js":"47","/Users/ramon/Repositories/lucy-moie/src/store/productSize/saga.js":"48","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/saga.js":"49","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/saga.js":"50","/Users/ramon/Repositories/lucy-moie/src/store/location/saga.js":"51","/Users/ramon/Repositories/lucy-moie/src/store/order/saga.js":"52","/Users/ramon/Repositories/lucy-moie/src/store/user/saga.js":"53","/Users/ramon/Repositories/lucy-moie/src/store/template/saga.js":"54","/Users/ramon/Repositories/lucy-moie/src/store/office/saga.js":"55","/Users/ramon/Repositories/lucy-moie/src/store/bill/saga.js":"56","/Users/ramon/Repositories/lucy-moie/src/store/layout/saga.js":"57","/Users/ramon/Repositories/lucy-moie/src/store/reports/saga.js":"58","/Users/ramon/Repositories/lucy-moie/src/store/payments/saga.js":"59","/Users/ramon/Repositories/lucy-moie/src/store/payments/reducer.js":"60","/Users/ramon/Repositories/lucy-moie/src/store/postSale/saga.js":"61","/Users/ramon/Repositories/lucy-moie/src/pages/Product/index.js":"62","/Users/ramon/Repositories/lucy-moie/src/pages/Category/index.js":"63","/Users/ramon/Repositories/lucy-moie/src/pages/State/index.js":"64","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/index.js":"65","/Users/ramon/Repositories/lucy-moie/src/pages/MunicipalityEdit/index.js":"66","/Users/ramon/Repositories/lucy-moie/src/pages/CategoryEdit/index.js":"67","/Users/ramon/Repositories/lucy-moie/src/pages/UserEdit/index.js":"68","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/index.js":"69","/Users/ramon/Repositories/lucy-moie/src/pages/StateEdit/index.js":"70","/Users/ramon/Repositories/lucy-moie/src/pages/User/index.js":"71","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/index.js":"72","/Users/ramon/Repositories/lucy-moie/src/pages/Template/index.js":"73","/Users/ramon/Repositories/lucy-moie/src/pages/TemplateEdit/index.js":"74","/Users/ramon/Repositories/lucy-moie/src/pages/OfficesEdit/index.js":"75","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/index.js":"76","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/index.js":"77","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/index.js":"78","/Users/ramon/Repositories/lucy-moie/src/pages/PaymentsEdit/index.js":"79","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/index.js":"80","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/index.js":"81","/Users/ramon/Repositories/lucy-moie/src/store/reports/reducer.js":"82","/Users/ramon/Repositories/lucy-moie/src/store/location/actions.js":"83","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/FooterUsers.js":"84","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/UsersSalesDropdown.js":"85","/Users/ramon/Repositories/lucy-moie/src/store/bill/actions.js":"86","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actionTypes.js":"87","/Users/ramon/Repositories/lucy-moie/src/common/constants.js":"88","/Users/ramon/Repositories/lucy-moie/src/components/Modal/ConfirmationModal.js":"89","/Users/ramon/Repositories/lucy-moie/src/common/utils.js":"90","/Users/ramon/Repositories/lucy-moie/src/components/Common/Breadcrumb.js":"91","/Users/ramon/Repositories/lucy-moie/src/components/Common/NoDataIndication.js":"92","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CategoriesPieChart.js":"93","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/OrdersPieChart.js":"94","/Users/ramon/Repositories/lucy-moie/src/components/Common/Observations.js":"95","/Users/ramon/Repositories/lucy-moie/src/helpers/service.js":"96","/Users/ramon/Repositories/lucy-moie/src/common/pagination.js":"97","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderList.js":"98","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonSubmit.js":"99","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/reducer.js":"100","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductPublish.js":"101","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductImage.js":"102","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actions.js":"103","/Users/ramon/Repositories/lucy-moie/src/store/order/actions.js":"104","/Users/ramon/Repositories/lucy-moie/src/store/payments/actions.js":"105","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderSummary.js":"106","/Users/ramon/Repositories/lucy-moie/src/store/product/actions.js":"107","/Users/ramon/Repositories/lucy-moie/src/store/customer/actions.js":"108","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCar.js":"109","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCustomer.js":"110","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderDeliveryOptions.js":"111","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderProducts.js":"112","/Users/ramon/Repositories/lucy-moie/src/helpers/backend_helper.js":"113","/Users/ramon/Repositories/lucy-moie/src/common/conditionals.js":"114","/Users/ramon/Repositories/lucy-moie/src/store/office/actions.js":"115","/Users/ramon/Repositories/lucy-moie/src/common/converters.js":"116","/Users/ramon/Repositories/lucy-moie/src/components/Modal/CommosModal.js":"117","/Users/ramon/Repositories/lucy-moie/src/components/Fields/Autocomplete.js":"118","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputDate.js":"119","/Users/ramon/Repositories/lucy-moie/src/store/reports/actionTypes.js":"120","/Users/ramon/Repositories/lucy-moie/src/store/template/actions.js":"121","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsList.js":"122","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeList.js":"123","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billList.js":"124","/Users/ramon/Repositories/lucy-moie/src/components/mentions/MultiMention.js":"125","/Users/ramon/Repositories/lucy-moie/src/components/mentions/useHookValue.js":"126","/Users/ramon/Repositories/lucy-moie/src/store/location/actionTypes.js":"127","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateList.js":"128","/Users/ramon/Repositories/lucy-moie/src/store/bill/actionTypes.js":"129","/Users/ramon/Repositories/lucy-moie/src/components/Common/PieChart.js":"130","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleList.js":"131","/Users/ramon/Repositories/lucy-moie/src/helpers/api_helper.js":"132","/Users/ramon/Repositories/lucy-moie/src/store/user/actions.js":"133","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/configsList.js":"134","/Users/ramon/Repositories/lucy-moie/src/store/category/actions.js":"135","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userList.js":"136","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actions.js":"137","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actionTypes.js":"138","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityList.js":"139","/Users/ramon/Repositories/lucy-moie/src/store/payments/actionTypes.js":"140","/Users/ramon/Repositories/lucy-moie/src/store/layout/actionTypes.js":"141","/Users/ramon/Repositories/lucy-moie/src/store/layout/actions.js":"142","/Users/ramon/Repositories/lucy-moie/src/store/reports/actions.js":"143","/Users/ramon/Repositories/lucy-moie/src/store/user/actionTypes.js":"144","/Users/ramon/Repositories/lucy-moie/src/store/template/actionTypes.js":"145","/Users/ramon/Repositories/lucy-moie/src/store/office/actionTypes.js":"146","/Users/ramon/Repositories/lucy-moie/src/store/order/actionTypes.js":"147","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesList.js":"148","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryList.js":"149","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/products-list.js":"150","/Users/ramon/Repositories/lucy-moie/src/store/comment/actions.js":"151","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/TimeLine.js":"152","/Users/ramon/Repositories/lucy-moie/src/components/Fields/index.js":"153","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actionTypes.js":"154","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actions.js":"155","/Users/ramon/Repositories/lucy-moie/src/components/StatusField/index.js":"156","/Users/ramon/Repositories/lucy-moie/src/helpers/url_helper.js":"157","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actionTypes.js":"158","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/ConciliationReportForm.js":"159","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actions.js":"160","/Users/ramon/Repositories/lucy-moie/src/components/Common/DropZoneIcon.js":"161","/Users/ramon/Repositories/lucy-moie/src/components/Common/Image.js":"162","/Users/ramon/Repositories/lucy-moie/src/store/product/actionTypes.js":"163","/Users/ramon/Repositories/lucy-moie/src/store/customer/actionTypes.js":"164","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerForm.js":"165","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeColumns.js":"166","/Users/ramon/Repositories/lucy-moie/src/store/template/reducer.js":"167","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateColumn.js":"168","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/PostSaleReportForm.js":"169","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/PostSaleImportFileForm.js":"170","/Users/ramon/Repositories/lucy-moie/src/store/category/actionTypes.js":"171","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleColumn.js":"172","/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/accessToken.js":"173","/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/auth-token-header.js":"174","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/forgetPassword.js":"175","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userColumn.js":"176","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityColumns.js":"177","/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsStatusCard.js":"178","/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsRegisteredCard.js":"179","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryColumn.js":"180","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/productColumn.js":"181","/Users/ramon/Repositories/lucy-moie/src/store/comment/actionTypes.js":"182","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSelectBasicField.js":"183","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputAsyncSearchField.js":"184","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputPhoneField.js":"185","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actionTypes.js":"186","/Users/ramon/Repositories/lucy-moie/src/components/TableFilter/index.js":"187","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputTextField.js":"188","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSwitchField.js":"189","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSearchField.js":"190","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard1.js":"191","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard4.js":"192","/Users/ramon/Repositories/lucy-moie/src/components/Common/HtmlTooltip.js":"193","/Users/ramon/Repositories/lucy-moie/src/components/Fields/messages.js":"194","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard.js":"195","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesColumn.js":"196","/Users/ramon/Repositories/lucy-moie/src/components/mentions/mentionStyles.js":"197","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/BillsReportForm.js":"198","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billColumns.js":"199","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/paymentOverlay.js":"200","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsColumn.js":"201","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actions.js":"202","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderConciliationsForm.js":"203","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderColumn.js":"204","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderEdit.js":"205","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actionTypes.js":"206","/Users/ramon/Repositories/lucy-moie/src/store/sizes/actions.js":"207","/Users/ramon/Repositories/lucy-moie/src/store/sizes/actionTypes.js":"208","/Users/ramon/Repositories/lucy-moie/src/helpers/fakebackend_helper.js":"209","/Users/ramon/Repositories/lucy-moie/src/helpers/firebase_helper.js":"210","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actions.js":"211","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actionTypes.js":"212","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actions.js":"213","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actionTypes.js":"214","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actions.js":"215","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actionTypes.js":"216","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductSize.js":"217","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/customer_status.js":"218","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/OrderCardList.js":"219","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductsPending.js":"220","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-users.js":"221","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/latest-transaction.js":"222","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/mini-widget.js":"223","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-vendors.js":"224","/Users/ramon/Repositories/lucy-moie/src/config.js":"225","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/SidebarContent.js":"226","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customers-list.js":"227","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/NotificationDropdown.js":"228","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/ProfileMenu.js":"229","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js":"230","/Users/ramon/Repositories/lucy-moie/src/store/bill/reducer.js":"231","/Users/ramon/Repositories/lucy-moie/src/store/office/reducer.js":"232","/Users/ramon/Repositories/lucy-moie/src/store/postSale/reducer.js":"233","/Users/ramon/Repositories/lucy-moie/src/store/user/reducer.js":"234","/Users/ramon/Repositories/lucy-moie/src/store/comment/reducer.js":"235","/Users/ramon/Repositories/lucy-moie/src/store/order/reducer.js":"236","/Users/ramon/Repositories/lucy-moie/src/store/productSize/reducer.js":"237","/Users/ramon/Repositories/lucy-moie/src/store/productImages/reducer.js":"238","/Users/ramon/Repositories/lucy-moie/src/store/sizes/reducer.js":"239","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/reducer.js":"240","/Users/ramon/Repositories/lucy-moie/src/store/category/reducer.js":"241","/Users/ramon/Repositories/lucy-moie/src/store/product/reducer.js":"242","/Users/ramon/Repositories/lucy-moie/src/store/location/reducer.js":"243","/Users/ramon/Repositories/lucy-moie/src/store/customer/reducer.js":"244","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/reducer.js":"245","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/reducer.js":"246","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/reducer.js":"247","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/reducer.js":"248","/Users/ramon/Repositories/lucy-moie/src/store/layout/reducer.js":"249","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerFilter/index.js":"250","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customerColumn.js":"251","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/PrintBatchRequest.js":"252","/Users/ramon/Repositories/lucy-moie/src/pages/Category/CatalogPrintBatchRequest.js":"253","/Users/ramon/Repositories/lucy-moie/src/i18n.js":"254","/Users/ramon/Repositories/lucy-moie/src/common/languages.js":"255","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/index.js":"256","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigList.js":"257","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigColumns.js":"258","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actions.js":"259","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actionTypes.js":"260","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/saga.js":"261","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/reducer.js":"262","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/index.js":"263","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/BillConfigForm.js":"264","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/OfficeReportForm.js":"265"},{"size":444,"mtime":1637949850510,"results":"266","hashOfConfig":"267"},{"size":2154,"mtime":1637949850293,"results":"268","hashOfConfig":"267"},{"size":5315,"mtime":1637949850555,"results":"269","hashOfConfig":"267"},{"size":452,"mtime":1637949850575,"results":"270","hashOfConfig":"267"},{"size":4571,"mtime":1638144118751,"results":"271","hashOfConfig":"267"},{"size":1328,"mtime":1637949850555,"results":"272","hashOfConfig":"267"},{"size":788,"mtime":1637949850499,"results":"273","hashOfConfig":"267"},{"size":882,"mtime":1637949850497,"results":"274","hashOfConfig":"267"},{"size":3070,"mtime":1637949850496,"results":"275","hashOfConfig":"267"},{"size":3637,"mtime":1637949850503,"results":"276","hashOfConfig":"267"},{"size":1643,"mtime":1638139339052,"results":"277","hashOfConfig":"267"},{"size":1478,"mtime":1638139358730,"results":"278","hashOfConfig":"267"},{"size":9382,"mtime":1637949850495,"results":"279","hashOfConfig":"267"},{"size":826,"mtime":1638139386386,"results":"280","hashOfConfig":"267"},{"size":11296,"mtime":1638143371026,"results":"281","hashOfConfig":"267"},{"size":679,"mtime":1637949850493,"results":"282","hashOfConfig":"267"},{"size":9466,"mtime":1637949850502,"results":"283","hashOfConfig":"267"},{"size":1580,"mtime":1637949850502,"results":"284","hashOfConfig":"267"},{"size":612,"mtime":1637949850501,"results":"285","hashOfConfig":"267"},{"size":5457,"mtime":1637949850527,"results":"286","hashOfConfig":"267"},{"size":7934,"mtime":1637949850547,"results":"287","hashOfConfig":"267"},{"size":6370,"mtime":1637949850514,"results":"288","hashOfConfig":"267"},{"size":464,"mtime":1637949850515,"results":"289","hashOfConfig":"267"},{"size":602,"mtime":1637949850523,"results":"290","hashOfConfig":"267"},{"size":1020,"mtime":1637949850539,"results":"291","hashOfConfig":"267"},{"size":4705,"mtime":1637949850514,"results":"292","hashOfConfig":"267"},{"size":9270,"mtime":1637949850545,"results":"293","hashOfConfig":"267"},{"size":7404,"mtime":1637949850515,"results":"294","hashOfConfig":"267"},{"size":413,"mtime":1637949850554,"results":"295","hashOfConfig":"267"},{"size":7214,"mtime":1637949850515,"results":"296","hashOfConfig":"267"},{"size":12497,"mtime":1637949850524,"results":"297","hashOfConfig":"267"},{"size":6368,"mtime":1638155912595,"results":"298","hashOfConfig":"267"},{"size":13370,"mtime":1637949850485,"results":"299","hashOfConfig":"267"},{"size":789,"mtime":1637949850559,"results":"300","hashOfConfig":"267"},{"size":2227,"mtime":1637949850560,"results":"301","hashOfConfig":"267"},{"size":1545,"mtime":1637949850526,"results":"302","hashOfConfig":"267"},{"size":29563,"mtime":1637949850548,"results":"303","hashOfConfig":"267"},{"size":515,"mtime":1637949850538,"results":"304","hashOfConfig":"267"},{"size":1900,"mtime":1637949850558,"results":"305","hashOfConfig":"267"},{"size":2846,"mtime":1637949850562,"results":"306","hashOfConfig":"267"},{"size":3506,"mtime":1637949850571,"results":"307","hashOfConfig":"267"},{"size":4231,"mtime":1637949850567,"results":"308","hashOfConfig":"267"},{"size":1512,"mtime":1637949850563,"results":"309","hashOfConfig":"267"},{"size":3135,"mtime":1637949850595,"results":"310","hashOfConfig":"267"},{"size":4337,"mtime":1637949850587,"results":"311","hashOfConfig":"267"},{"size":3816,"mtime":1637949850569,"results":"312","hashOfConfig":"267"},{"size":3367,"mtime":1637949850589,"results":"313","hashOfConfig":"267"},{"size":1163,"mtime":1637949850590,"results":"314","hashOfConfig":"267"},{"size":3419,"mtime":1637949850573,"results":"315","hashOfConfig":"267"},{"size":3838,"mtime":1637949850575,"results":"316","hashOfConfig":"267"},{"size":5464,"mtime":1637949850578,"results":"317","hashOfConfig":"267"},{"size":8960,"mtime":1637949850582,"results":"318","hashOfConfig":"267"},{"size":3908,"mtime":1637949850598,"results":"319","hashOfConfig":"267"},{"size":3283,"mtime":1637949850596,"results":"320","hashOfConfig":"267"},{"size":7043,"mtime":1637949850580,"results":"321","hashOfConfig":"267"},{"size":7414,"mtime":1637949850565,"results":"322","hashOfConfig":"267"},{"size":4857,"mtime":1637949850577,"results":"323","hashOfConfig":"267"},{"size":1814,"mtime":1638153849585,"results":"324","hashOfConfig":"267"},{"size":3898,"mtime":1638153849584,"results":"325","hashOfConfig":"267"},{"size":2920,"mtime":1638153849583,"results":"326","hashOfConfig":"267"},{"size":5522,"mtime":1637949850585,"results":"327","hashOfConfig":"267"},{"size":545,"mtime":1637949850546,"results":"328","hashOfConfig":"267"},{"size":545,"mtime":1637949850519,"results":"329","hashOfConfig":"267"},{"size":524,"mtime":1637949850549,"results":"330","hashOfConfig":"267"},{"size":569,"mtime":1637949850530,"results":"331","hashOfConfig":"267"},{"size":7624,"mtime":1637949850532,"results":"332","hashOfConfig":"267"},{"size":5769,"mtime":1637949850521,"results":"333","hashOfConfig":"267"},{"size":8466,"mtime":1637949850553,"results":"334","hashOfConfig":"267"},{"size":533,"mtime":1637949850530,"results":"335","hashOfConfig":"267"},{"size":6887,"mtime":1637949850550,"results":"336","hashOfConfig":"267"},{"size":516,"mtime":1637949850552,"results":"337","hashOfConfig":"267"},{"size":534,"mtime":1637949850543,"results":"338","hashOfConfig":"267"},{"size":543,"mtime":1637949850551,"results":"339","hashOfConfig":"267"},{"size":7866,"mtime":1637949850551,"results":"340","hashOfConfig":"267"},{"size":21283,"mtime":1637949850534,"results":"341","hashOfConfig":"267"},{"size":516,"mtime":1637949850516,"results":"342","hashOfConfig":"267"},{"size":529,"mtime":1637949850532,"results":"343","hashOfConfig":"267"},{"size":6380,"mtime":1637949850535,"results":"344","hashOfConfig":"267"},{"size":14718,"mtime":1642290893928,"results":"345","hashOfConfig":"267"},{"size":534,"mtime":1637949850541,"results":"346","hashOfConfig":"267"},{"size":490,"mtime":1637949850549,"results":"347","hashOfConfig":"267"},{"size":985,"mtime":1637949850592,"results":"348","hashOfConfig":"267"},{"size":4284,"mtime":1637949850577,"results":"349","hashOfConfig":"267"},{"size":2405,"mtime":1637949850494,"results":"350","hashOfConfig":"267"},{"size":7186,"mtime":1637949850487,"results":"351","hashOfConfig":"267"},{"size":4871,"mtime":1637949850564,"results":"352","hashOfConfig":"267"},{"size":270,"mtime":1637949850559,"results":"353","hashOfConfig":"267"},{"size":5373,"mtime":1642291654689,"results":"354","hashOfConfig":"267"},{"size":1624,"mtime":1637949850498,"results":"355","hashOfConfig":"267"},{"size":6099,"mtime":1637949850476,"results":"356","hashOfConfig":"267"},{"size":1113,"mtime":1637949850477,"results":"357","hashOfConfig":"267"},{"size":333,"mtime":1637949850482,"results":"358","hashOfConfig":"267"},{"size":1288,"mtime":1637949850524,"results":"359","hashOfConfig":"267"},{"size":1444,"mtime":1637949850526,"results":"360","hashOfConfig":"267"},{"size":5858,"mtime":1637949850482,"results":"361","hashOfConfig":"267"},{"size":5782,"mtime":1637949850509,"results":"362","hashOfConfig":"267"},{"size":38,"mtime":1637949850476,"results":"363","hashOfConfig":"267"},{"size":18114,"mtime":1637949850540,"results":"364","hashOfConfig":"267"},{"size":678,"mtime":1637949850477,"results":"365","hashOfConfig":"267"},{"size":3228,"mtime":1637949850574,"results":"366","hashOfConfig":"267"},{"size":3515,"mtime":1637949850547,"results":"367","hashOfConfig":"267"},{"size":7271,"mtime":1637949850547,"results":"368","hashOfConfig":"267"},{"size":3381,"mtime":1637949850574,"results":"369","hashOfConfig":"267"},{"size":5874,"mtime":1637949850581,"results":"370","hashOfConfig":"267"},{"size":2233,"mtime":1638153849583,"results":"371","hashOfConfig":"267"},{"size":4654,"mtime":1637949850538,"results":"372","hashOfConfig":"267"},{"size":2933,"mtime":1637949850586,"results":"373","hashOfConfig":"267"},{"size":2931,"mtime":1637949850570,"results":"374","hashOfConfig":"267"},{"size":9768,"mtime":1637949850536,"results":"375","hashOfConfig":"267"},{"size":14159,"mtime":1637949850536,"results":"376","hashOfConfig":"267"},{"size":13691,"mtime":1637949850537,"results":"377","hashOfConfig":"267"},{"size":14020,"mtime":1637949850537,"results":"378","hashOfConfig":"267"},{"size":11625,"mtime":1638153849579,"results":"379","hashOfConfig":"267"},{"size":2613,"mtime":1637949850471,"results":"380","hashOfConfig":"267"},{"size":4959,"mtime":1637949850579,"results":"381","hashOfConfig":"267"},{"size":1741,"mtime":1637949850472,"results":"382","hashOfConfig":"267"},{"size":1451,"mtime":1637949850498,"results":"383","hashOfConfig":"267"},{"size":5304,"mtime":1637949850487,"results":"384","hashOfConfig":"267"},{"size":3251,"mtime":1637949850488,"results":"385","hashOfConfig":"267"},{"size":242,"mtime":1637949850591,"results":"386","hashOfConfig":"267"},{"size":1830,"mtime":1637949850595,"results":"387","hashOfConfig":"267"},{"size":8857,"mtime":1638153849581,"results":"388","hashOfConfig":"267"},{"size":8991,"mtime":1638153849580,"results":"389","hashOfConfig":"267"},{"size":10248,"mtime":1637949850517,"results":"390","hashOfConfig":"267"},{"size":856,"mtime":1637949850504,"results":"391","hashOfConfig":"267"},{"size":403,"mtime":1637949850504,"results":"392","hashOfConfig":"267"},{"size":1780,"mtime":1637949850577,"results":"393","hashOfConfig":"267"},{"size":8848,"mtime":1637949850551,"results":"394","hashOfConfig":"267"},{"size":1799,"mtime":1637949850564,"results":"395","hashOfConfig":"267"},{"size":1153,"mtime":1637949850483,"results":"396","hashOfConfig":"267"},{"size":9524,"mtime":1637949850544,"results":"397","hashOfConfig":"267"},{"size":1892,"mtime":1637949850506,"results":"398","hashOfConfig":"267"},{"size":2408,"mtime":1637949850597,"results":"399","hashOfConfig":"267"},{"size":15680,"mtime":1637949850530,"results":"400","hashOfConfig":"267"},{"size":2778,"mtime":1637949850566,"results":"401","hashOfConfig":"267"},{"size":7940,"mtime":1637949850553,"results":"402","hashOfConfig":"267"},{"size":2986,"mtime":1637949850585,"results":"403","hashOfConfig":"267"},{"size":1324,"mtime":1637949850584,"results":"404","hashOfConfig":"267"},{"size":9399,"mtime":1637949850531,"results":"405","hashOfConfig":"267"},{"size":835,"mtime":1638153849583,"results":"406","hashOfConfig":"267"},{"size":549,"mtime":1637949850576,"results":"407","hashOfConfig":"267"},{"size":1130,"mtime":1637949850576,"results":"408","hashOfConfig":"267"},{"size":570,"mtime":1637949850592,"results":"409","hashOfConfig":"267"},{"size":895,"mtime":1637949850597,"results":"410","hashOfConfig":"267"},{"size":693,"mtime":1637949850595,"results":"411","hashOfConfig":"267"},{"size":1857,"mtime":1637949850579,"results":"412","hashOfConfig":"267"},{"size":2430,"mtime":1637949850581,"results":"413","hashOfConfig":"267"},{"size":8492,"mtime":1637949850550,"results":"414","hashOfConfig":"267"},{"size":13184,"mtime":1637949850520,"results":"415","hashOfConfig":"267"},{"size":10913,"mtime":1637949850546,"results":"416","hashOfConfig":"267"},{"size":2687,"mtime":1637949850568,"results":"417","hashOfConfig":"267"},{"size":3091,"mtime":1637949850526,"results":"418","hashOfConfig":"267"},{"size":970,"mtime":1637949850490,"results":"419","hashOfConfig":"267"},{"size":991,"mtime":1637949850574,"results":"420","hashOfConfig":"267"},{"size":2237,"mtime":1637949850572,"results":"421","hashOfConfig":"267"},{"size":800,"mtime":1637949850499,"results":"422","hashOfConfig":"267"},{"size":2399,"mtime":1638139472344,"results":"423","hashOfConfig":"267"},{"size":915,"mtime":1637949850572,"results":"424","hashOfConfig":"267"},{"size":5123,"mtime":1637949850549,"results":"425","hashOfConfig":"267"},{"size":718,"mtime":1637949850590,"results":"426","hashOfConfig":"267"},{"size":2409,"mtime":1637949850478,"results":"427","hashOfConfig":"267"},{"size":610,"mtime":1637949850479,"results":"428","hashOfConfig":"267"},{"size":950,"mtime":1637949850586,"results":"429","hashOfConfig":"267"},{"size":1105,"mtime":1637949850570,"results":"430","hashOfConfig":"267"},{"size":14457,"mtime":1637949850525,"results":"431","hashOfConfig":"267"},{"size":3562,"mtime":1637949850533,"results":"432","hashOfConfig":"267"},{"size":2457,"mtime":1637949850596,"results":"433","hashOfConfig":"267"},{"size":1910,"mtime":1637949850551,"results":"434","hashOfConfig":"267"},{"size":5849,"mtime":1637949850549,"results":"435","hashOfConfig":"267"},{"size":6169,"mtime":1637949850543,"results":"436","hashOfConfig":"267"},{"size":1146,"mtime":1637949850566,"results":"437","hashOfConfig":"267"},{"size":4657,"mtime":1637949850544,"results":"438","hashOfConfig":"267"},{"size":56,"mtime":1637949850508,"results":"439","hashOfConfig":"267"},{"size":196,"mtime":1637949850508,"results":"440","hashOfConfig":"267"},{"size":4271,"mtime":1637949850552,"results":"441","hashOfConfig":"267"},{"size":3008,"mtime":1637949850552,"results":"442","hashOfConfig":"267"},{"size":2522,"mtime":1637949850531,"results":"443","hashOfConfig":"267"},{"size":707,"mtime":1637949850483,"results":"444","hashOfConfig":"267"},{"size":1001,"mtime":1637949850483,"results":"445","hashOfConfig":"267"},{"size":2736,"mtime":1637949850519,"results":"446","hashOfConfig":"267"},{"size":6355,"mtime":1638153849582,"results":"447","hashOfConfig":"267"},{"size":841,"mtime":1637949850568,"results":"448","hashOfConfig":"267"},{"size":1067,"mtime":1637949850489,"results":"449","hashOfConfig":"267"},{"size":3542,"mtime":1637949850488,"results":"450","hashOfConfig":"267"},{"size":2742,"mtime":1637949850489,"results":"451","hashOfConfig":"267"},{"size":286,"mtime":1637949850589,"results":"452","hashOfConfig":"267"},{"size":13697,"mtime":1638148953835,"results":"453","hashOfConfig":"267"},{"size":3483,"mtime":1637949850490,"results":"454","hashOfConfig":"267"},{"size":1921,"mtime":1637949850490,"results":"455","hashOfConfig":"267"},{"size":3212,"mtime":1637949850489,"results":"456","hashOfConfig":"267"},{"size":2289,"mtime":1637949850484,"results":"457","hashOfConfig":"267"},{"size":2009,"mtime":1637949850484,"results":"458","hashOfConfig":"267"},{"size":713,"mtime":1637949850479,"results":"459","hashOfConfig":"267"},{"size":213,"mtime":1637949850491,"results":"460","hashOfConfig":"267"},{"size":2118,"mtime":1637949850484,"results":"461","hashOfConfig":"267"},{"size":2439,"mtime":1637949850550,"results":"462","hashOfConfig":"267"},{"size":1269,"mtime":1637949850504,"results":"463","hashOfConfig":"267"},{"size":4172,"mtime":1637949850548,"results":"464","hashOfConfig":"267"},{"size":3676,"mtime":1637949850516,"results":"465","hashOfConfig":"267"},{"size":12241,"mtime":1638154245180,"results":"466","hashOfConfig":"267"},{"size":1886,"mtime":1638153849581,"results":"467","hashOfConfig":"267"},{"size":2084,"mtime":1637949850588,"results":"468","hashOfConfig":"267"},{"size":17790,"mtime":1640004911627,"results":"469","hashOfConfig":"267"},{"size":6084,"mtime":1638154122001,"results":"470","hashOfConfig":"267"},{"size":45025,"mtime":1637949850540,"results":"471","hashOfConfig":"267"},{"size":872,"mtime":1637949850588,"results":"472","hashOfConfig":"267"},{"size":1672,"mtime":1637949850594,"results":"473","hashOfConfig":"267"},{"size":597,"mtime":1637949850594,"results":"474","hashOfConfig":"267"},{"size":4092,"mtime":1637949850507,"results":"475","hashOfConfig":"267"},{"size":4879,"mtime":1637949850507,"results":"476","hashOfConfig":"267"},{"size":439,"mtime":1637949850563,"results":"477","hashOfConfig":"267"},{"size":172,"mtime":1637949850562,"results":"478","hashOfConfig":"267"},{"size":1082,"mtime":1637949850561,"results":"479","hashOfConfig":"267"},{"size":480,"mtime":1637949850560,"results":"480","hashOfConfig":"267"},{"size":489,"mtime":1637949850557,"results":"481","hashOfConfig":"267"},{"size":175,"mtime":1637949850557,"results":"482","hashOfConfig":"267"},{"size":10402,"mtime":1637949850547,"results":"483","hashOfConfig":"267"},{"size":318,"mtime":1637949850523,"results":"484","hashOfConfig":"267"},{"size":5316,"mtime":1637949850535,"results":"485","hashOfConfig":"267"},{"size":4169,"mtime":1637949850548,"results":"486","hashOfConfig":"267"},{"size":3057,"mtime":1637949850528,"results":"487","hashOfConfig":"267"},{"size":8510,"mtime":1637949850527,"results":"488","hashOfConfig":"267"},{"size":626,"mtime":1637949850528,"results":"489","hashOfConfig":"267"},{"size":4730,"mtime":1637949850528,"results":"490","hashOfConfig":"267"},{"size":125,"mtime":1637949850505,"results":"491","hashOfConfig":"267"},{"size":16404,"mtime":1637949850502,"results":"492","hashOfConfig":"267"},{"size":10835,"mtime":1637949850523,"results":"493","hashOfConfig":"267"},{"size":5923,"mtime":1637949850486,"results":"494","hashOfConfig":"267"},{"size":2644,"mtime":1637949850486,"results":"495","hashOfConfig":"267"},{"size":1995,"mtime":1637949850485,"results":"496","hashOfConfig":"267"},{"size":7156,"mtime":1637949850565,"results":"497","hashOfConfig":"267"},{"size":7778,"mtime":1637949850580,"results":"498","hashOfConfig":"267"},{"size":5909,"mtime":1637949850585,"results":"499","hashOfConfig":"267"},{"size":4156,"mtime":1637949850598,"results":"500","hashOfConfig":"267"},{"size":3219,"mtime":1637949850569,"results":"501","hashOfConfig":"267"},{"size":11526,"mtime":1637949850581,"results":"502","hashOfConfig":"267"},{"size":1160,"mtime":1637949850590,"results":"503","hashOfConfig":"267"},{"size":2896,"mtime":1637949850588,"results":"504","hashOfConfig":"267"},{"size":2339,"mtime":1637949850594,"results":"505","hashOfConfig":"267"},{"size":2737,"mtime":1637949850573,"results":"506","hashOfConfig":"267"},{"size":4613,"mtime":1637949850567,"results":"507","hashOfConfig":"267"},{"size":3675,"mtime":1637949850587,"results":"508","hashOfConfig":"267"},{"size":5742,"mtime":1637949850578,"results":"509","hashOfConfig":"267"},{"size":4268,"mtime":1637949850571,"results":"510","hashOfConfig":"267"},{"size":1898,"mtime":1637949850561,"results":"511","hashOfConfig":"267"},{"size":734,"mtime":1637949850558,"results":"512","hashOfConfig":"267"},{"size":903,"mtime":1637949850563,"results":"513","hashOfConfig":"267"},{"size":878,"mtime":1637949850559,"results":"514","hashOfConfig":"267"},{"size":1755,"mtime":1637949850576,"results":"515","hashOfConfig":"267"},{"size":8226,"mtime":1637949850522,"results":"516","hashOfConfig":"267"},{"size":3966,"mtime":1637949850522,"results":"517","hashOfConfig":"267"},{"size":3540,"mtime":1637949850535,"results":"518","hashOfConfig":"267"},{"size":1874,"mtime":1637949850519,"results":"519","hashOfConfig":"267"},{"size":1234,"mtime":1637949850509,"results":"520","hashOfConfig":"267"},{"size":581,"mtime":1637949850475,"results":"521","hashOfConfig":"267"},{"size":574,"mtime":1638137039676,"results":"522","hashOfConfig":"267"},{"size":8169,"mtime":1638147576615,"results":"523","hashOfConfig":"267"},{"size":2298,"mtime":1638143390434,"results":"524","hashOfConfig":"267"},{"size":3476,"mtime":1638148712111,"results":"525","hashOfConfig":"267"},{"size":1278,"mtime":1638138977930,"results":"526","hashOfConfig":"267"},{"size":4697,"mtime":1638148826197,"results":"527","hashOfConfig":"267"},{"size":4571,"mtime":1638141286505,"results":"528","hashOfConfig":"267"},{"size":1591,"mtime":1638143705323,"results":"529","hashOfConfig":"267"},{"size":7251,"mtime":1638148439883,"results":"530","hashOfConfig":"267"},{"size":4093,"mtime":1638153849582,"results":"531","hashOfConfig":"267"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},"1g4yafj",{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"534"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"534"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"534"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"534"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"534"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"534"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"534"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"534"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"534"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"534"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"534"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"534"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"534"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"534"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"534"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"534"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"534"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"534"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"534"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"534"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"534"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"534"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"534"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"534"},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"707","usedDeprecatedRules":"534"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"534"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"534"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"732","usedDeprecatedRules":"534"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"534"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"534"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"534"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"756","usedDeprecatedRules":"534"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"761","usedDeprecatedRules":"534"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764","usedDeprecatedRules":"534"},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"767","messages":"768","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"769","usedDeprecatedRules":"534"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"772","usedDeprecatedRules":"534"},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"775","usedDeprecatedRules":"534"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"784","usedDeprecatedRules":"534"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"534"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"534"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"534"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"534"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"805","usedDeprecatedRules":"534"},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"534"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"534"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"820","usedDeprecatedRules":"534"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"823","usedDeprecatedRules":"534"},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"826","usedDeprecatedRules":"534"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"829","usedDeprecatedRules":"534"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"832","messages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"834","messages":"835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"836","messages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"534"},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845","usedDeprecatedRules":"534"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"534"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"857","usedDeprecatedRules":"534"},{"filePath":"858","messages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864","usedDeprecatedRules":"534"},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883","usedDeprecatedRules":"534"},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"886","usedDeprecatedRules":"534"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"534"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"892","usedDeprecatedRules":"534"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"909","usedDeprecatedRules":"534"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"922","usedDeprecatedRules":"534"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929","usedDeprecatedRules":"534"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"534"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"534"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946","usedDeprecatedRules":"534"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"951","messages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"955","usedDeprecatedRules":"534"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"534"},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"965","usedDeprecatedRules":"534"},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968","usedDeprecatedRules":"534"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971","usedDeprecatedRules":"534"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"974","messages":"975","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"976","usedDeprecatedRules":"534"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"979","messages":"980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"983","messages":"984","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"985","usedDeprecatedRules":"534"},{"filePath":"986","messages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"988","usedDeprecatedRules":"534"},{"filePath":"989","messages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"991","messages":"992","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"993","usedDeprecatedRules":"534"},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996","usedDeprecatedRules":"534"},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"999","usedDeprecatedRules":"534"},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"534"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1009","usedDeprecatedRules":"534"},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1012","messages":"1013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1016","usedDeprecatedRules":"534"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021","usedDeprecatedRules":"534"},{"filePath":"1022","messages":"1023","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1024","messages":"1025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1034","messages":"1035","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1036","messages":"1037","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1042","messages":"1043","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1044","messages":"1045","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1046","usedDeprecatedRules":"534"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1049","usedDeprecatedRules":"534"},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1052","usedDeprecatedRules":"534"},{"filePath":"1053","messages":"1054","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1055","usedDeprecatedRules":"534"},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1058","usedDeprecatedRules":"534"},{"filePath":"1059","messages":"1060","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1061","usedDeprecatedRules":"534"},{"filePath":"1062","messages":"1063","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064","usedDeprecatedRules":"534"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1067","messages":"1068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1073","usedDeprecatedRules":"534"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"534"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1081","messages":"1082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1093","messages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1095","messages":"1096","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1097","usedDeprecatedRules":"534"},{"filePath":"1098","messages":"1099","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1100","messages":"1101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1102","messages":"1103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1104","messages":"1105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1106","usedDeprecatedRules":"534"},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1109","messages":"1110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1111","messages":"1112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1113","usedDeprecatedRules":"534"},{"filePath":"1114","messages":"1115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1116","messages":"1117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1120","messages":"1121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1122","messages":"1123","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1124","usedDeprecatedRules":"534"},{"filePath":"1125","messages":"1126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1127","usedDeprecatedRules":"534"},{"filePath":"1128","messages":"1129","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1130","usedDeprecatedRules":"534"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1133","usedDeprecatedRules":"534"},{"filePath":"1134","messages":"1135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1136","messages":"1137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1138","messages":"1139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1140","messages":"1141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1142","usedDeprecatedRules":"534"},{"filePath":"1143","messages":"1144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1145","usedDeprecatedRules":"534"},{"filePath":"1146","messages":"1147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1148","usedDeprecatedRules":"534"},{"filePath":"1149","messages":"1150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"534"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"534"},{"filePath":"1156","messages":"1157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1158","usedDeprecatedRules":"534"},{"filePath":"1159","messages":"1160","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1161","usedDeprecatedRules":"534"},{"filePath":"1162","messages":"1163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1164","usedDeprecatedRules":"534"},"/Users/ramon/Repositories/lucy-moie/src/index.js",[],["1165","1166"],"/Users/ramon/Repositories/lucy-moie/src/App.js",[],"/Users/ramon/Repositories/lucy-moie/src/serviceWorker.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/routes/allRoutes.js",[],"/Users/ramon/Repositories/lucy-moie/src/routes/middleware/Authmiddleware.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/NonAuthLayout.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/MessageToast/ShowToastMessages.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sagas.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reducers.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Header.js",["1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181"],"import React, { useState } from \"react\"\nimport PropTypes from 'prop-types'\n\nimport { connect } from \"react-redux\"\n\nimport {BrowserRouter as Router, Link} from \"react-router-dom\"\n\n// Redux Store\nimport { showRightSidebarAction, toggleLeftmenu } from \"../../store/actions\"\n// reactstrap\nimport { Row, Col, Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\"\n\n// Import menuDropdown\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\"\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\"\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\"\n\nimport logo from \"../../assets/images/logo-sm.png\"\nimport logoLight from \"../../assets/images/logo-light.png\"\nimport logoDark from \"../../assets/images/logo-dark.png\"\n\n// import images\nimport github from \"../../assets/images/brands/github.png\"\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\"\nimport dribbble from \"../../assets/images/brands/dribbble.png\"\nimport dropbox from \"../../assets/images/brands/dropbox.png\"\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\"\nimport slack from \"../../assets/images/brands/slack.png\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\nimport UsersSalesDropdown from \"../CommonForBoth/TopbarDropdown/UsersSalesDropdown\";\n\nconst Header = props => {\n  const [isSearch, setSearch] = useState(false)\n  const [socialDrp, setsocialDrp] = useState(false)\n\n  function toggleFullscreen() {\n    if (\n      !document.fullscreenElement &&\n      /* alternative standard method */ !document.mozFullScreenElement &&\n      !document.webkitFullscreenElement\n    ) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen()\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen()\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen(\n          Element.ALLOW_KEYBOARD_INPUT\n        )\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen()\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen()\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen()\n      }\n    }\n  }\n  return (\n    <React.Fragment>\n        <div className=\"navbar-header\">\n          <div className=\"d-flex\">\n            <div className=\"navbar-brand-box\">\n              <Link to=\"/\" className=\"logo logo-dark\">\n                <span className=\"logo-sm\">\n                  <img src={logo} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoDark} alt=\"\" height=\"17\" />\n                </span>\n              </Link>\n\n              <Link to=\"/\" className=\"logo logo-light\">\n                <span className=\"logo-sm\">\n                  <img src={logo} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoLight} alt=\"\" height=\"30\" />\n                </span>\n              </Link>\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-sm px-3 font-size-16 d-lg-none header-item waves-effect waves-light\"\n              data-toggle=\"collapse\"\n              onClick={() => {\n                props.toggleLeftmenu(!props.leftMenu)\n              }}\n              data-target=\"#topnav-menu-content\"\n            >\n              <i className=\"fa fa-fw fa-bars\"/>\n            </button>\n\n            <form className=\"app-search d-none d-lg-block\">\n              <div className=\"position-relative\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Buscar...\"\n                />\n                <span className=\"uil-search\"></span>\n              </div>\n            </form>\n          </div>\n\n          <div className=\"d-flex\">\n            <div className=\"dropdown d-inline-block d-lg-none ms-2\">\n              <button\n                type=\"button\"\n                className=\"btn header-item noti-icon waves-effect\"\n                id=\"page-header-search-dropdown\"\n                onClick={() => setSearch(!isSearch)}\n              >\n                <i className=\"uil-search\"></i>\n              </button>\n              <div\n                className={\n                  isSearch\n                    ? \"dropdown-menu dropdown-menu-lg dropdown-menu-right p-0 show\"\n                    : \"dropdown-menu dropdown-menu-lg dropdown-menu-right p-0\"\n                }\n                aria-labelledby=\"page-header-search-dropdown\"\n              >\n                <form className=\"p-3\">\n                  <div className=\"form-group m-0\">\n                    <div className=\"input-group\">\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder={props.t(\"Search\") + \"...\"}\n                        aria-label=\"Recipient's username\"\n                      />\n                      <div className=\"input-group-append\">\n                        <button className=\"btn btn-primary\" type=\"submit\">\n                          <i className=\"mdi mdi-magnify\"/>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </div>\n\n{/*            <LanguageDropdown />*/}\n\n{/*            <Dropdown\n              className=\"d-none d-lg-inline-block ms-1\"\n              isOpen={socialDrp}\n              toggle={() => {\n                setsocialDrp(!socialDrp)\n              }}\n            >\n              <DropdownToggle\n                className=\"btn header-item noti-icon waves-effect\"\n                caret\n                tag=\"button\"\n              >\n                <i className=\"bx bx-customize\"/>\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\" right>\n                <div className=\"px-lg-2\">\n                  <Row className=\"g-0\">\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={github} alt=\"Github\" />\n                        <span>GitHub</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={bitbucket} alt=\"bitbucket\" />\n                        <span>Bitbucket</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={dribbble} alt=\"dribbble\" />\n                        <span>Dribbble</span>\n                      </Link>\n                    </Col>\n                  </Row>\n                  <Row className=\"g-0\">\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={dropbox} alt=\"dropbox\" />\n                        <span>Dropbox</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\n                        <span>Mail Chimp</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={slack} alt=\"slack\" />\n                        <span>Slack</span>\n                      </Link>\n                    </Col>\n                  </Row>\n                </div>\n              </DropdownMenu>\n            </Dropdown>*/}\n\n            <div className=\"dropdown d-none d-lg-inline-block ms-1\">\n              <button\n                type=\"button\"\n                className=\"btn header-item noti-icon waves-effect\"\n                onClick={() => {\n                  toggleFullscreen()\n                }}\n                data-toggle=\"fullscreen\"\n              >\n                <i className=\"uil-minus-path\"></i>\n              </button>\n            </div>\n\n            <UsersSalesDropdown />\n            <NotificationDropdown />\n            <ProfileMenu />\n\n{/*            <div className=\"dropdown d-inline-block\">\n              <button\n                onClick={() => {\n                  props.showRightSidebarAction(!props.showRightSidebar)\n                }}\n                type=\"button\"\n                className=\"btn header-item noti-icon right-bar-toggle waves-effect\"\n              >\n                <i className=\"uil-cog\"></i>\n              </button>\n            </div>*/}\n          </div>\n        </div>\n    </React.Fragment>\n  )\n}\n\nHeader.propTypes = {\n  leftMenu: PropTypes.any,\n  showRightSidebar: PropTypes.any,\n  showRightSidebarAction: PropTypes.func,\n  t: PropTypes.any,\n  toggleLeftmenu: PropTypes.func\n}\n\nconst mapStatetoProps = state => {\n  const { layoutType, showRightSidebar, leftMenu } = state.Layout\n  return { layoutType, showRightSidebar, leftMenu }\n}\n\nexport default connect(mapStatetoProps, {\n  showRightSidebarAction,\n  toggleLeftmenu,\n})(withTranslation()(Header))\n","/Users/ramon/Repositories/lucy-moie/src/store/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Navbar.js",["1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205"],"import PropTypes from \"prop-types\"\nimport React, {useEffect, useState} from \"react\"\nimport {Collapse} from \"reactstrap\"\nimport {Link, withRouter} from \"react-router-dom\"\nimport classname from \"classnames\"\n\n//i18n\nimport {withTranslation} from \"react-i18next\"\n\nimport {connect} from \"react-redux\"\n\nconst Navbar = props => {\n  const [ui, setui] = useState(false)\n  const [app, setapp] = useState(false)\n  const [email, setemail] = useState(false)\n  const [ecommerce, setecommerce] = useState(false)\n  const [contact, setcontact] = useState(false)\n  const [component, setcomponent] = useState(false)\n  const [form, setform] = useState(false)\n  const [table, settable] = useState(false)\n  const [chart, setchart] = useState(false)\n  const [icon, seticon] = useState(false)\n  const [map, setmap] = useState(false)\n  const [extra, setextra] = useState(false)\n  const [invoice, setinvoice] = useState(false)\n  const [auth, setauth] = useState(false)\n  const [utility, setutility] = useState(false)\n\n  useEffect(() => {\n    var matchingMenuItem = null\n    var ul = document.getElementById(\"navigation\")\n    var items = ul.getElementsByTagName(\"a\")\n    for (var i = 0; i < items.length; ++i) {\n      if (props.location.pathname === items[i].pathname) {\n        matchingMenuItem = items[i]\n        break\n      }\n    }\n    if (matchingMenuItem) {\n      activateParentDropdown(matchingMenuItem)\n    }\n  })\n  function activateParentDropdown(item) {\n    item.classList.add(\"active\")\n    const parent = item.parentElement\n    if (parent) {\n      parent.classList.add(\"active\") // li\n      const parent2 = parent.parentElement\n      parent2.classList.add(\"active\") // li\n      const parent3 = parent2.parentElement\n      if (parent3) {\n        parent3.classList.add(\"active\") // li\n        const parent4 = parent3.parentElement\n        if (parent4) {\n          parent4.classList.add(\"active\") // li\n          const parent5 = parent4.parentElement\n          if (parent5) {\n            parent5.classList.add(\"active\") // li\n            const parent6 = parent5.parentElement\n            if (parent6) {\n              parent6.classList.add(\"active\") // li\n            }\n          }\n        }\n      }\n    }\n    return false\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"container-fluid\">\n        <div className=\"topnav\">\n          <nav\n            className=\"navbar navbar-light navbar-expand-lg topnav-menu\"\n            id=\"navigation\"\n          >\n            <Collapse\n              isOpen={props.leftMenu}\n              className=\"navbar-collapse\"\n              id=\"topnav-menu-content\"\n            >\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <Link\n                    className=\"nav-link\"\n                    to=\"/dashboard\"\n                  >\n                    <i className=\"uil-home-alt me-2\"></i>\n                    {\" \"}{props.t(\"Dashboard\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/products\"\n                  >\n                    <i className=\"uil-box me-2\"></i>\n                    {\" \"}{props.t(\"Productos\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/categories\"\n                  >\n                    <i className=\"uil-box me-2\"></i>\n                    {\" \"}{props.t(\"Categorias\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/customers\"\n                  >\n                    <i className=\"uil-users-alt me-2\"></i>\n                    {\" \"}{props.t(\"Clientes\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/orders\"\n                  >\n                    <i className=\"uil-shopping-cart-alt me-2\"></i>\n                    {\" \"}{props.t(\"Pedidos\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item dropdown\">\n                  <Link\n                      className=\"nav-link dropdown-toggle arrow-none\"\n                      to=\"#\"\n                      onClick={e => {\n                        e.preventDefault()\n                        setextra(!extra)\n                      }}\n                  >\n                    <i className=\"uil-cog me-2\"></i>\n                    {props.t(\"Servicios\")} <div className=\"arrow-down\"></div>\n                  </Link>\n                  <div className={classname(\"dropdown-menu\", { show: extra })}>\n                    <li className=\"nav-item\">\n                      <Link to=\"/offices\" className=\"dropdown-item\">\n                        <i className=\"uil-truck me-2\"></i>\n                        {props.t(\"Despachos\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/bills\" className=\"dropdown-item\">\n                        <i className=\"uil-bill me-2\"></i>\n                        {props.t(\"Facturación\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/postSales\" className=\"dropdown-item\">\n                        <i className=\"uil-shopping-cart-alt me-2\"></i>\n                        {props.t(\"Post Venta\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/payments\" className=\"dropdown-item\">\n                        <i className=\"uil-money-bill me-2\"></i>\n                        {props.t(\"Pagos\")}\n                      </Link>\n                    </li>\n                  </div>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/reports\"\n                  >\n                    <i className=\"uil-graph-bar me-2\"></i>\n                    {\" \"}{props.t(\"Reportes\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item dropdown\">\n                  <Link\n                      className=\"nav-link dropdown-toggle arrow-none\"\n                      to=\"#\"\n                      onClick={e => {\n                        e.preventDefault()\n                        setextra(!extra)\n                      }}\n                  >\n                    <i className=\"uil-cog me-2\"></i>\n                    {props.t(\"Sistema\")} <div className=\"arrow-down\"></div>\n                  </Link>\n                  <div className={classname(\"dropdown-menu\", { show: extra })}>\n\n                    <div className=\"dropdown\">\n                      <Link\n                          to=\"/#\"\n                          className=\"dropdown-item dropdown-toggle arrow-none\"\n                          onClick={e => {\n                            e.preventDefault()\n                            setauth(!auth)\n                          }}\n                      >\n                        {props.t(\"Autenticación\")}{\" \"}\n                        <div className=\"arrow-down\"></div>\n                      </Link>\n                      <div\n                          className={classname(\"dropdown-menu\", { show: auth })}\n                      >\n                        <Link to=\"/users\" className=\"dropdown-item\">\n                          {props.t(\"Usuarios\")}\n                        </Link>\n                        <Link to=\"#\" className=\"dropdown-item\">\n                          {props.t(\"Roles\")}\n                        </Link>\n                      </div>\n                    </div>\n\n                    <div className=\"dropdown\">\n                      <Link\n                          className=\"dropdown-item dropdown-toggle arrow-none\"\n                          to=\"#\"\n                          onClick={e => {\n                            e.preventDefault()\n                            setutility(!utility)\n                          }}\n                      >\n                        {props.t(\"Localidades\")} <div className=\"arrow-down\"></div>\n                      </Link>\n                      <div\n                          className={classname(\"dropdown-menu\", {\n                            show: utility,\n                          })}\n                      >\n                        {/*<Link to=\"#\" className=\"dropdown-item\">\n                          {props.t(\"Localidades de entrega\")}\n                        </Link>*/}\n                        <Link to=\"/states\" className=\"dropdown-item\">\n                          {props.t(\"Estados\")}\n                        </Link>\n                        <Link to=\"/municipalities\" className=\"dropdown-item\">\n                          {props.t(\"Municipios\")}\n                        </Link>\n                      </div>\n                    </div>\n\n                    {/*<div className=\"dropdown\">\n                      <Link\n                          className=\"dropdown-item dropdown-toggle arrow-none\"\n                          to=\"#\"\n                          onClick={e => {\n                            e.preventDefault()\n                            setutility(!utility)\n                          }}\n                      >\n                        {props.t(\"Productos\")} <div className=\"arrow-down\"></div>\n                      </Link>\n                      <div\n                          className={classname(\"dropdown-menu\", {\n                            show: utility,\n                          })}\n                      >\n                        <Link to=\"/categories\" className=\"dropdown-item\">\n                          {props.t(\"Categorias\")}\n                        </Link>\n                        <Link to=\"#\" className=\"dropdown-item\">\n                          {props.t(\"Proveedores\")}\n                        </Link>\n                      </div>\n                    </div>*/}\n                    <li className=\"nav-item\">\n                      <Link to=\"/templates\" className=\"dropdown-item\">\n                          {props.t(\"Plantillas\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/billConfigs\" className=\"dropdown-item\">\n                        {props.t(\"Conf. Resoluciones\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/configs\" className=\"dropdown-item\">\n                          {props.t(\"Configuraciones\")}\n                      </Link>\n                    </li>\n                  </div>\n                </li>\n                </ul>\n            </Collapse>\n          </nav>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nNavbar.propTypes = {\n  leftMenu: PropTypes.any,\n  location: PropTypes.any,\n  menuOpen: PropTypes.any,\n  t: PropTypes.any,\n}\n\nconst mapStatetoProps = state => {\n  const { leftMenu } = state.Layout\n  return { leftMenu }\n}\n\nexport default withRouter(\n  connect(mapStatetoProps, {})(withTranslation()(Navbar))\n)\n","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Footer.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Header.js",["1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216"],"import PropTypes from 'prop-types'\nimport React, { useState } from \"react\"\n\nimport { connect } from \"react-redux\"\nimport { Form, Input, Button, Row, Col } from \"reactstrap\"\n\nimport { Link } from \"react-router-dom\"\n\n// Reactstrap\nimport { Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\"\n\n// Import menuDropdown\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\"\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\"\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\"\n\nimport logoSm from \"../../assets/images/logo-sm.png\"\nimport logoDark from \"../../assets/images/logo-dark.png\"\nimport logoLight from \"../../assets/images/logo-light.png\"\n\n// import images\nimport github from \"../../assets/images/brands/github.png\"\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\"\nimport dribbble from \"../../assets/images/brands/dribbble.png\"\nimport dropbox from \"../../assets/images/brands/dropbox.png\"\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\"\nimport slack from \"../../assets/images/brands/slack.png\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\n\n// Redux Store\nimport {\n  showRightSidebarAction,\n  toggleLeftmenu,\n  changeSidebarType,\n} from \"../../store/actions\"\nimport UsersSalesDropdown from \"../CommonForBoth/TopbarDropdown/UsersSalesDropdown\";\n\nconst Header = props => {\n  const [search, setsearch] = useState(false)\n  const [socialDrp, setsocialDrp] = useState(false)\n\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)\n\n  function toggleFullscreen() {\n    if (\n      !document.fullscreenElement &&\n      /* alternative standard method */ !document.mozFullScreenElement &&\n      !document.webkitFullscreenElement\n    ) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen()\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen()\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen(\n          Element.ALLOW_KEYBOARD_INPUT\n        )\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen()\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen()\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen()\n      }\n    }\n  }\n\n  function tToggle() {\n    props.toggleLeftmenu(!props.leftMenu)\n    if (props.leftSideBarType === \"default\") {\n      props.changeSidebarType(\"condensed\", isMobile)\n    } else if (props.leftSideBarType === \"condensed\") {\n      props.changeSidebarType(\"default\", isMobile)\n    }\n  }\n  return (\n    <React.Fragment>\n      <header id=\"page-topbar\">\n        <div className=\"navbar-header\">\n          <div className=\"d-flex\">\n            <div className=\"navbar-brand-box\">\n              <Link to=\"/\" className=\"logo logo-dark\">\n                <span className=\"logo-sm\">\n                  <img src={logoSm} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoDark} alt=\"\" height=\"20\" />\n                </span>\n              </Link>\n\n              <Link to=\"/\" className=\"logo logo-light\">\n                <span className=\"logo-sm\">\n                  <img src={logoSm} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoLight} alt=\"\" height=\"20\" />\n                </span>\n              </Link>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                tToggle()\n              }}\n              className=\"btn btn-sm px-3 font-size-16 header-item waves-effect vertical-menu-btn\"\n              id=\"vertical-menu-btn\"\n            >\n              <i className=\"fa fa-fw fa-bars\" />\n            </button>\n\n            <Form className=\"app-search d-none d-lg-block\">\n              <div className=\"position-relative\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={props.t(\"Search\") + \"...\"}\n                />\n                <span className=\"uil-search\"></span>\n              </div>\n            </Form>\n          </div>\n\n          <div className=\"d-flex\">\n\n            <Dropdown\n              className=\"d-inline-block d-lg-none ms-2\"\n              onClick={() => {\n                setsearch(!search)\n              }}\n              type=\"button\"\n            >\n              <DropdownToggle\n                className=\"btn header-item noti-icon waves-effect\"\n                id=\"page-header-search-dropdown\"\n                tag=\"button\"\n              > <i className=\"uil-search\" />\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\n                <Form className=\"p-3\">\n                  <div className=\"form-group m-0\">\n                    <div className=\"input-group\">\n                      <Input type=\"text\" className=\"form-control\" placeholder=\"Search ...\" aria-label=\"Recipient's username\" />\n                      <div className=\"input-group-append\">\n                        <Button className=\"btn btn-primary\" type=\"submit\"><i className=\"mdi mdi-magnify\"></i></Button>\n                      </div>\n                    </div>\n                  </div>\n                </Form>\n              </DropdownMenu>\n            </Dropdown>\n\n{/*            <LanguageDropdown />*/}\n\n{/*            <Dropdown\n              className=\"d-none d-lg-inline-block ms-1\"\n              isOpen={socialDrp}\n              toggle={() => {\n                setsocialDrp(!socialDrp)\n              }}\n            >\n              <DropdownToggle\n                className=\"btn header-item noti-icon waves-effect\"\n                tag=\"button\"\n              >\n                <i className=\"uil-apps\"></i>\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\" right>\n                <div className=\"px-lg-2\">\n                  <Row className=\"g-0\">\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={github} alt=\"Github\" />\n                        <span>GitHub</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={bitbucket} alt=\"bitbucket\" />\n                        <span>Bitbucket</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={dribbble} alt=\"dribbble\" />\n                        <span>Dribbble</span>\n                      </Link>\n                    </Col>\n                  </Row>\n\n                  <Row className=\"g-0\">\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={dropbox} alt=\"dropbox\" />\n                        <span>Dropbox</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\n                        <span>Mail Chimp</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={slack} alt=\"slack\" />\n                        <span>Slack</span>\n                      </Link>\n                    </Col>\n                  </Row>\n                </div>\n              </DropdownMenu>\n            </Dropdown>*/}\n\n            <Dropdown className=\"d-none d-lg-inline-block ms-1\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  toggleFullscreen()\n                }}\n                className=\"btn header-item noti-icon waves-effect\"\n                data-toggle=\"fullscreen\"\n              >\n                <i className=\"uil-minus-path\"></i>\n              </button>\n            </Dropdown>\n\n            <UsersSalesDropdown />\n            <NotificationDropdown />\n            <ProfileMenu />\n            <div onClick={() => props.showRightSidebarAction(!props.showRightSidebar)}\n              className=\"dropdown d-inline-block\">\n              <button type=\"button\" className=\"btn header-item noti-icon right-bar-toggle waves-effect\">\n                <i className=\"uil-cog\"> </i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n    </React.Fragment>\n  )\n}\n\nHeader.propTypes = {\n  changeSidebarType: PropTypes.func,\n  leftMenu: PropTypes.any,\n  leftSideBarType: PropTypes.any,\n  showRightSidebar: PropTypes.any,\n  showRightSidebarAction: PropTypes.func,\n  t: PropTypes.any,\n  toggleLeftmenu: PropTypes.func\n}\n\nconst mapStatetoProps = state => {\n  const {\n    layoutType,\n    showRightSidebar,\n    leftMenu,\n    leftSideBarType,\n  } = state.Layout\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType }\n}\n\nexport default connect(mapStatetoProps, {\n  showRightSidebarAction,\n  toggleLeftmenu,\n  changeSidebarType,\n})(withTranslation()(Header))\n","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Sidebar.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Footer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/index.js",["1217"],"import React from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Breadcrumbs} from \"@material-ui/core\";\nimport MiniWidget from \"./mini-widget\";\nimport TopVendors from \"./top-vendors\";\nimport LatestTransaction from \"./latest-transaction\";\nimport TopUsers from \"./top-users\";\n\nconst series1 = [{\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54]\n}]\n\nconst options1 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: !1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst series2 = [70]\n\nconst options2 = {\n    fill: {\n        colors: ['#34c38f']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst series3 = [55]\n\nconst options3 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\n/* TODO -- hacer graficos clientes pegado a servicios */\n/* debo obtener la información de clientes registrados, ayer hoy y antier */\n/* comparar hoy, ayer y antier clientes registrados */\nconst series4 = [{\n    data: [25, 66, 200]\n}]\n\nconst options4 = {\n\n    fill: {\n        colors: ['#f1b44c']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [\"Antier\", \"Ayer\", \"Hoy\"],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: 1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst Dashboard = () => {\n    const reports = [\n        {\n            id: 1,\n            icon: \"mdi mdi-clock-five-time\",\n            title: \"Productos\",\n            value: 34152,\n            prefix: \"\",\n            suffix: \"\",\n            decimal: 0,\n            charttype: \"bar\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: \"34142\",\n            color: \"success\",\n            desc: \"disponibles\",\n            badgeValue2: \"10\",\n            color2: \"danger\",\n            desc2: \"reservado\",\n            series: series1,\n            options: options1,\n\n        },\n        {\n            id: 2,\n            icon: \"mdi mdi-arrow-up-bold\",\n            title: \"Ventas diarias\",\n            value: 5643,\n            decimal: 0,\n            charttype: \"radialBar\",\n            chartheight: 45,\n            chartwidth: 45,\n            prefix: \"$\",\n            suffix: \"\",\n            badgeValue: \"0.82%\",\n            color: \"success\",\n            desc: \"desde ayer\",\n            series: series2,\n            options: options2,\n        },\n        {\n            id: 3,\n            icon: \"mdi mdi-arrow-down-bold\",\n            title: \"Ventas semanales\",\n            value: 45254,\n            decimal: 0,\n            prefix: \"$\",\n            suffix: \"\",\n            charttype: \"radialBar\",\n            chartheight: 45,\n            chartwidth: 45,\n            badgeValue: \"6.24%\",\n            color: \"danger\",\n            desc: \"desde hace una semana\",\n            series: series3,\n            options: options3,\n        },\n        {\n            id: 4,\n            icon: \"uil-users-alt\",\n            title: \"Clientes\",\n            value: 19800,\n            decimal: 0,\n            charttype: \"line\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: \"200\",\n            color: \"success\",\n            desc: \"registrados hoy\",\n            series: series4,\n            options: options4,\n        },\n    ];\n  return (\n    <React.Fragment>\n      <div className=\"page-content\">\n        <Container fluid>\n            <Breadcrumbs title=\"Lucy Moie\" item=\"Dashboard\" />\n            <Row>\n                <MiniWidget reports={reports} />\n            </Row>\n            <Row>\n                <Col xl={4}>\n                <TopUsers/>\n                </Col>\n                <Col xl={8}>\n                    <LatestTransaction />\n                </Col>\n            </Row>\n        </Container>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default Dashboard\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductDetail.js",["1218"],"import React, {useEffect, useState} from \"react\";\nimport {Col, Container, Row} from \"reactstrap\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct} from \"../../store/product/actions\";\nimport {Card} from \"@material-ui/core\";\nimport {STATUS} from \"../../common/constants\";\nimport Images from \"../../components/Common/Image\";\nimport {getImageByQuality, priceFormat} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {map} from \"lodash\";\nimport ProductsPendingList from \"./ProductsPending\";\n\nconst ProductDetail = (props) => {\n\n    const {getProduct, product} = props;\n    const [productData, setProductData] = useState({_status: STATUS.ACTIVE});\n    const [imgSelected, setImgSelected] = useState(0);\n\n    useEffect(() => {\n        getProduct(props.match.params.id);\n    }, [getProduct]);\n\n    useEffect(() => {\n        if (product.id) {\n            const productImage = product.productImage.length > 0 ? product.productImage : [{}];\n            setProductData({...product, _status: product.status, productImage: productImage});\n        }\n    }, [product]);\n\n    return productData.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/products\" title={productData.reference} item={\"Producto\"}/>\n\n                    <Card id={'details'} className=\"mb-3\">\n                        <Row>\n                            <Col md={4} className=\"p-3 text-center\">\n                                <div className=\"row p-2\">\n                                    <div className=\"col-3 image-left-panel\">\n                                        <div className={`nav flex-column nav-pills`} id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                                            {map(productData.productImage, (img, key) => (\n                                                <div key={key}\n                                                     className={`cursor-pointer nav-link ${imgSelected === key ? 'custom-active' : ''}`}\n                                                     onClick={() => (setImgSelected(key))}>\n                                                    <Images src={`${getImageByQuality(img, 'small')}`}\n                                                            alt={img.filename}\n                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col-9\">\n                                        <div className=\"tab-content position-relative\" id=\"v-pills-tabContent\">\n                                            {map(productData.productImage, (img, key) => (\n                                                <div key={key} className={`tab-pane fade ${imgSelected === key ? 'show active bg-white border-1' : ''}`} id={`product-${key}`} role=\"tabpanel\">\n                                                    <div className=\"product-img panel-bordered\">\n                                                        <Images src={`${getImageByQuality(img, 'high')}`}\n                                                                alt={img.filename}\n                                                                height={370}\n                                                                className=\"img-fluid mx-auto d-block\"\n                                                                data-zoom={`${img.path}`}/>\n                                                    </div>\n                                                    <div className=\"text-left panel-bordered p-2\">\n                                                        <div className=\"text.muted\"><b>Grupo:</b> {img.group}</div>\n                                                        <div className=\"text.muted\">{img.filename}</div>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col md={8} className=\"p-3\">\n                                <Row>\n                                    <Col md={12}>\n                                        <h3>Código: <b className=\"text-info\">{productData.reference}</b></h3>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title\">Descripción del producto</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <li className=\"list-inline-item\">\n                                            <Link to={`/product/${productData.id}`} className=\"px-2 text-primary\">\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </Link>\n                                        </li>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <ul style={{listStyle: 'none'}}>\n                                            <li><b>Nombre:</b> <small>{productData.name}</small></li>\n                                            <li><b>Descripción:</b> {productData.description}</li>\n                                            <li><b>Costo:</b> {priceFormat(productData.cost, \"\", true)}</li>\n                                            <li><b>Precio:</b> {priceFormat(productData.price, \"\", true)}</li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <h4 className=\"card-title\">Especificaciones</h4>\n                                    </Col>\n                                    <Col md={12}>\n                                        <ul style={{listStyle: 'none'}}>\n                                            <li><b>Tipo:</b> {productData.size?.name}</li>\n                                            <li><b>Categoria:</b> {productData.category?.name}</li>\n                                            <li><b>Material:</b> {productData.material}</li>\n                                            <li><b>Peso (g):</b> {productData.weight}</li>\n                                            <li><b>Proveedor:</b> {productData.provider}</li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n                    <ProductsPendingList product={productData}/>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, product, loading} = state.Product\n    return {error, product, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {getProduct})(ProductDetail)\n)\n\nProductDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Login.js",["1219","1220","1221","1222"],"import PropTypes from 'prop-types'\nimport React, {useEffect} from \"react\"\n\nimport {Alert, Card, CardBody, Col, Container, Row, Spinner} from \"reactstrap\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {Link, withRouter} from \"react-router-dom\"\n\n// availity-reactstrap-validation\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\n\n//Social Media Imports\n// import TwitterLogin from \"react-twitter-auth\"\n\n// actions\nimport {apiError, loginUser, socialLogin} from \"../../store/actions\"\n\n// import images\nimport logo from \"../../assets/images/logo-dark.png\"\nimport logolight from \"../../assets/images/logo-light.png\"\n\n//Import config\nimport {facebook, google} from \"../../config\"\n\nconst Login = (props) => {\n   // handleValidSubmit\n   const handleValidSubmit = (event, values) => {\n    props.loginUser(values, props.history)\n  }\n\n  const signIn = (res, type) => {\n    const { socialLogin } = props\n    if (type === \"google\" && res) {\n      const postData = {\n        name: res.profileObj.name,\n        email: res.profileObj.email,\n        token: res.tokenObj.access_token,\n        idToken: res.tokenId,\n      }\n      socialLogin(postData, props.history, type)\n    } else if (type === \"facebook\" && res) {\n      const postData = {\n        name: res.name,\n        email: res.email,\n        token: res.accessToken,\n        idToken: res.tokenId,\n      }\n      socialLogin(postData, props.history, type)\n    }\n  }\n\n  //handleGoogleLoginResponse\n  const googleResponse = response => {\n    signIn(response, \"google\")\n  }\n\n  //handleTwitterLoginResponse\n  // const twitterResponse = e => {}\n\n  //handleFacebookLoginResponse\n  const facebookResponse = response => {\n    signIn(response, \"facebook\")\n  }\n  const removeAttr = attr => {\n    if(document.body.hasAttribute(attr)){\n      document.body.removeAttribute(attr)\n    }\n  }\n\n  useEffect(() => {\n    document.body.className = \"authentication-bg\";\n    removeAttr('data-layout');\n    removeAttr('data-layout-size');\n\n    // remove classname when component will unmount\n    return function cleanup() {\n      document.body.className = \"\";\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"home-btn d-none d-sm-block\">\n        <Link to=\"/\" className=\"text-dark\">\n          <i className=\"mdi mdi-home-variant h2\"></i>\n        </Link>\n      </div>\n      <div className=\"account-pages my-5 pt-sm-5\">\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <div className=\"text-center\">\n                <Link to=\"/\" className=\"mb-5 d-block auth-logo\">\n                  <img src={logo} alt=\"\" height=\"80\" className=\"logo logo-dark\" />\n                  <img src={logolight} alt=\"\" height=\"80\" className=\"logo logo-light\" />\n                </Link>\n              </div>\n            </Col>\n          </Row>\n          <Row className=\"align-items-center justify-content-center\">\n            <Col md={8} lg={6} xl={5}>\n              <Card>\n\n                <CardBody className=\"p-4\">\n                  <div className=\"text-center mt-2\">\n                    <h5 className=\"text-primary\">Bienvenido!</h5>\n                    <p className=\"text-muted\">Inicia sesión con Lucy Moie.</p>\n                  </div>\n                  <div className=\"p-2 mt-4\">\n                    <AvForm\n                      className=\"form-horizontal\"\n                      onValidSubmit={(e, v) => {\n                        handleValidSubmit(e, v)\n                      }}\n                    >\n                      {props.error && typeof props.error === \"string\" ? (\n                        <Alert color=\"danger\">{props.error}</Alert>\n                      ) : null}\n\n                      <div className=\"mb-3\">\n                        <AvField\n                          name=\"username\"\n                          label=\"Nombre de Usuario\"\n                          value=\"\"\n                          className=\"form-control\"\n                          placeholder=\"Login\"\n                          type=\"text\"\n                          required\n                        />\n                      </div>\n\n                      <div className=\"mb-3\">\n                      <div className=\"float-end\">\n                          <Link to=\"/forgot-password\" className=\"text-muted\">Olvidaste contraseña?</Link>\n                        </div>\n                        <AvField\n                          name=\"password\"\n                          label=\"Contraseña\"\n                          value=\"\"\n                          type=\"password\"\n                          required\n                          placeholder=\"*********\"\n                        />\n                      </div>\n\n                      <div className=\"form-check\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"form-check-input\"\n                          id=\"customControlInline\"\n                        />\n                        <label\n                          className=\"form-check-label\"\n                          htmlFor=\"customControlInline\"\n                        >\n                          Recuerdame\n                        </label>\n                      </div>\n\n                      <div className=\"mt-3\">\n                        <button\n                          className=\"btn btn-primary w-100 waves-effect waves-light\"\n                          type=\"submit\"\n                        >\n                          {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"white\"/>}\n                          Log In\n                        </button>\n                      </div>\n\n                    </AvForm>\n\n                  </div>\n                </CardBody>\n              </Card>\n              <div className=\"mt-5 text-center\">\n                <p>© {new Date().getFullYear()} Lucy Modas <i\n                  className=\"mdi mdi-heart text-danger\"></i> Moie V2.0.1\n                        </p>\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = state => {\n  const { error, loading } = state.Login\n  return { error, loading }\n}\n\nexport default withRouter(\n  connect(mapStateToProps, { loginUser, apiError, socialLogin })(Login)\n)\n\nLogin.propTypes = {\n  error: PropTypes.any,\n  history: PropTypes.object,\n  loginUser: PropTypes.func,\n  socialLogin: PropTypes.func\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Logout.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/index.js",["1223"],"import React from \"react\"\nimport { Container } from \"reactstrap\"\nimport CustomersList from \"./CustomerList/customers-list\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {CustomerFilter} from \"./CustomerFilter\";\nconst Customer = () => {\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb path=\"/customers\" title={null} item=\"Clientes\" />\n                    <CustomersList />\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Customer\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderDetail.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/ForgetPassword.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSaleEdit/PostSaleDetail.js",["1224"],"import React, {useEffect} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {COMMENT_ENTITIES, GROUPS, ORDER_STATUS} from \"../../common/constants\";\nimport Observations from \"../../components/Common/Observations\";\nimport {getOrder, updateOrder} from \"../../store/order/actions\";\n\nconst PostSaleDetail = (props) => {\n\n    const {onGetOrder, refresh, order} = props;\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetOrder(props.match.params.id);\n        }\n    }, [onGetOrder, refresh]);\n\n    const updateDeliveryStatus = () => {\n        props.onUpdateOrder(order.id, {enablePostSale: !order.enablePostSale})\n    }\n\n    return order.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/postSales\" title={order.name} item={`Post Venta #${order.id}`}/>\n\n                    <Row className=\"mb-2\">\n                        <Col md={12}>\n                            <div className={\"mb-3 float-md-start\"}>\n                                <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {order?.user?.name}</small>\n                            </div>\n                            <div className={\"mb-3 float-md-end\"}>\n                                <div className=\"button-items\">\n\n                                    <Tooltip placement=\"bottom\" title={order.enablePostSale ? 'Desactivar' : 'Activar'} aria-label=\"add\">\n                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => updateDeliveryStatus(order)}>\n                                            <i className={`mdi mdi-${order.enablePostSale ? 'delete text-danger' : 'check text-success'}`}> </i>\n                                        </button>\n                                    </Tooltip>\n                                    <Tooltip placement=\"bottom\" title=\"Refrescar\" aria-label=\"add\">\n                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => onGetOrder(order.id)}>\n                                            <i className={\"mdi mdi-refresh\"}> </i>\n                                        </button>\n                                    </Tooltip>\n\n                                </div>\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Card id={'details'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Información básica</h4>\n                                <hr/>\n                            </Col>\n                            <Col md={12}>\n                                <Row>\n                                    <Col md={6}>\n                                        <label># Pedido: </label>\n                                        <span className=\"p-1\">{order.id}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Destino: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryLocality.name}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Cliente: </label>\n                                        <span className=\"p-1\">{order.customer.name}</span>\n                                        {order.customer.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Estado del pedido: &nbsp;</label>\n                                        <StatusField color={ORDER_STATUS[order.status].color}>\n                                            {ORDER_STATUS[order.status].name}\n                                        </StatusField>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Monto del pedido: </label>\n                                        <span className=\"p-1\">{priceFormat(order.totalAmount)}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Metodo de envio: </label>\n                                        <span className=\"p-1\">{order.deliveryMethod.name}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Guia: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.tracking}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha de envío: </label>\n                                        <span className=\"p-1\">{formatDate(order.orderDelivery.deliveryDate || order.createdAt)}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Activo: </label>\n                                        <span className=\"p-1\">{order.enablePostSale ? 'SI': 'NO'}</span>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <Card id={'tracking'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Rastreo del paquete</h4>\n                                <hr/>\n                            </Col>\n                            <Col md={12}>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Estatus del envío: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryStatus || ''}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha del estatus del envío: </label>\n                                        <span className=\"p-1\">{formatDate(order.orderDelivery.deliveryDate || order.createdAt)}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Ubicación estatus del envío: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryState}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha del estatus del envío: </label>\n                                        <span className=\"p-1\">{formatDate(order.orderDelivery.deliveryDate || order.createdAt)}</span>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <Observations\n                        entitySuggested={GROUPS.ORDER_OBSERVATIONS}\n                        entity={COMMENT_ENTITIES.ORDER}\n                        entityId={order.id}/>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, order, refresh, loading} = state.Order;\n    return {error, order, refresh, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onUpdateOrder: (id, payload) => dispatch(updateOrder(id, payload)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PostSaleDetail)\n)\n\nPostSaleDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/user-profile.js",["1225"],"import PropTypes from 'prop-types'\nimport React, {useEffect, useState} from \"react\"\nimport {Container,} from \"reactstrap\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router-dom\"\n\n//Import Breadcrumb\nimport Breadcrumb from \"../../components/Common/Breadcrumb\"\n// actions\nimport {changeProfilePicture, resetChangeProfilePicture} from \"../../store/actions\"\nimport {getImagePath} from \"../../common/utils\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport Images from \"../../components/Common/Image\";\nimport {Tooltip} from \"@material-ui/core\";\n\nconst UserProfile = props => {\n    const {user, onChangeProfilePicture, loading, success} = props;\n\n    const [photo, setPhoto] = useState(getImagePath(user?.photo));\n    const [changePhoto, setChangePhoto] = useState(false);\n\n    useEffect(() => {\n        if (success) {\n            setChangePhoto(false);\n        }\n    }, [success])\n\n    const changeProfilePicture = () => {\n        console.log('changeProfilePicture', photo)\n        onChangeProfilePicture({photo: photo}, props.history)\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb title=\"Mi perfil\" item={`${user.name} ${user.lastname}`}/>\n\n                    <div className=\"row mb-4\">\n                        <div className=\"col-md-offset-4 col-md-4\">\n                            <div className=\"card h-100\">\n                                <div className=\"card-body\">\n                                    <div className=\"text-center\">\n                                        <div>\n                                            <div>\n                                                <Images className=\"avatar-lg rounded-circle img-thumbnail\"\n                                                        alt={'profile image'}\n                                                        src={photo}\n                                                />\n                                            </div>\n                                            <div className=\"p-2\">\n                                                <div className=\" btn btn-primary btn-sm\">\n                                                    <DropZoneIcon\n                                                        maxFiles={1}\n                                                        mode=\"icon\"\n                                                        iconClass=\"fa fa-pencil-alt\"\n                                                        tooltip=\"Cambiar imagen\"\n                                                        onDrop={(file) => {\n                                                            setPhoto(file.base64);\n                                                            setChangePhoto(true);\n                                                        }}\n                                                    />\n                                                </div>\n\n                                                {changePhoto && (\n                                                    <Tooltip placement=\"bottom\" title=\"Guardar\" aria-label=\"add\">\n                                                        <button type={\"button\"} className=\"btn btn-primary btn-sm\" style={{marginLeft: '5px'}} onClick={() => {\n                                                            changeProfilePicture()\n                                                        }}>\n                                                            <i className=\"fa fa-save\"></i>\n                                                        </button>\n                                                    </Tooltip>\n                                                )}\n                                            </div>\n\n                                        </div>\n                                        <h5 className=\"mt-3 mb-1\">{`${user.name} ${user.lastname}`}</h5>\n                                        <p className=\"text-muted\">{user.email}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/*<div className=\"col-xl-8\">\n                            <div className=\"card mb-0\">\n                                <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link active\" data-bs-toggle=\"tab\" role=\"tab\">\n                                            <i className=\"uil-shopping-cart-alt me-2 font-size-20\"> </i>\n                                            <span className=\"d-none d-sm-block\">Mis Pedidos</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link\" data-bs-toggle=\"tab\" href=\"#tasks\" role=\"tab\">\n                                            <i className=\"uil uil-clipboard-notes font-size-20\"></i>\n                                            <span className=\"d-none d-sm-block\">Tasks</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link\" data-bs-toggle=\"tab\" href=\"#messages\" role=\"tab\">\n                                            <i className=\"uil uil-envelope-alt font-size-20\"></i>\n                                            <span className=\"d-none d-sm-block\">Messages</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                                <div className=\"tab-content p-4\">\n                                    <div className=\"tab-pane active\" id=\"orders\" role=\"tabpanel\">\n                                        Lista de pedidos\n                                    </div>\n                                    <div className=\"tab-pane\" id=\"tasks\" role=\"tabpanel\">\n                                        <div>\n                                            task\n                                        </div>\n                                    </div>\n                                    <div className=\"tab-pane\" id=\"messages\" role=\"tabpanel\">\n                                        messages\n                                    </div>\n                                </div>\n                            </div>\n                        </div>*/}\n                    </div>\n\n                </Container>\n            </div>\n\n\n        </React.Fragment>\n    )\n}\n\nUserProfile.propTypes = {\n    editProfile: PropTypes.func,\n    error: PropTypes.any,\n    success: PropTypes.any\n}\n\nconst mapStateToProps = state => {\n\n    const {profileImage} = state.Profile\n    const {user} = state.Login\n    return {user, profileResponse: profileImage.data, error: profileImage.error, success: profileImage.success, loading: profileImage.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeProfilePicture: (data) => dispatch(changeProfilePicture(data)),\n    onResetChangeProfilePicture: () => dispatch(resetChangeProfilePicture()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(UserProfile)\n)\n","/Users/ramon/Repositories/lucy-moie/src/pages/commons/404.js",["1226"],"import React from \"react\"\nimport {Container} from \"reactstrap\"\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\n\nconst PageNotFount = () => {\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <h1>404</h1>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\nexport default PageNotFount;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Register.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerDetail.js",["1227","1228","1229"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {getCustomer} from \"../../store/customer/actions\";\nimport OrderCardList from \"../Orders/OrderCardList\";\nimport {STATUS_COLORS, StatusField} from \"../../components/StatusField\";\nimport {ConverterCustomerStatus} from \"../Customer/customer_status\";\nimport {customerCategoryStats, customerProductStats, hasCustomerOpenOrders} from \"../../helpers/service\";\nimport {COMMENT_ENTITIES, GROUPS} from \"../../common/constants\";\nimport Observations from \"../../components/Common/Observations\";\nimport OrdersPieChart from \"./OrdersPieChart\";\nimport CategoriesPieChart from \"./CategoriesPieChart\";\n\nconst CustomerDetail = (props) => {\n\n    const {onGetCustomer, customer} = props;\n    const [customerData, setCustomerData] = useState({});\n    const [hasPendingOrders, setHasPendingOrders] = useState(false);\n    const [activeTab, setActiveTab] = useState(1);\n    const [productChart, setProductChart] = useState({series: [], labels:[]});\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetCustomer(props.match.params.id);\n            hasCustomerOpenOrders(props.match.params.id).then(resp => setHasPendingOrders(resp && resp.data && resp.data.length > 0));\n            getStats(props.match.params.id);\n        }\n    }, [onGetCustomer]);\n\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n        }\n    }, [customer]);\n\n    const getStats = (customerId) => {\n        /*customerProductStats(customerId, moment()).then(resp => {\n            const chartData = {series: [], labels:[]};\n            console.log('customerProductStats', resp)\n            if(resp){\n                resp.forEach(pc => {\n                    chartData.series.push(pc.qty);\n                    chartData.labels.push(pc.name);\n                })\n            }\n            setProductChart(chartData);\n        });*/\n    }\n\n    return customerData.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/customers\" title={customerData.name} item={\"Cliente\"}/>\n                    <Row className=\"mb-3\">\n                        <Col md={7}>\n                            <Card id={'details'} className=\"mb-3 p-3\">\n\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\">Descripción del cliente</h4>\n                                    </Col>\n                                    <Col md={2} className=\"text-right\">\n                                        <li className=\"list-inline-item\">\n                                            <Link to={`/customer/${customerData.id}`} className=\"px-2 text-primary\">\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </Link>\n                                        </li>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Nombre: </label>\n                                        <span className=\"p-1\">{customerData.name}</span>\n                                        {customerData.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Documento: </label>\n                                        <span className=\"p-1\">{customerData.document}</span>\n                                    </Col>\n\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12}>\n                                        <h4 className=\"card-title text-info\">Datos de contacto</h4>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Email: </label>\n                                        <span className=\"p-1\">{customerData.email}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Teléfono Celular: </label>\n                                        <span className=\"p-1\">{customerData.cellphone}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Teléfono Residencial: </label>\n                                        <span className=\"p-1\">{customerData.phone}</span>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12}>\n                                        <h4 className=\"card-title text-info\">Localidad</h4>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Departamento: </label>\n                                        <span className=\"p-1\">{customerData.state?.name}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Municipio: </label>\n                                        <span className=\"p-1\">{customerData.municipality?.name}</span>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12} className=\"footer-details\">\n                                        {customerData.hasNotification && (\n                                            <Tooltip placement=\"bottom\" title=\"Recibe notificaciones\" aria-label=\"add\">\n                                                <span className=\"badge rounded-pill bg-info font-size-12 p-2\"><i className=\"fa fa-envelope\"> </i></span>\n                                            </Tooltip>\n                                        )}\n                                        <Tooltip placement=\"bottom\" title=\"Estado\" aria-label=\"add\">\n                                            <StatusField color={customerData.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                                                {ConverterCustomerStatus(customerData.status)}\n                                            </StatusField>\n                                        </Tooltip>\n                                        <Tooltip placement=\"bottom\" title=\"Fecha creación\" aria-label=\"add\">\n                                            <small className=\"badge rounded-pill bg-light p-2\">{formatDate(customerData.createdAt)}</small>\n                                        </Tooltip>\n                                    </Col>\n                                </Row>\n                                {hasPendingOrders && (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert alert-warning mb-0 mt-3\"><i className=\"uil uil-exclamation-triangle\"> </i> Este cliente tiene pedidos por completar.</div>\n                                        </Col>\n                                    </Row>\n                                )}\n                            </Card>\n                        </Col>\n                        <Col md={5}>\n                            <Card id={'orders'} className=\"p-3\">\n                                <OrderCardList customerId={customerData.id}/>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Card id={'order-tabs'} className=\"p-3\">\n                                <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                    <li className=\"nav-item\">\n                                        <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                            <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                            <span className=\"d-none d-sm-block\">Historial de compras</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className={`nav-link ${activeTab === 3 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(3)}>\n                                            <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                            <span className=\"d-none d-sm-block\">Observaciones</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                                <div className=\"tab-content p-3 text-muted\">\n                                    <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab1\" role=\"tabpanel\">\n                                        <Row>\n                                            <Col md={6} className=\"mb-3\">\n                                                <OrdersPieChart customerId={customerData.id}/>\n                                            </Col>\n                                            {/*<Col md={6} className=\"mb-3\">\n                                                <h4 className=\"card-title text-info\">Productos</h4>\n                                                <div style={{background: '#f6f6f6'}}>\n                                                    <PieChart data={productChart}/>\n                                                </div>\n                                            </Col>*/}\n                                            <Col md={6} className=\"mb-3\">\n                                                <CategoriesPieChart customerId={customerData.id}/>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                        <Observations\n                                            entitySuggested={GROUPS.CUSTOMER_OBSERVATIONS}\n                                            entity={COMMENT_ENTITIES.CUSTOMER}\n                                            entityId={customerData.id}/>\n                                    </div>\n                                </div>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, customer, loading} = state.Customer\n    const {fieldOptions} = state.FieldOption\n    return {error, customer, fieldOptions, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hasCustomerOpenOrders,\n    customerProductStats,\n    customerCategoryStats,\n    onGetCustomer: (id) => dispatch(getCustomer(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CustomerDetail)\n)\n\nCustomerDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/BillEdit/BillDetail.js",["1230"],"import React, {useEffect} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {createCreditNote, getBill} from \"../../store/bill/actions\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {BILL_STATUS} from \"../../common/constants\";\n\nconst BillDetail = (props) => {\n\n    const {onGetBill, refresh, bill} = props;\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetBill(props.match.params.id);\n        }\n    }, [onGetBill, refresh]);\n\n    const createCreditNote = () => {\n        ConfirmationModalAction({\n            title: `¿Está seguro de generar una nota de crédito para la factura # ${bill.id}?`,\n            description: 'Esta acción no puede revertirse.',\n            id: '_creditNoteModal',\n            onConfirm: () => props.onCreateCreditNote(bill.id)\n        });\n    }\n\n    const formatLog = (_log) => {\n        if (_log) {\n            const replaceRegex = /Paso+/g;\n            _log = _log.replace(replaceRegex, \"<br /><br />Paso\");\n            return _log;\n        } else {\n            return \"No hay registros al momento\";\n\n        }\n    }\n\n    return (bill && bill.id) ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/bills\" title={`Factura #${bill.id}`} item={`Factura #${bill.id}`}/>\n\n                    <Row className=\"mb-2\">\n                        <Col md={12}>\n                            <div className={\"mb-3 float-md-start\"}>\n\n                            </div>\n                            <div className={\"mb-3 float-md-end\"}>\n                                <div className=\"button-items\">\n                                    {!!(bill.status === BILL_STATUS.SENT && !bill.creditNote) && (\n                                        <Tooltip placement=\"bottom\" title=\"Generar nota de crédito\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => createCreditNote()}>\n                                                <i className={`uil-bill text-danger`}> </i>\n                                            </button>\n                                        </Tooltip>\n                                    )}\n                                </div>\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Card id={'details'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Información básica</h4>\n                                <hr/>\n                            </Col>\n                            <Col md={12}>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>ID: </label>\n                                        <span className=\"p-1\">{bill.id}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Número legal: </label>\n                                        <span className=\"p-1\">{bill.legalNumber}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Pedido: </label>\n                                        <span className=\"p-1\">{bill.order.id}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Estatus:</label>\n                                        <span className=\"p-1\">{bill.status}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha: </label>\n                                        <span className=\"p-1\">{formatDate(bill.createdAt)}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Cliente:</label>\n                                        <span className=\"p-1\">{bill.order.customer.name}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Correo: </label>\n                                        <span className=\"p-1\">{bill.order.customer.email}</span>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <Card id={'log'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Bitacora Dian</h4>\n                                <hr/>\n                                <div dangerouslySetInnerHTML={{ __html: formatLog(bill.dianLog) }} />\n                            </Col>\n                        </Row>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {bill, loading, refresh, creditNote} = state.Bill\n    return {bill, refresh, loading, loadingCreditNote: creditNote.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetBill: (id) => dispatch(getBill(id)),\n    onCreateCreditNote: (id) => dispatch(createCreditNote(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BillDetail)\n)\n\nBillDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/Rightbar.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/index.js",["1231"],"import React, {useEffect} from \"react\"\nimport {CardBody, Container} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCustomer} from \"../../store/customer/actions\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport CustomerForm from \"./CustomerForm\";\nimport {Card} from \"@material-ui/core\";\n\nconst CustomerEdit = (props) => {\n    const {getCustomer, customer} = props;\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getCustomer) {\n            getCustomer(props.match.params.id);\n        }\n    }, [getCustomer]);\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/customers\" title={customer.name} item={\"Cliente\"}/>\n                    <Card>\n                        <CardBody>\n                            <CustomerForm customer={customer}/>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, customer, loading} = state.Customer\n    return {error, customer, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getCustomer})(CustomerEdit)\n)\n\nCustomerEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/index.js",["1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247"],"import React, {useEffect, useState} from \"react\";\nimport {Col, Collapse, Container, Label, Media, Row, Spinner} from \"reactstrap\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct, getProducts, registerProduct, updateProduct} from \"../../store/product/actions\";\nimport {getFieldOptionByGroups, registerFieldOption} from \"../../store/fieldOptions/actions\";\nimport {resetProductImages} from \"../../store/productImages/actions\";\nimport {resetProductSize} from \"../../store/productSize/actions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {FieldNumber, FieldSelect, FieldSwitch, FieldText} from '../../components/Fields';\nimport {Button, Card} from \"@material-ui/core\";\nimport {getCategories} from \"../../store/category/actions\";\nimport {getSizes} from \"../../store/sizes/actions\";\nimport {parseJson} from \"../../common/utils\";\nimport {arrayToOptions} from \"../../common/converters\";\nimport {GROUPS, STATUS} from \"../../common/constants\";\nimport ProductSize from \"./ProductSize\";\nimport ProductImage from \"./ProductImage\";\nimport ProductPublish from \"./ProductPublish\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport FieldOption from \"../../store/fieldOptions/reducer\";\nimport Autocomplete from \"../../components/Fields/Autocomplete\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\n\nconst ProductEdit = (props) => {\n\n    const [isOpen, setIsOpen] = useState(true);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const [isOpenDropImages, setIsOpenDropImages] = useState(false);\n    const toggleDropImages = () => setIsOpenDropImages(!isOpenDropImages);\n\n    const [isOpenWebConfig, setIsOpenWebConfig] = useState(false);\n    const toggleWebConfig = () => setIsOpenWebConfig(!isOpenWebConfig);\n\n    const [isOpenInventary, setIsOpenInventary] = useState(false);\n    const toggleInventary = () => setIsOpenInventary(!isOpenInventary);\n\n\n    const {\n        product, categories, sizes, fieldOptions, refreshProduct,\n        onGetProduct, onCreateProduct, onUpdateProduct,\n        onGetCategories, onGetSizes, onResetProductSize, onResetProductImages,\n        onGetFieldOptions, onCreateFieldOption, refreshFieldOptions\n    } = props;\n\n    const [productData, setProductData] = useState({_status: STATUS.ACTIVE, sizeModelList: []});\n\n    const [categoriesList, setCategoriesList] = useState([]);\n    const [categoryDefault, setCategoryDefault] = useState({});\n\n    const [materialsList, setMaterialsList] = useState([]);\n    const [providerList, setProviderList] = useState([]);\n    const [referenceList, setReferenceList] = useState([]);\n    const [materialDefault, setMaterialDefault] = useState({});\n    const [publication, setPublication] = useState({_status: \"true\"});\n\n    const [sizesList, setSizesList] = useState([]);\n    const [sizeDefault, setSizeDefault] = useState({});\n    const [sizeSelected, setSizeSelected] = useState(null);\n\n    const isEdit = props.match.params.id;\n    const hasOrders = false;\n\n    //Carga inicial\n    useEffect(() => {\n        if (isEdit && onGetProduct) {\n            onGetProduct(props.match.params.id);\n        }\n        onGetCategories();\n        onGetSizes();\n        onGetFieldOptions();\n    }, [onGetProduct]);\n\n    useEffect(() => {\n        if (product.id) {\n            onGetProduct(product.id);\n        }\n        onResetProductSize();\n        onResetProductImages();\n    }, [refreshProduct]);\n\n    //cargar info relacionada al prod\n    useEffect(() => {\n        if (product.id) {\n            setProductData({...product, _status: product.status});\n            const defaultCategory = product.category?.id || null;\n            setCategoryDefault(defaultCategory);\n\n            if (!isEdit) {\n                if (product.productSize.length === 0) {\n                    setIsOpen(false)\n                    setIsOpenInventary(true);\n                } else if (product.productImage.length === 0) {\n                    setIsOpen(false)\n                    setIsOpenInventary(false);\n                    setIsOpenDropImages(true);\n                }\n            }\n        }\n        //console.log('Product', product)\n    }, [product]);\n\n    useEffect(() => {\n        if (categories && categories.length > 0) {\n            setCategoriesList(arrayToOptions(categories));\n        } else {\n            setCategoriesList([]);\n        }\n    }, [categories])\n\n    useEffect(() => {\n        if (sizes && sizes.length > 0) {\n            const sizeList = arrayToOptions(sizes);\n            if (product.size && product.size.id) {\n                const defaultSize = sizeList.filter(m => m.value === product.size.id)[0];\n                setSizeDefault(defaultSize.value);\n            }\n            setSizesList(sizeList);\n        } else {\n            setSizesList([]);\n        }\n    }, [sizes])\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            setMaterialsList(filterFieldOptions(fieldOptions, GROUPS.MATERIALS));\n            setProviderList(filterFieldOptions(fieldOptions, GROUPS.PROVIDERS));\n            setReferenceList(filterFieldOptions(fieldOptions, GROUPS.REFERENCE_KEY).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n        } else {\n            setMaterialsList([]);\n            setProviderList([]);\n            setReferenceList([]);\n        }\n    }, [fieldOptions])\n\n    useEffect(() => {\n        if (refreshFieldOptions) {\n            onGetFieldOptions();\n        }\n    }, [refreshFieldOptions])\n\n    const filterFieldOptions = (arr, groups) => {\n        return arr.filter(op => (op.groups === groups)).map(op => ({name: op.name}));\n    }\n\n    const handleValidSubmit = (event, values) => {\n        const data = {\n            ...values,\n            category: values.category.value,\n            size: values.size.value,\n            status: values._status,\n            weight: values.weight ? Number.parseFloat(values.weight) : 0,\n            price: Number.parseFloat(values.price),\n            cost: Number.parseFloat(values.cost),\n        };\n\n        delete data._status;\n\n        if (values.referenceKey && values.referenceKey.value) {\n            data.referenceKey = values.referenceKey.value;\n        }\n\n        if (!isEdit) {\n            data.status = 1;\n            onCreateProduct(data, props.history)\n        } else {\n            onUpdateProduct(props.match.params.id, data, props.history)\n        }\n\n        if (!materialsList.some(op => op.name === data.material)) {\n            onCreateFieldOption({groups: GROUPS.MATERIALS, name: data.material, value: data.material}, props.history);\n        }\n        if (!providerList.some(op => op.name === data.provider)) {\n            onCreateFieldOption({groups: GROUPS.PROVIDERS, name: data.provider, value: data.provider}, props.history);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/products\" title={productData.reference} item={\"Producto\"}/>\n\n                    <Row>\n                        <Col md={12}>\n                            <Card id={'main-data'}>\n                                <Link to=\"#\" onClick={toggle} className=\"text-dark\">\n                                    <div className=\"p-4\">\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        01\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <Row>\n                                                    <Col md={8}>\n                                                        <h5 className=\"font-size-16 mb-1\">General</h5>\n                                                        <p className=\"text-muted text-truncate mb-0\">Datos principales del producto</p>\n                                                    </Col>\n                                                    {isEdit && (\n                                                        <Col md={4}>\n                                                            <div className=\"text-right pr-10\">\n                                                                <h5 className=\"font-size-16 mb-1\">Código</h5>\n                                                                <b className=\"font-size-18 text-info\">{productData.reference}</b>\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                </Row>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> </i>\n                                        </Media>\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpen}>\n                                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                            onValidSubmit={(e, v) => {\n                                                handleValidSubmit(e, v)\n                                            }}>\n                                        <div className=\"p-4 border-top\">\n                                            <Row>\n                                                {!(product && product.id) && (\n                                                    <Col md={2}>\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_referenceKey\">Ref. <span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"field_referenceKey\"}\n                                                                name={\"referenceKey\"}\n                                                                options={referenceList}\n                                                                defaultValue={productData.referenceKey}\n                                                                required\n                                                                isSearchable\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                                <Col md={10}>\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre de Producto <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={productData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                                {(product && product.id) && (\n                                                    <Col md={2}>\n                                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                            <div className={\"float-end\"}>\n                                                                <Row>\n                                                                    <Col>\n                                                                        ¿Activo?\n                                                                    </Col>\n                                                                    <Col>\n                                                                        <FieldSwitch defaultValue={productData._status} name={\"_status\"}/>\n                                                                    </Col>\n                                                                </Row>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label className=\"control-label\">Categoria <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id={\"field_category\"}\n                                                            name={\"category\"}\n                                                            options={categoriesList}\n                                                            defaultValue={categoryDefault}\n                                                            required\n                                                            disabled={hasOrders}\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"3\">\n                                                    <div className=\"mb-0\">\n                                                        <Label className=\"control-label\">Tallas</Label>\n                                                        <FieldSelect\n                                                            id={\"field_sizes\"}\n                                                            name={\"size\"}\n                                                            options={sizesList}\n                                                            defaultValue={sizeDefault}\n                                                            onChange={(e) => {\n                                                                setSizeSelected(sizes.find(s => s.id === e.value));\n                                                            }}\n                                                            disabled={hasOrders}\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"3\">\n                                                    <div className=\"mb-3\">\n                                                        <Label className=\"control-label\">Material</Label>\n                                                        <Autocomplete\n                                                            id={\"field_material\"}\n                                                            name={\"material\"}\n                                                            options={materialsList}\n                                                            defaultValue={productData.material}\n                                                            onChange={(material) => setProductData({...productData, material: material})}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_provider\">Proveedor</Label>\n                                                        <Autocomplete\n                                                            id={\"field_provider\"}\n                                                            name={\"provider\"}\n                                                            options={providerList}\n                                                            defaultValue={productData.provider}\n                                                            onChange={(provider) => setProductData({...productData, provider: provider})}\n                                                        />\n                                                    </div>\n                                                </Col>\n\n                                                <Col md=\"2\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"weight\">Peso (g) </Label>\n                                                        <FieldNumber\n                                                            id={\"field_weight\"}\n                                                            name={\"weight\"}\n                                                            type=\"number\"\n                                                            value={productData.weight}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"2\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"cost\">Costo <span className=\"text-danger\">*</span></Label>\n                                                        <FieldNumber\n                                                            id={\"field_cost\"}\n                                                            name={\"cost\"}\n                                                            type=\"number\"\n                                                            value={productData.cost}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"2\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"price\">Precio <span className=\"text-danger\">*</span></Label>\n                                                        <FieldNumber\n                                                            id={\"field_price\"}\n                                                            name={\"price\"}\n                                                            value={productData.price}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-0\">\n                                                        <Label htmlFor=\"description\">Descripción</Label>\n                                                        <FieldText\n                                                            id={\"field_description\"}\n                                                            name={\"description\"}\n                                                            value={productData.description}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row className=\"pt-2\">\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    </AvForm>\n\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12} className=\"mt-2\">\n                            <Card id={'inventory'}>\n                                <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleInventary}>\n                                    <div className=\"p-4\">\n\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        02\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <h5 className=\"font-size-16 mb-1\">Inventario</h5>\n                                                <p className=\"text-muted text-truncate mb-0\">Agregue existencia a su producto.</p>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> < /i>\n                                        </Media>\n\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpenInventary}>\n                                    <div className=\"p-4 border-top\">\n                                        {(productData.id && productData.size) ? (\n                                            <>\n                                                <h4>{productData.size ? productData.size.name : ''}</h4>\n                                                <p>Ingrese color y tallas para el producto.</p>\n                                                <ProductSize template={productData.size} product={productData}/>\n                                            </>\n                                        ) : (\n                                            <div className=\"alert alert-warning\">Debe agregar una talla al producto.</div>\n                                        )}\n                                    </div>\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12}>\n                            <Card id={'images'} className=\"mt-2 disabled\">\n                                <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleDropImages}>\n                                    <div className=\"p-4\">\n\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        03\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <h5 className=\"font-size-16 mb-1\">Imagenes</h5>\n                                                <p className=\"text-muted text-truncate mb-0\">Agrega las imagenes a su producto.</p>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"></i>\n                                        </Media>\n\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpenDropImages}>\n                                    <ProductImage product={product}/>\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={12}>\n                            <Card id={'publication'} className=\"mt-2\">\n                                <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleWebConfig}>\n                                    <div className=\"p-4\">\n\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        04\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <h5 className=\"font-size-16 mb-1\">Publicación</h5>\n                                                <p className=\"text-muted text-truncate mb-0\">Configuraciones para la publicación en la Página Web.</p>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> </i>\n                                        </Media>\n\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpenWebConfig}>\n                                    {productData.id && (\n                                        <ProductPublish product={product}/>\n                                    )}\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {error, product, loading} = state.Product\n    const {fieldOptions, refresh} = state.FieldOption\n    const refreshProduct = state.ProductSize.refresh || state.ProductImage.refresh || state.Product.refresh;\n    const {categories} = state.Category\n    const {sizes} = state.Sizes\n    return {error, product, categories, sizes, fieldOptions, loading, refreshProduct, refreshFieldOptions: refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetCategories: (conditional = null, limit = 100, page) => dispatch(getCategories(conditional, limit, page)),\n    onGetSizes: (conditional = null, limit = 100, page) => dispatch(getSizes(conditional, limit, page)),\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.MATERIALS, GROUPS.PROVIDERS, GROUPS.REFERENCE_KEY], limit, page)),\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onCreateProduct: (data, history) => dispatch(registerProduct(data, history)),\n    onUpdateProduct: (data, history) => dispatch(updateProduct(data, history)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n    onResetProductSize: () => dispatch(resetProductSize()),\n    onResetProductImages: () => dispatch(resetProductImages()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductEdit)\n)\n\nProductEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/saga.js",["1248"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {GET_PRODUCTS, GET_PRODUCT, REGISTER_PRODUCT, UPDATE_PRODUCT, QUERY_PRODUCTS, QUERY_PENDING_PRODUCTS} from \"./actionTypes\"\n\nimport {\n    getProductsSuccess,\n    getProductsFailed,\n    registerProductSuccess,\n    getProductSuccess,\n    getProductFailed,\n    registerProductFailed,\n    updateProductSuccess,\n    updateProductFail, queryProductsSuccess, queryProductsFailed\n} from \"./actions\"\n\nimport {\n    registerProductApi,\n    updateProductApi,\n    fetchProductApi,\n    fetchProductsApi, getProductsPendingApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n*/\n\nconst ACTION_NAME_QUERY_PENDING_PRODUCTS =   QUERY_PENDING_PRODUCTS;\nconst ACTION_NAME_QUERY      =   QUERY_PRODUCTS;\nconst ACTION_NAME_LIST      =   GET_PRODUCTS;\nconst ACTION_NAME_GET       =   GET_PRODUCT;\nconst ACTION_NAME_CREATE    =   REGISTER_PRODUCT;\nconst ACTION_NAME_UPDATE    =   UPDATE_PRODUCT;\n\nconst PENDING_PRODUCTS_API_REQUEST   =   getProductsPendingApi;\nconst LIST_API_REQUEST      =   fetchProductsApi;\nconst GET_API_REQUEST       =   fetchProductApi;\nconst POST_API_REQUEST      =   registerProductApi;\nconst PUT_API_REQUEST       =   updateProductApi;\n\n//actions\nconst QUERY_SUCCESS_ACTION  =   queryProductsSuccess;\nconst QUERY_FAILED_ACTION   =   queryProductsFailed;\nconst LIST_SUCCESS_ACTION   =   getProductsSuccess;\nconst LIST_FAILED_ACTION    =   getProductsFailed;\nconst GET_SUCCESS_ACTION    =   getProductSuccess;\nconst GET_FAILED_ACTION     =   getProductFailed;\nconst CREATE_SUCCESS_ACTION =   registerProductSuccess;\nconst CREATE_FAILED_ACTION  =   registerProductFailed;\nconst UPDATE_SUCCESS_ACTION =   updateProductSuccess;\nconst UPDATE_FAILED_ACTION  =   updateProductFail;\n\n\nconst LIST_URL = \"/products\";\n\nfunction* get({ id }) {\n    try {\n        const response = yield call(GET_API_REQUEST, { id });\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\nfunction* queryData({params ={}, node='products'}) {\n    try {\n        const response = yield call(LIST_API_REQUEST, params)\n        yield put(QUERY_SUCCESS_ACTION(response.data, response.meta, node));\n    } catch (error) {\n        yield put(QUERY_FAILED_ACTION(error))\n    }\n}\nfunction* getPendingProducts({id}) {\n    try {\n        const response = yield call(PENDING_PRODUCTS_API_REQUEST, id)\n        yield put(QUERY_SUCCESS_ACTION(response.products, response.meta, 'pendingProducts'));\n    } catch (error) {\n        yield put(QUERY_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({ payload: { data, history } }) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        showResponseMessage(response, \"Producto creado!\");\n        yield put(CREATE_SUCCESS_ACTION(response))\n       //history.push(LIST_URL)\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* update({ payload: { id, data, history } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Producto actualizado!\")\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        //history.push(LIST_URL)\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nexport function* watchProduct() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get)\n    yield takeEvery(ACTION_NAME_QUERY, queryData)\n    yield takeEvery(ACTION_NAME_QUERY_PENDING_PRODUCTS, getPendingProducts)\n}\n\nfunction* productSaga() {\n    yield all([fork(watchProduct)])\n}\n\nexport default productSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/comment/saga.js",["1249","1250"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {GET_COMMENTS, GET_COMMENT, REGISTER_COMMENT, UPDATE_COMMENT, DELETE_COMMENT} from \"./actionTypes\"\n\nimport {\n    getCommentsSuccess,\n    getCommentsFailed,\n    registerCommentSuccess,\n    getCommentSuccess,\n    getCommentFailed,\n    registerCommentFailed,\n    updateCommentSuccess,\n    updateCommentFail, deleteCommentSuccess, deleteCommentFail, getComments, getCommentsByEntity\n} from \"./actions\"\n\nimport {\n    registerCommentApi,\n    updateCommentApi,\n    fetchCommentApi,\n    fetchCommentsApi, deleteCommentApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_LIST      =   GET_COMMENTS;\nconst ACTION_NAME_GET       =   GET_COMMENT;\nconst ACTION_NAME_CREATE    =   REGISTER_COMMENT;\nconst ACTION_NAME_UPDATE    =   UPDATE_COMMENT;\nconst ACTION_NAME_DELETE    =   DELETE_COMMENT;\n\nconst LIST_API_REQUEST      =   fetchCommentsApi;\nconst GET_API_REQUEST       =   fetchCommentApi;\nconst POST_API_REQUEST      =   registerCommentApi;\nconst PUT_API_REQUEST       =   updateCommentApi;\nconst DELETE_API_REQUEST    =   deleteCommentApi;\n\n//actions\nconst LIST_ACTION           =   getCommentsByEntity;\nconst LIST_SUCCESS_ACTION   =   getCommentsSuccess;\nconst LIST_FAILED_ACTION    =   getCommentsFailed;\nconst GET_SUCCESS_ACTION    =   getCommentSuccess;\nconst GET_FAILED_ACTION     =   getCommentFailed;\nconst CREATE_SUCCESS_ACTION =   registerCommentSuccess;\nconst CREATE_FAILED_ACTION  =   registerCommentFailed;\nconst UPDATE_SUCCESS_ACTION =   updateCommentSuccess;\nconst UPDATE_FAILED_ACTION  =   updateCommentFail;\nconst DELETE_SUCCESS_ACTION =   deleteCommentSuccess;\nconst DELETE_FAILED_ACTION  =   deleteCommentFail;\n\nfunction* get({ id }) {\n    try {\n        const response = yield call(GET_API_REQUEST,  id );\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\nfunction* fetch({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\nfunction* register({ payload: {idRelated, data } }) {\n    try {\n        const response = yield call(POST_API_REQUEST, idRelated, data)\n        yield put(CREATE_SUCCESS_ACTION(response))\n        yield put(LIST_ACTION(data.entity, idRelated))\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\nfunction* update({ payload: { id, data } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        yield put(UPDATE_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\nfunction* remove({ payload: { comment} }) {\n    try {\n        const response = yield call(DELETE_API_REQUEST, comment.id)\n        yield put(DELETE_SUCCESS_ACTION(response))\n        yield put(LIST_ACTION(comment.entity, comment.idRelated))\n    } catch (error) {\n        yield put(DELETE_FAILED_ACTION(error))\n    }\n}\n\nexport function* watchComment() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_DELETE, remove);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get)\n}\n\nfunction* commentSaga() {\n    yield all([fork(watchComment)])\n}\n\nexport default commentSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/productImages/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productSize/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/saga.js",["1251"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {\n    GET_OFFICES,\n    GET_OFFICE,\n    REGISTER_OFFICE,\n    UPDATE_OFFICE,\n    QUERY_OFFICES,\n    DELETE_OFFICE,\n    CONFIRM_OFFICE, ADD_ORDER_OFFICE, IMPORT_FILE, PRINT_OFFICE_REPORT\n} from \"./actionTypes\"\n\nimport {\n    getOfficesSuccess,\n    getOfficesFailed,\n    registerOfficeSuccess,\n    getOfficeSuccess,\n    getOfficeFailed,\n    registerOfficeFailed,\n    updateOfficeSuccess,\n    updateOfficeFail, queryOfficesSuccess, queryOfficesFailed,\n    deleteOfficeFailed, deleteOfficeSuccess, confirmOfficeSuccess, importFileSuccess, importFileFailed, getOffice, printOfficeReportSuccess, printOfficeReportFailed\n} from \"./actions\"\n\nimport {\n    registerOfficeApi,\n    updateOfficeApi,\n    fetchOfficeApi,\n    fetchOfficesApi, deleteOfficeApi, confirmOfficeApi, addOrderOfficeApi, importFileApi, printOfficeReportApi\n} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n */\n\nconst ACTION_NAME_QUERY = QUERY_OFFICES;\nconst ACTION_NAME_LIST = GET_OFFICES;\nconst ACTION_NAME_GET = GET_OFFICE;\nconst ACTION_NAME_CREATE = REGISTER_OFFICE;\nconst ACTION_NAME_UPDATE = UPDATE_OFFICE;\nconst ACTION_NAME_DELETE = DELETE_OFFICE;\nconst ACTION_NAME_CONFIRM = CONFIRM_OFFICE;\nconst ACTION_NAME_ADD_CHILD = ADD_ORDER_OFFICE;\nconst IMPORT_FILE_POST = IMPORT_FILE;\nconst PRINT_OFFICE_REPORT_POST = PRINT_OFFICE_REPORT;\n\nconst LIST_API_REQUEST = fetchOfficesApi;\nconst GET_API_REQUEST = fetchOfficeApi;\nconst POST_API_REQUEST = registerOfficeApi;\nconst PUT_API_REQUEST = updateOfficeApi;\nconst IMPORT_FILE_API_REQUEST = importFileApi;\n\n//actions\nconst QUERY_SUCCESS_ACTION = queryOfficesSuccess;\nconst QUERY_FAILED_ACTION = queryOfficesFailed;\nconst LIST_SUCCESS_ACTION = getOfficesSuccess;\nconst LIST_FAILED_ACTION = getOfficesFailed;\nconst GET_SUCCESS_ACTION = getOfficeSuccess;\nconst GET_FAILED_ACTION = getOfficeFailed;\nconst CREATE_SUCCESS_ACTION = registerOfficeSuccess;\nconst CREATE_FAILED_ACTION = registerOfficeFailed;\nconst UPDATE_SUCCESS_ACTION = updateOfficeSuccess;\nconst UPDATE_FAILED_ACTION = updateOfficeFail;\nconst IMPORT_FILE_SUCCESS_ACTION = importFileSuccess;\nconst IMPORT_FILE_FAILED_ACTION = importFileFailed;\n\n\nconst LIST_URL = \"/offices\";\nconst SHOW_URL = \"/office\";\n\nfunction* get({id}) {\n    try {\n        const response = yield call(GET_API_REQUEST, {id});\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\n\nfunction* queryData({params = {}, node = 'offices'}) {\n    try {\n        const response = yield call(LIST_API_REQUEST, params)\n        yield put(QUERY_SUCCESS_ACTION(response.data, response.meta, node));\n    } catch (error) {\n        yield put(QUERY_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({payload: {data, history}}) {\n    try {\n        const response = yield call(POST_API_REQUEST, data)\n        showResponseMessage(response, \"Despacho creado!\");\n        yield put(CREATE_SUCCESS_ACTION(response))\n        history.push(SHOW_URL + \"/\" + response.office.id);\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* update({payload: {id, data, history}}) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Despacho actualizado!\")\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        yield put(getOffice(id))\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* officeDelete({payload: {id, history}}) {\n    try {\n        yield call(deleteOfficeApi, id)\n        yield put(deleteOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho borrado!\");\n        history.push(\"/offices\")\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteOfficeFailed(error))\n    }\n}\n\nfunction* officeConfirm({payload: {id, history}}) {\n    try {\n        yield call(confirmOfficeApi, id)\n        yield put(confirmOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho ha sido finalizado!\");\n        history.push(\"/offices\")\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteOfficeFailed(error))\n    }\n}\n\nfunction* officeOrderAdd({payload: {id, data, conditional, history}}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, 0, 200);\n        yield call(addOrderOfficeApi, id, data, query)\n        yield put(deleteOfficeSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho creado!\");\n        history.push(\"/office/\" + id)\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteOfficeFailed(error))\n    }\n}\n\nfunction* importFile({payload: {data}}) {\n    try {\n        console.log('importFile')\n        const response = yield call(IMPORT_FILE_API_REQUEST, data)\n        let message = \"Cantidad de registros importados: \" + (response.status === 200 ? response.data.registers.length : 0);\n        showResponseMessage(response, message);\n        yield put(IMPORT_FILE_SUCCESS_ACTION(response))\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(IMPORT_FILE_FAILED_ACTION(error.message))\n    }\n}\n\nfunction* printOfficeReport({payload: {id}}) {\n    try {\n        console.log('printOfficeReport', id)\n        const response = yield call(printOfficeReportApi, id)\n        if (response.status !== 200) {\n            yield put(printOfficeReportFailed(response.error))\n            showResponseMessage(response, response.error);\n        } else {\n            yield put(printOfficeReportSuccess(response))\n        }\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(printOfficeReportFailed(error.message))\n    }\n}\n\nexport function* watchOffice() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get);\n    yield takeEvery(ACTION_NAME_DELETE, officeDelete);\n    yield takeEvery(ACTION_NAME_CONFIRM, officeConfirm);\n    yield takeEvery(ACTION_NAME_QUERY, queryData);\n    yield takeEvery(ACTION_NAME_ADD_CHILD, officeOrderAdd);\n    yield takeEvery(IMPORT_FILE_POST, importFile);\n    yield takeEvery(PRINT_OFFICE_REPORT_POST, printOfficeReport);\n}\n\nfunction* officeSaga() {\n    yield all([fork(watchOffice)])\n}\n\nexport default officeSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/bill/saga.js",["1252","1253"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {ADD_ORDER_BILL, CONFIRM_BILL, DELETE_BILL, GENERATE_CREDIT_NOTE, GENERATE_REPORT_REQUEST, GET_BILL, GET_BILLS, QUERY_BILLS, REGISTER_BILL, UPDATE_BILL} from \"./actionTypes\"\n\nimport {\n    confirmBillSuccess,\n    createCreditNoteFailed,\n    createCreditNoteSuccess,\n    deleteBillFailed,\n    deleteBillSuccess,\n    generateReportFailed,\n    generateReportSuccess,\n    getBillFailed,\n    getBillsFailed,\n    getBillsSuccess,\n    getBillSuccess,\n    queryBillsFailed,\n    queryBillsSuccess,\n    refreshList,\n    registerBillFailed,\n    registerBillSuccess,\n    updateBillFail,\n    updateBillSuccess\n} from \"./actions\"\n\nimport {addOrderBillApi, confirmBillApi, createCreditNoteApi, deleteBillApi, fetchBillApi, fetchBillsApi, generateReportApi, registerBillApi, updateBillApi} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\nimport {BILL_MEMO_TYPES} from \"../../common/constants\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n*/\n\nconst ACTION_NAME_QUERY      =   QUERY_BILLS;\nconst ACTION_NAME_LIST      =    GET_BILLS;\nconst ACTION_NAME_GET       =    GET_BILL;\nconst ACTION_NAME_CREATE    =    REGISTER_BILL;\nconst ACTION_NAME_UPDATE    =    UPDATE_BILL;\nconst ACTION_NAME_DELETE    =    DELETE_BILL;\nconst ACTION_NAME_CONFIRM   =    CONFIRM_BILL;\nconst ACTION_NAME_ADD_CHILD = ADD_ORDER_BILL;\nconst ACTION_NAME_CREDIT_NOTE = GENERATE_CREDIT_NOTE;\nconst ACTION_NAME_GEN_REPORT = GENERATE_REPORT_REQUEST;\n\nconst LIST_API_REQUEST      =   fetchBillsApi;\nconst GET_API_REQUEST       =   fetchBillApi;\nconst POST_API_REQUEST      =   registerBillApi;\nconst PUT_API_REQUEST = updateBillApi;\nconst CREDIT_NOTE_API_REQUEST = createCreditNoteApi;\nconst GENERATE_REPORT_API_REQUEST = generateReportApi;\n\n//actions\nconst QUERY_SUCCESS_ACTION = queryBillsSuccess;\nconst QUERY_FAILED_ACTION = queryBillsFailed;\nconst LIST_SUCCESS_ACTION = getBillsSuccess;\nconst LIST_FAILED_ACTION = getBillsFailed;\nconst GET_SUCCESS_ACTION = getBillSuccess;\nconst GET_FAILED_ACTION = getBillFailed;\nconst CREATE_SUCCESS_ACTION = registerBillSuccess;\nconst CREATE_FAILED_ACTION = registerBillFailed;\nconst UPDATE_SUCCESS_ACTION = updateBillSuccess;\nconst UPDATE_FAILED_ACTION = updateBillFail;\nconst CREDIT_NOTE_SUCCESS_ACTION = createCreditNoteSuccess;\nconst CREDIT_NOTE_FAILED_ACTION = createCreditNoteFailed;\nconst GENERATE_REPORT_SUCCESS_ACTION = generateReportSuccess;\nconst GENERATE_REPORT_FAILED_ACTION = generateReportFailed;\n\n\nconst LIST_URL = \"/bills\";\nconst SHOW_URL = \"/bill\";\n\nfunction* get({id}) {\n    try {\n        const response = yield call(GET_API_REQUEST, {id});\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\nfunction* queryData({params ={}, node='bills'}) {\n    try {\n        const response = yield call(LIST_API_REQUEST, params)\n        yield put(QUERY_SUCCESS_ACTION(response.data, response.meta, node));\n    } catch (error) {\n        yield put(QUERY_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({payload: {data}}) {\n    try {\n        console.log('factura', data)\n        const response = yield call(POST_API_REQUEST, data);\n        showResponseMessage(response, \"Factura creada!\", response.error);\n        yield put(CREATE_SUCCESS_ACTION(response));\n        yield put(refreshList())\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n        showResponseMessage({status: error.response.data.code}, \"\", error.response.data.error);\n    }\n}\n\nfunction* update({ payload: { id, data, history } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Despacho actualizado!\")\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        //history.push(LIST_URL)\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* billDelete({ payload: { id, history } }) {\n    try {\n        yield call(deleteBillApi, id)\n        yield put(deleteBillSuccess(id))\n        showResponseMessage({status:200}, \"Despacho borrado!\");\n        history.push(\"/bills\")\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteBillFailed(error))\n    }\n}\n\nfunction* billConfirm({ payload: { id, history } }) {\n    try {\n        yield call(confirmBillApi, id)\n        yield put(confirmBillSuccess(id))\n        showResponseMessage({status:200}, \"Despacho ha sido finalizado!\");\n        history.push(\"/bills\")\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteBillFailed(error))\n    }\n}\n\nfunction* billOrderAdd({ payload: { id, data, conditional, history } }) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, 0, 200);\n        yield call(addOrderBillApi, id, data, query)\n        yield put(deleteBillSuccess(id))\n        showResponseMessage({status: 200}, \"Despacho borrado!\");\n        history.push(\"/bill/\" + id)\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteBillFailed(error))\n    }\n}\n\nfunction* createCreditNote({id}) {\n    try {\n        console.log('createCreditNote', id)\n        const response = yield call(CREDIT_NOTE_API_REQUEST, id, {type: BILL_MEMO_TYPES.CREDIT});\n        showResponseMessage(response, \"Nota de credito creada!\", response.error);\n        yield put(CREDIT_NOTE_SUCCESS_ACTION(response));\n        yield put(refreshList())\n    } catch (error) {\n        yield put(CREDIT_NOTE_FAILED_ACTION(error.message || error.response.data.error))\n        showResponseMessage({status: 500}, \"\", error.message || error.response.data.error);\n    }\n}\n\nfunction* generateReport({data}) {\n    try {\n        console.log('generateReport', data)\n        const response = yield call(GENERATE_REPORT_API_REQUEST, data);\n        showResponseMessage(response, \"Reporte creado!\", response.error);\n        yield put(GENERATE_REPORT_SUCCESS_ACTION(response));\n    } catch (error) {\n        yield put(GENERATE_REPORT_FAILED_ACTION(error.message || error.response.data.error))\n        showResponseMessage({status: 500}, \"\", error.message || error.response.data.error);\n    }\n}\n\nexport function* watchBill() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get);\n    yield takeEvery(ACTION_NAME_DELETE, billDelete);\n    yield takeEvery(ACTION_NAME_CONFIRM, billConfirm);\n    yield takeEvery(ACTION_NAME_QUERY, queryData);\n    yield takeEvery(ACTION_NAME_ADD_CHILD, billOrderAdd);\n    yield takeEvery(ACTION_NAME_CREDIT_NOTE, createCreditNote);\n    yield takeEvery(ACTION_NAME_GEN_REPORT, generateReport);\n}\n\nfunction* billSaga() {\n    yield all([fork(watchBill)])\n}\n\nexport default billSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/layout/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/reducer.js",["1254"],"import {\n    APPLY_PAYMENT,\n    APPLY_PAYMENT_FAILED,\n    APPLY_PAYMENT_SUCCESS,\n    GET_PAYMENT,\n    GET_PAYMENT_FAILED,\n    GET_PAYMENT_SUCCESS,\n    GET_PAYMENTS,\n    GET_PAYMENTS_FAILED,\n    GET_PAYMENTS_SUCCESS,\n    REGISTER_PAYMENT,\n    REGISTER_PAYMENT_FAILED,\n    REGISTER_PAYMENT_SUCCESS,\n    UPDATE_PAYMENT,\n    UPDATE_PAYMENT_FAILED,\n    UPDATE_PAYMENT_SUCCESS\n} from \"./actionTypes\";\n\nconst initialState = {\n    error: \"\",\n    loading: false,\n    meta: {},\n    payments: [],\n    payment: {},\n    refresh: false\n}\n\nconst payments = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_PAYMENTS:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PAYMENTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false,\n            }\n\n        case GET_PAYMENTS_SUCCESS:\n            return {\n                ...state,\n                payments: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n        case GET_PAYMENT:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PAYMENT_SUCCESS:\n            return {\n                ...state,\n                payment: action.payload,\n                loading: false,\n            }\n        case GET_PAYMENT_FAILED:\n            return {\n                ...state,\n                loading: false,\n            }\n        case REGISTER_PAYMENT:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case REGISTER_PAYMENT_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case REGISTER_PAYMENT_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_PAYMENT:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case UPDATE_PAYMENT_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_PAYMENT_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n        case APPLY_PAYMENT:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case APPLY_PAYMENT_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case APPLY_PAYMENT_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        default:\n            state = {...state}\n            break\n    }\n    return state\n}\n\nexport default payments\n","/Users/ramon/Repositories/lucy-moie/src/store/postSale/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Product/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Category/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/State/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/MunicipalityEdit/index.js",["1255","1256","1257","1258","1259","1260"],"import React, {useState, useEffect} from \"react\"\nimport {CardBody, Col, Container, Label, Row, Spinner} from \"reactstrap\"\nimport {AvForm, AvField} from \"availity-reactstrap-validation\"\nimport {Button, Card} from \"@material-ui/core\";\nimport {withRouter, Link} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getMunicipality, registerMunicipality, updateMunicipality, getStates} from \"../../store/location/actions\";\nimport {FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport {statesToOptions} from \"../../common/converters\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst MunicipalityEdit = (props) => {\n    const {getMunicipality,getStates, municipality, states} = props;\n    const [municipalityData, setMunicipalityData] = useState({_status: STATUS.ACTIVE});\n    const [statesOptions, setStates] = useState([]);\n    const [municipalityDefault, setMunicipalityDefault] = useState(null);\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getMunicipality) {\n            getMunicipality(props.match.params.id);\n        }\n        getStates();\n    }, [getMunicipality]);\n\n    //cargar la información del municipio\n    useEffect(() => {\n        if (municipality.id && isEdit) {\n            setMunicipalityData({...municipality, _status:municipality.status});\n\n            const defaultMunicipality = municipality.state?.id || null;\n            setMunicipalityDefault(defaultMunicipality);\n        }\n    }, [municipality]);\n\n    //cargar estados\n    useEffect(() => {\n        if (states && states.length > 0) {\n            setStates(statesToOptions(states));\n        } else {\n            setStates([]);\n        }\n    }, [states]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status, state: values.state.value};\n        delete data._status;\n        if (!isEdit) {\n            props.registerMunicipality(data, props.history)\n        } else {\n            props.updateMunicipality(props.match.params.id, data, props.history)\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/municipalities\" title={municipalityData.name} item={\"Estado\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={municipalityData._status} name={\"_status\"}/>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"state\">Estado <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        name={\"state\"}\n                                                        options={statesOptions}\n                                                        defaultValue={municipalityDefault}\n                                                        required\n                                                        isSearchable\n                                                    />\n                                                </div>\n                                            </Col>\n\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={municipalityData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"4\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Código DIAN <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_dianCode\"}\n                                                        name={\"dianCode\"}\n                                                        value={municipalityData.dianCode}\n                                                        minLength={3}\n                                                        maxLength={10}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, municipality, states, loading} = state.Location\n    return {error, municipality, states, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getStates, registerMunicipality, updateMunicipality, getMunicipality})(MunicipalityEdit)\n)\n\nMunicipalityEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/CategoryEdit/index.js",["1261","1262"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCategory, registerCategory, updateCategory} from \"../../store/category/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst CategoryEdit = (props) => {\n    const {getCategory, category} = props;\n    const [categoryData, setCategory] = useState({_status:STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getCategory) {\n            getCategory(props.match.params.id);\n        }\n    }, [getCategory]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (category.id && isEdit) {\n            setCategory({...category, _status:category.status});\n        }\n    }, [category]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status:values._status};\n        delete data._status;\n        if (!isEdit) {\n            props.registerCategory(data, props.history)\n        } else {\n            props.updateCategory(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/categories\" title={categoryData.name} item={\"Categoria\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                        <Row>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={categoryData._status} name={\"_status\"} />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={categoryData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"4\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_prefix\">Prefijo <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_prefix\"}\n                                                        name={\"prefix\"}\n                                                        value={categoryData.prefix}\n                                                        minLength={1}\n                                                        maxLength={5}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, category, loading} = state.Category\n    return {error, category, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerCategory, updateCategory, getCategory})(CategoryEdit)\n)\n\nCategoryEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/UserEdit/index.js",["1263","1264","1265","1266","1267","1268"],"import React, {useState, useEffect} from \"react\"\nimport {CardBody, Col, Container, Label, Row, Spinner} from \"reactstrap\"\nimport {AvForm, AvField} from \"availity-reactstrap-validation\"\nimport {Button, Card} from \"@material-ui/core\";\nimport {withRouter, Link} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {registerUser, updateUser, getUser} from \"../../store/user/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst UserEdit = (props) => {\n    const {registerUser, updateUser, getUser, user} = props;\n    const [userData, setUserData] = useState({_status:STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getUser) {\n            getUser(props.match.params.id);\n        }\n    }, [getUser]);\n\n    useEffect(() => {\n        if (user.id && isEdit) {\n            setUserData({...user, _status:user.status});\n        }\n    }, [user]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status:values._status};\n        delete data._status;\n        if (!isEdit) {\n            registerUser(data, props.history)\n        } else {\n            updateUser(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/users\" title={userData.name} item={\"Usuario\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                        <Row className=\"mb-5\">\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={userData._status} name={\"_status\"} />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"name\"}\n                                                        name={\"name\"}\n                                                        value={userData.name}\n                                                        minLength={1}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"lastname\">Apellido <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"lastname\"}\n                                                        name={\"lastname\"}\n                                                        value={userData.lastname}\n                                                        minLength={1}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"email\">Correo</Label>\n                                                    <FieldText\n                                                        id={\"email\"}\n                                                        name={\"email\"}\n                                                        value={userData.email}\n                                                        maxLength={300}\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"lastname\">Usuario <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"username\"}\n                                                        name={\"username\"}\n                                                        value={userData.username}\n                                                        minLength={1}\n                                                        maxLength={45}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            {!userData.id && (\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"password\">Clave</Label>\n                                                        <FieldText\n                                                            id={\"password\"}\n                                                            name={\"password\"}\n                                                            type=\"password\"\n                                                            value={userData.password}\n                                                            maxLength={50}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            )}\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, user, loading} = state.User\n    return {error, user, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerUser, updateUser, getUser})(UserEdit)\n)\n\nUserEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/StateEdit/index.js",["1269","1270","1271","1272","1273","1274"],"import React, {useState, useEffect} from \"react\"\nimport {CardBody, Col, Container, Label, Row, Spinner} from \"reactstrap\"\nimport {AvForm, AvField} from \"availity-reactstrap-validation\"\nimport {Button, Card} from \"@material-ui/core\";\nimport {withRouter, Link} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getState, registerState, updateState} from \"../../store/location/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst StateEdit = (props) => {\n    const {getState, estado} = props;\n    const [estadoData, setEstadoData] = useState({_status:STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getState) {\n            getState(props.match.params.id);\n        }\n    }, [getState]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (estado.id && isEdit) {\n            setEstadoData({...estado, _status:estado.status});\n        }\n    }, [estado]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({},values, {status:values._status});\n        delete data._status;\n        if (!isEdit) {\n            props.registerState(data, props.history)\n        } else {\n            props.updateState(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/states\" title={estadoData.name} item={\"Estado\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={estadoData._status} name={\"_status\"} />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={estadoData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Código DIAN <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_dianCode\"}\n                                                        name={\"dianCode\"}\n                                                        value={estadoData.dianCode}\n                                                        minLength={2}\n                                                        maxLength={10}\n                                                        required\n                                                        />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Código ISO <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_isoCode\"}\n                                                        name={\"isoCode\"}\n                                                        value={estadoData.isoCode}\n                                                        minLength={3}\n                                                        maxLength={5}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.Location\n    return {error, estado: state.Location.state, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerState, updateState, getState})(StateEdit)\n)\n\nStateEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/User/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/TemplateEdit/index.js",["1275","1276"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getTemplate, registersTemplate, updateTemplate} from \"../../store/template/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {GROUPS, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport useHookValue from \"../../components/mentions/useHookValue\";\nimport MultiMention from \"../../components/mentions/MultiMention\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\n\nconst TemplateEdit = (props) => {\n    const {onGetTemplate, template, onGetMentions, mentions} = props;\n    const [templateData, setTemplateData] = useState({_status: STATUS.ACTIVE});\n    const [dataMentions, setDataMentions] = useState([]);\n    const isEdit = props.match.params.id;\n    const [sourceValue, onSourceChange, onSourceAdd, setSourceValue] = useHookValue('');\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && onGetTemplate) {\n            onGetTemplate(props.match.params.id);\n            onGetMentions();\n        }\n    }, [onGetTemplate]);\n\n    //cargar la información de plantilla\n    useEffect(() => {\n        if (template.id && isEdit) {\n            setTemplateData({...template, _status: template.status});\n            setSourceValue(template.template);\n        }\n    }, [template]);\n\n    useEffect(() => {\n        if (mentions && mentions.length > 0) {\n            setDataMentions(mentions.map(m => ({id: '{{' + m.value + '}}', display: m.value,})))\n        }\n    }, [mentions]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({}, values, {status: values._status, template: sourceValue});\n        delete data._status;\n\n        if (!isEdit) {\n            props.onRegistersTemplate(data, props.history)\n        } else {\n            props.onUpdateTemplate(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/templates\" title={templateData.reference} item={\"Plantilla\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"12\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={templateData._status} name={\"_status\"}/>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Referencia <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_reference\"}\n                                                        name={\"reference\"}\n                                                        value={templateData.reference}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_description\"}\n                                                        name={\"description\"}\n                                                        value={templateData.description}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Contenido <span className=\"text-danger\">*</span></Label>\n                                                    <MultiMention\n                                                        value={sourceValue}\n                                                        data={dataMentions}\n                                                        onChange={onSourceChange}\n                                                        onAdd={onSourceAdd}\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading}/>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapTemplateToProps = state => {\n    const {error, loading, template} = state.Template\n    const {fieldOptions} = state.FieldOption\n    return {error, template, loading, mentions: fieldOptions}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onRegistersTemplate: (data, history) => dispatch(registersTemplate(data, history)),\n    onUpdateTemplate: (id, data, history) => dispatch(updateTemplate(id, data, history)),\n    onGetTemplate: (id) => dispatch(getTemplate(id)),\n    onGetMentions: (conditional = null, limit = 100, page) => dispatch(getFieldOptionByGroups([GROUPS.TEMPLATE_MENTIONS], limit, page)),\n})\n\nexport default withRouter(connect(mapTemplateToProps, mapDispatchToProps)(TemplateEdit))\n\nTemplateEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/OfficesEdit/index.js",["1277","1278","1279","1280","1281","1282"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {addOrderOffice, confirmOffice, deleteOffice, getOffice, printOfficeReport, registerOffice, resetPrintOfficeReport, updateOffice} from \"../../store/office/actions\";\nimport {FieldDate, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {DATE_FORMAT, formatDate, printPartOfPage} from \"../../common/utils\";\nimport {DELIVERY_METHODS, DELIVERY_TYPES, GROUPS, OFFICE_STATUS, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods, getOrdersByOffice} from \"../../store/order/actions\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderList from \"../Orders/orderList\";\nimport Conditionals from \"../../common/conditionals\";\nimport {fileOfficeTemplate} from \"../../helpers/backend_helper\";\n\nconst OfficeEdit = (props) => {\n    const {getOffice, office, deliveryMethods, orders, printReportData} = props;\n    const [officeData, setOfficeData] = useState({_status: STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryTypes, setDeliveryTypes] = useState(null);\n    const [deliveryMethod, setDeliveryMethod] = useState(null);\n    const [deliveryType, setDeliveryType] = useState(null);\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [ordersList, setOrdersList] = useState([]);\n    const [reportBody, setReportBody] = useState(null);\n\n\n    //carga inicial\n    useEffect(() => {\n        setDeliveryTypes([getEmptyOptions(), ...DELIVERY_TYPES.map(dt => ({label: dt.label, value: dt.id}))]);\n\n        if (isEdit && getOffice) {\n            getOffice(props.match.params.id);\n        }\n\n        onGetFieldOptions();\n        onGetDeliveryMethods();\n    }, [getOffice]);\n\n    useEffect(() => {\n        if (reportBody && reportBody.length > 0) {\n            let html = null;\n            reportBody.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printPartOfPage(html);\n        }\n    }, [reportBody]);\n\n    useEffect(() => {\n        if (orders && isEdit) {\n            setOrdersList(orders);\n        }\n    }, [orders]);\n\n    useEffect(() => {\n        if (!reportBody && printReportData && printReportData.data && printReportData.data.batch) {\n            setReportBody(printReportData.data.batch.body);\n            props.resetPrintOfficeReport();\n        }\n    }, [printReportData.data]);\n\n    useEffect(() => {\n        if (office.id && isEdit) {\n            setOfficeData({...office, _status: office.status});\n            setDeliveryType(office.type);\n            setDeliveryMethod(office.deliveryMethod);\n\n            /** GET ORDERS */\n            getOrdersByConditional();\n        }\n    }, [office]);\n\n    useEffect(() => {\n        console.log('deliveryMethods', deliveryMethods)\n        if (deliveryMethods) {\n\n            const list = deliveryMethods || [];\n            const ot = deliveryType + '';\n            setDeliveryMethodList([getEmptyOptions(), ...list.filter(op => (op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        }\n    }, [deliveryType, deliveryMethods]);\n\n    const handleValidSubmit = (event, values) => {\n        const selectedDelivery = deliveryMethods.filter(item => item.code === values.deliveryMethod.value)[0];\n        const data = {\n            ...values,\n            status: values._status,\n            deliveryMethod: selectedDelivery.id,\n            type: values.deliveryType.value,\n            batchDate: values.batchDate[0] ? formatDate(values.batchDate[0], DATE_FORMAT.ONLY_DATE) : null\n        };\n        if(values.batchDate && values.batchDate.length === 1){\n            data.batchDate= values.batchDate[0] ? formatDate(values.batchDate[0], DATE_FORMAT.ONLY_DATE) : null\n        }\n        if(values.batchDate && values.batchDate.length > 1){\n            data.batchDate= values.batchDate ? formatDate(values.batchDate, DATE_FORMAT.ONLY_DATE) : null\n        }\n        delete data._status;\n        delete data.deliveryType;\n\n        if (!isEdit) {\n            props.registerOffice(data, props.history)\n        } else {\n            props.updateOffice(props.match.params.id, data, props.history)\n        }\n    }\n\n    const getOrdersByConditional = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"office\", props.match.params.id, Conditionals.OPERATORS.EQUAL);\n        console.log(\"DEBUG - BUSCANDO ORDENES\", conditions.all());\n        onGetOrders(conditions);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este Despacho?',\n            description: 'Usted está eliminado este Despacho, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id, props.history)\n        });\n    };\n\n    const onConfirm = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea confirmar el despacho?',\n            description: 'Usted está confirmando este Despacho, al confirmar no podrá modificar nuevamente.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmOffice(id, props.history)\n        });\n    };\n    const onCloseModal = () => {\n        getOrdersByConditional();\n        setOpenOrdersModal(false);\n    };\n\n    const onAcceptModal = (conditionals) => {\n        getOrdersByConditional();\n        props.addOrderOffice(officeData.id, {id: 123}, conditionals, props.history);\n        setOpenOrdersModal(false);\n    };\n\n    const addOrders = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"status\", 3, Conditionals.OPERATORS.EQUAL);//IMPRESA\n        conditions.add(\"deliveryMethod.id\", office.deliveryMethod.id, Conditionals.OPERATORS.EQUAL);\n        conditions.add(\"orderDelivery.deliveryType\", office.type, Conditionals.OPERATORS.EQUAL);\n        conditions.add('office', '',  Conditionals.OPERATORS.NULL);\n        console.log('conditions', conditions);\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const onConfirmDelete = (id, history) => props.deleteOffice(id, history);\n    const onConfirmOffice = (id, history) => props.confirmOffice(id, history);\n    const onGetDeliveryMethods = (conditional = null, limit = 50, page) => props.getDeliveryMethods(conditional, limit, page);\n    const onGetFieldOptions = (conditional = null, limit = 500, page) => props.getFieldOptionByGroups([GROUPS.ORDERS_ORIGIN], limit, page);\n    const onGetOrders = (conditions) => props.getOrdersByOffice(conditions.all(), 200, 0);\n    const handleDownloadTemplate = (id) => fileOfficeTemplate('test.xls', id);\n    const printReport = (id) => {\n        setReportBody(null);\n        props.printOfficeReport(id);\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions}/>\n            </CustomModal>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/offices\" title={officeData.name} item={\"Despachos\"}/>\n                    {officeData.status && (\n                        <Row className=\"mb-2\">\n                            <Col md={12}>\n                                <div className={\"mb-3 float-md-start\"}>\n                                    <StatusField color={OFFICE_STATUS[officeData.status].color} className={\"font-size-14 mr-5\"}>\n                                        {OFFICE_STATUS[officeData.status].name}\n                                    </StatusField>\n                                    <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {officeData?.user?.name}</small>\n                                </div>\n                                <div className={\"mb-3 float-md-end\"}>\n                                    <div className=\"button-items\">\n\n                                        <Tooltip placement=\"bottom\" title=\"Imprimir reporte\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => printReport(officeData.id)}>\n                                                <i className={\"mdi mdi-printer\"}> </i> {printReportData.loading ? 'Generando...' : ''}\n                                            </button>\n                                        </Tooltip>\n                                        {!!(officeData?.type === 3 && DELIVERY_METHODS.INTERRAPIDISIMO === officeData?.deliveryMethod?.code) &&  (\n                                            <Tooltip placement=\"bottom\" title=\"Descargar Plantilla Excel\" aria-label=\"add\">\n                                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => handleDownloadTemplate(officeData.id)}>\n                                                    <i className={\"mdi mdi-file-excel\"}> </i>\n                                                </button>\n                                            </Tooltip>\n                                        )}\n                                        {officeData.status === 1 && (\n                                            <>\n                                                <Tooltip placement=\"bottom\" title=\"Eliminar despacho\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => onDelete(officeData.id)}>\n                                                        <i className={\"mdi mdi-delete\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Agregar pedidos\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => addOrders()}>\n                                                        <i className={\"mdi mdi-plus\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Finalizar\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onConfirm(officeData.id)}>\n                                                        <i className={\"mdi mdi-check\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            </>\n                                        )}\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    )}\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"4\" className=\"mb-2\">\n                                <Card>\n                                    <CardBody>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                                    <FieldDate\n                                                        name={\"batchDate\"}\n                                                        mode={DATE_MODES.SINGLE}\n                                                        defaultValue={officeData.batchDate}\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={officeData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Tipo <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        id={\"deliveryType\"}\n                                                        name={\"deliveryType\"}\n                                                        options={deliveryTypes}\n                                                        defaultValue={deliveryType}\n                                                        onChange={item => setDeliveryType(item.value)}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        id={\"deliveryMethod\"}\n                                                        name={\"deliveryMethod\"}\n                                                        options={deliveryMethodList}\n                                                        defaultValue={deliveryMethod?.code}\n                                                        onChange={item => setDeliveryMethod(item.value)}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        type={\"textarea\"}\n                                                        id={\"description\"}\n                                                        name={\"description\"}\n                                                        value={officeData.description}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading}/>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <h4 className=\"card-title text-info\"><i\n                                            className=\"uil-shopping-cart-alt me-2\"> </i> Pedidos en despacho</h4> <br/>\n                                        <Row>\n                                            {ordersList.sort((a, b) => a.id < b.id).map((order, k) => (\n                                                <Col md={4} className=\"\">\n                                                    <div key={k} className=\"order-box\">\n                                                        <div>\n                                                            <Link to={`/order/${order.id}`} className=\"text-muted\">\n                                                                <small className=\"font-weight-600\"><span className=\"text-info\">Pedido #: {order.id}</span></small>\n                                                            </Link>\n                                                            <Tooltip placement=\"bottom\" title={\"Peso\"} aria-label=\"add\">\n                                                                <small className=\"float-end text-muted\" style={{\"cursor\": \"default\"}}>\n                                                                    <i className=\"mdi mdi-weight-pound\"></i> {order.totalWeight}\n                                                                </small>\n                                                            </Tooltip>\n                                                            <br/>\n                                                            <small><span className=\"font-weight-600\">Cliente: </span> <small>{order.customer.name}</small></small>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                            ))}\n                                        </Row>\n                                        {!ordersList && (\n                                            <div className={\"m-1 pl-2\"}>No hay registros asociados</div>\n                                        )}\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {deliveryMethods, ordersByOffice} = state.Order\n    const {error, office, loading, printReport} = state.Office\n    return {error, office, loading, deliveryMethods: deliveryMethods.data, orders: ordersByOffice, printReportData: printReport}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {\n        apiError, registerOffice, deleteOffice, confirmOffice, updateOffice, getOffice,\n        getDeliveryMethods, getFieldOptionByGroups, addOrderOffice, getOrdersByOffice, printOfficeReport, resetPrintOfficeReport\n    })(OfficeEdit)\n)\n\nOfficeEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Offices/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/index.js",["1283","1284"],"import React, {useState, useEffect} from \"react\"\nimport {CardBody, Col, Container, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\nimport OrderCustomer from \"./orderCustomer\";\nimport OrderProducts from \"./orderProducts\";\nimport OrderCar from \"./orderCar\";\nimport OrderDeliveryOptions from \"./orderDeliveryOptions\";\nimport {resetCustomer} from \"../../../store/customer/actions\";\nimport {resetProduct} from \"../../../store/product/actions\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport OrderSummary from \"./orderSummary\";\nimport {registerOrder, resetCar} from \"../../../store/order/actions\";\nimport {DELIVERY_METHODS_PAYMENT_TYPES, DELIVERY_TYPES, PAYMENT_TYPES} from \"../../../common/constants\";\n\nconst CreateOrder = (props) => {\n    const {onResetOrder, car, onRegisterOrder} = props;\n    const [initComponent, setInitComponent] = useState(true);\n    const [isValidOrder, setIsValidOrder] = useState(false);\n\n    useEffect(() => {\n        if (initComponent) {\n            onResetOrder();\n            setInitComponent(false);\n        }\n    }, [initComponent]);\n\n    useEffect(() => {\n        if (car) {\n            const isValidCustomer = !!car.customer.id;\n            const isValidProducts = car.products.length > 0;\n            const isValidDeliveryOptions = car.deliveryOptions && car.deliveryOptions.origin && car.deliveryOptions.type && car.deliveryOptions.method;\n            setIsValidOrder(isValidCustomer && isValidProducts && isValidDeliveryOptions);\n        }\n    }, [car]);\n\n    const onCancelOrder = () => {\n        const dirty = car.customer.id || car.products.length > 0;\n\n        if (!dirty) {\n            resetOrder();\n            return;\n        }\n\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: '¿Seguro desea cancelar el pedido?',\n            id: '_OrderModal',\n            onConfirm: () => {\n                resetOrder();\n            }\n        });\n    }\n\n    const resetOrder = () => {\n        onResetOrder();\n        props.history.push(\"/orders\");\n    }\n\n    const onCreateOrder = () => {\n        //console.log('Car', car);\n        const order = {\n            customer: car.customer.id,\n            deliveryMethod: car.deliveryOptions.method,\n            deliveryCost: car.deliveryOptions.cost,\n            chargeOnDelivery: car.deliveryOptions.type === 3,\n            origen: car.deliveryOptions.origin,\n            deliveryType: parseInt(car.deliveryOptions.type),\n            products: car.products.map(prod => ({\n                id: prod.origin.id,\n                productSize: prod.sizeId,\n                quantity: prod.quantity,\n                discountPercentage: prod.discountPercentage,\n            }))\n        };\n\n        if(DELIVERY_METHODS_PAYMENT_TYPES.includes(order.deliveryMethod)){\n            order.piecesForChanges = parseInt(car.deliveryOptions.pieces);\n            order.paymentMode = car.deliveryOptions.paymentType === PAYMENT_TYPES.CASH? 1:2;\n        } else {\n            order.deliveryLocality = car.deliveryOptions.deliveryLocality;\n        }\n\n        onRegisterOrder(order, props.history);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/orders\" title=\"Crear pedido\" item={\"Pedido\"}/>\n                    <Card className=\"mb-3\">\n                        <CardBody>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderCustomer/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderProducts/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderCar/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderDeliveryOptions/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderSummary />\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12} className=\"text-center\">\n                                    <div className=\"btn-group\">\n                                        <button type=\"button\" className=\"btn btn-light text-danger\" onClick={() => onCancelOrder()}>\n                                            Cancelar\n                                        </button>\n                                        <button type=\"button\" className=\"btn btn-primary\" disabled={!isValidOrder} onClick={() => onCreateOrder()}>\n                                            <i className=\"uil uil-shopping-cart-alt me-2\"> </i> Crear pedido\n                                        </button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {car, loading} = state.Order\n    return {car, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetOrder: () => {\n        dispatch(resetCustomer());\n        dispatch(resetProduct());\n        dispatch(resetCar());\n    },\n    onRegisterOrder: (order, history) => dispatch(registerOrder(order, history))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CreateOrder)\n)\n\nCreateOrder.propTypes = {\n    onResetOrder: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/PaymentsEdit/index.js",["1285","1286"],"/Users/ramon/Repositories/lucy-moie/src/pages/Payments/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/FooterUsers.js",["1287","1288"],"import React, {useEffect, useState} from \"react\"\nimport {countUsersOrders} from \"../../helpers/service\";\nimport {connect} from \"react-redux\";\nimport {priceFormat} from \"../../common/utils\";\nimport avatar3 from \"../../assets/images/users/avatar-3.jpg\";\n\nconst FooterUsers = ({data}) => {\n\n    const [loading, setLoading] = useState(false)\n    const [users, setUsers] = useState([])\n    const [mainUser, setMainUser] = useState({})\n\n    useEffect(() => {\n        findData();\n    }, [data])\n\n    const findData = () => {\n        setLoading(true);\n        countUsersOrders().then(resp => {\n            setLoading(false);\n            if (resp && resp.data && resp.data.length > 0) {\n                let u = [];\n                resp.data.filter(o => o.user && o.user.id).forEach(o => u.push({name: o.user.name, sales: o.origen, amount: priceFormat(o.totalAmount), image: avatar3}));\n\n                //TO TEST\n                [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(item => {\n                    const user = {...u[0]};\n                    user.image = \"https://picsum.photos/200/300?random=\" + item;\n                    user.sales = item;\n                    u.push(user);\n                });\n\n                u = u.sort((a, b) => a.sales === b.sales ? 0 : (a.sales > b.sales) ? 1 : -1);\n\n                if (u.length > 6) {\n                    u.splice(6);\n                }\n                setUsers(u);\n                if (u.length > 0) setMainUser(u[u.length - 1]);\n            }\n        });\n    }\n    return (\n        <React.Fragment>\n            {users.map((user, k) => (\n                <div key={k} style={{display: 'flex', alignItems: 'center', margin: '0 5px'}}>\n                    <img src={user.image} className=\"rounded-circle header-profile-user\" alt=\"user-pic\"/>\n                    <div className=\"flex-1\">\n                        <small className=\"mt-0 mb-1\">{k === (users.length - 1) && <i className={\"mdi mdi-crown mr-1 text-warning\"}> </i>}{user.name} </small>\n                        <br/>\n                        <small><small className=\"m-0\">Pedidos: <b>{user.sales}</b></small></small>\n                    </div>\n                </div>\n            ))}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\nconst mapDispatchToProps = dispatch => ({\n    countUsersOrders,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(FooterUsers)\n\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/UsersSalesDropdown.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/actions.js",["1289"],"import {\n    ADD_ORDER_BILL,\n    ADD_ORDER_BILL_FAILED,\n    ADD_ORDER_BILL_SUCCESS,\n    BILL_LIST_REFRESH,\n    CONFIRM_BILL,\n    CONFIRM_BILL_FAILED,\n    CONFIRM_BILL_SUCCESS,\n    DELETE_BILL,\n    DELETE_BILL_FAILED,\n    DELETE_BILL_SUCCESS,\n    GENERATE_CREDIT_NOTE,\n    GENERATE_CREDIT_NOTE_FAILED,\n    GENERATE_CREDIT_NOTE_SUCCESS,\n    GENERATE_REPORT_FAILED,\n    GENERATE_REPORT_REQUEST,\n    GENERATE_REPORT_RESTART,\n    GENERATE_REPORT_SUCCESS,\n    GET_BILL,\n    GET_BILL_FAILED,\n    GET_BILL_SUCCESS,\n    GET_BILLS,\n    GET_BILLS_FAILED,\n    GET_BILLS_SUCCESS,\n    QUERY_BILLS,\n    QUERY_BILLS_FAILED,\n    QUERY_BILLS_SUCCESS,\n    REGISTER_BILL,\n    REGISTER_BILL_FAILED,\n    REGISTER_BILL_SUCCESS,\n    RESET_BILL,\n    UPDATE_BILL,\n    UPDATE_BILL_FAILED,\n    UPDATE_BILL_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetBill = () => ({\n    type: RESET_BILL,\n})\n\nexport const getBills = (conditional, limit, offset) => ({\n    type: GET_BILLS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getBillsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getBills(conditions.all(), ids.length, offset);\n}\n\nexport const getBillsSuccess = (data, meta) => ({\n    type: GET_BILLS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getBillsFailed = error => ({\n    type: GET_BILLS_FAILED,\n    payload: error,\n})\n\nexport const getBill = id => ({\n    type: GET_BILL,\n    id\n})\n\nexport const getBillSuccess = data => ({\n    type: GET_BILL_SUCCESS,\n    payload: data,\n})\n\nexport const getBillFailed = error => ({\n    type: GET_BILL_FAILED,\n    payload: error,\n})\n\nexport const registerBill = (data) => {\n    return {\n        type: REGISTER_BILL,\n        payload: {data},\n    }\n}\n\nexport const registerBillSuccess = data => {\n    return {\n        type: REGISTER_BILL_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const registerBillFailed = data => {\n    return {\n        type: REGISTER_BILL_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateBill = (id, data, history) => {\n    return {\n        type: UPDATE_BILL,\n        payload: {id, data, history},\n    }\n}\n\nexport const updateBillSuccess = data => {\n    return {\n        type: UPDATE_BILL_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateBillFail = error => {\n    return {\n        type: UPDATE_BILL_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteBill = (id, history) => ({\n    type: DELETE_BILL,\n    payload: {id, history}\n})\n\nexport const deleteBillSuccess = () => ({\n    type: DELETE_BILL_SUCCESS\n})\n\nexport const deleteBillFailed = error => ({\n    type: DELETE_BILL_FAILED,\n    payload: error,\n})\n\nexport const confirmBill = (id, history) => ({\n    type: CONFIRM_BILL,\n    payload: {id, history}\n})\n\nexport const confirmBillSuccess = () => ({\n    type: CONFIRM_BILL_SUCCESS\n})\n\nexport const confirmBillFailed = error => ({\n    type: CONFIRM_BILL_FAILED,\n    payload: error,\n})\n\n\nexport const countBillByStatus = () => {\n    const params = {operation: 'id::count', group: \"status\"};\n    return queryBills(params, 'statusGroup');\n}\n\nexport const queryBills = (params, node) => ({\n    type: QUERY_BILLS,\n    params: params,\n    node: node,\n})\nexport const queryBillsFailed = error => ({\n    type: QUERY_BILLS_FAILED,\n    payload: error,\n})\nexport const queryBillsSuccess = (data, meta, node) => ({\n    type: QUERY_BILLS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const addOrderBill = (id, data, conditional, history) => {\n    return {\n        type: ADD_ORDER_BILL,\n        payload: {id, data, conditional, history},\n    }\n}\n\nexport const addOrderBillSuccess = data => {\n    return {\n        type: ADD_ORDER_BILL_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const addOrderBillFailed = data => {\n    return {\n        type: ADD_ORDER_BILL_FAILED,\n        payload: data,\n    }\n}\n\nexport const refreshList = () => {\n    return {type: BILL_LIST_REFRESH}\n}\n\nexport const createCreditNote = id => ({\n    type: GENERATE_CREDIT_NOTE,\n    id\n})\nexport const createCreditNoteSuccess = () => {\n    return {\n        type: GENERATE_CREDIT_NOTE_SUCCESS\n    }\n}\nexport const createCreditNoteFailed = () => {\n    return {\n        type: GENERATE_CREDIT_NOTE_FAILED\n    }\n}\n\n\nexport const generateReportRestart = () => {\n    return {\n        type: GENERATE_REPORT_RESTART\n    }\n}\nexport const generateReport = (data) => {\n    return {\n        type: GENERATE_REPORT_REQUEST,\n        data\n    }\n}\nexport const generateReportSuccess = (data) => {\n    return {\n        type: GENERATE_REPORT_SUCCESS,\n        data\n    }\n}\nexport const generateReportFailed = (error) => {\n    return {\n        type: GENERATE_REPORT_FAILED,\n        error\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/constants.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Modal/ConfirmationModal.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/utils.js",["1290","1291"],"import {BOOLEAN_STRING} from \"./constants\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport {baseImagePath, baseImagePathNew} from \"../helpers/api_helper\";\nimport {showMessage} from \"../components/MessageToast/ShowToastMessages\";\nimport userImage from \"../assets/images/users/user.png\"\n\nexport const BOOLEAN_STRING_OPTIONS = [\n    {label: '-', value: null},\n    {label: BOOLEAN_STRING.YES, value: true},\n    {label: BOOLEAN_STRING.NO, value: false}\n];\n\nexport const YES_NO_OPTIONS = [\n    {label: '-', value: null},\n    {label: 'Si', value: true},\n    {label: 'No', value: false}\n    ];\n\nexport const STATUS_OPTIONS = [\n    {label: '-', value: null},\n    {label: \"Activo\", value: true},\n    {label: \"Inactive\", value: false}\n];\n\nexport const DATE_FORMAT = {\n    FULL_DATE: 'FULL_DATE',\n    ONLY_DATE: 'ONLY_DATE',\n    ONLY_TIME: 'ONLY_TIME'\n};\n\nexport const isValidOption = (options, option) => {\n    return options.filter(o => o.value !== null).map(o => o.value).includes(option);\n};\n\nexport const isValidObject = (object) => {\n    return undefined !== object && null !== object;\n};\n\nexport const isValidString = (str) => {\n    return isValidObject(str) && \"\" !== str;\n};\n\nexport const priceFormat = (amount = 0, currency = \"\", decimalWithCommas = true) => {\n\n    if (amount === 0 || amount === \"\" || amount === undefined) {\n        return \"0.00\";\n    }\n\n    let amountRender = (parseFloat(amount).toFixed(2));\n    if (decimalWithCommas) {\n        amountRender = numberWithCommas(amountRender);\n        amountRender = `${currency} ${amountRender}`;\n    }\n    return amountRender;\n}\n\nconst numberWithCommas =(x) =>{\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nexport const formatDate =(date, type = DATE_FORMAT.FULL_DATE) =>{\n    try {\n        switch(type){\n            case DATE_FORMAT.FULL_DATE:\n                return moment(date, moment.ISO_8601).format('DD-MM-YYYY HH:mm:ss');\n            case DATE_FORMAT.ONLY_DATE:\n                return moment(date, moment.ISO_8601).format('YYYY-MM-DD');\n            case DATE_FORMAT.ONLY_TIME:\n                return moment(date, moment.ISO_8601).format('HH:mm:ss');\n            default:\n                return moment(date, moment.ISO_8601).format('DD-MM-YYYY HH:mm:ss');\n        }\n        return moment(date, moment.ISO_8601).format('DD-MM-YYYY HH:mm:ss');\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\nexport const formatDateToServer =(date) =>{\n    try {\n        return moment(date).format(\"YYYY-MM-DD[T]HH:mm:ss\");\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\nexport const getMoment =() =>{\n    try {\n        return moment();\n    }catch (e){\n        console.log(e)\n    }\n    return \"\";\n}\n\nexport const getImageByQuality = (imgData, quality) => {\n    if(!imgData) return null;\n\n    const path = imgData.path && imgData.path.includes('uploads') ? baseImagePathNew : baseImagePath;\n\n    let result = imgData.path;\n    if (!imgData.thumbs) {\n        return `${path}${result}`;\n    }\n    try {\n        const thumbs = JSON.parse(imgData.thumbs);\n        if (thumbs[quality]) {\n            result = thumbs[quality];\n        }\n    } catch (e) {\n        console.log(e);\n    }\n    return `${path}${result}`;\n}\nexport const getImagePath = (photoPath) => {\n    if (!photoPath) return userImage;\n    const basePath = photoPath.includes('uploads') ? baseImagePathNew : baseImagePath;\n    return `${basePath}${photoPath}`;\n}\n\nexport const getErrorMessage = (error) => {\n    if (error.response) {\n        return error.response.data?.error || \"Se ha producido un error\";\n    } else {\n        return \"Se ha producido un error\";\n    }\n}\nexport const parseJson = (data) => {\n    let result = null;\n    try {\n        return JSON.parse(data)\n    }catch (e){\n        console.error('parseJson', e);\n    }\n    return result;\n}\n\nexport const buildNumericOptions = (qty, sk=1, start=0) => {\n    const valueList = [];\n    for (let i = start; i <= qty;) {\n        valueList.push({label: i, value: i});\n        i+= sk;\n    }\n    return valueList;\n}\n\n//REF: https://komsciguy.com/js/a-better-way-to-copy-text-to-clipboard-in-javascript/\nexport const  copyToClipboard =(text)=> {\n    const listener = function(ev) {\n        ev.preventDefault();\n        ev.clipboardData.setData('text/plain', text);\n        showMessage.success(\"Copiado\");\n    };\n    document.addEventListener('copy', listener);\n    document.execCommand('copy');\n    document.removeEventListener('copy', listener);\n}\n\nexport const printPartOfPage=(htmlToPrint) => {\n    const iframeId = new Date().getTime();\n    let pri\n    if (document.getElementById(iframeId)) {\n        pri = document.getElementById(iframeId).contentWindow\n    } else {\n        const iframe = document.createElement('iframe')\n        iframe.setAttribute('title', iframeId)\n        iframe.setAttribute('id', iframeId)\n        iframe.setAttribute('style', 'height: 0px; width: 0px; position: absolute;')\n        document.body.appendChild(iframe)\n        pri = iframe.contentWindow\n    }\n    pri.document.open()\n    pri.document.write(htmlToPrint)\n    pri.document.close()\n    pri.focus()\n    pri.print()\n}\n\nexport const threeDots = (text, length) => {\n    if (text.trim().length > length) {\n        return text.trim().substr(0, length).trim() + \"...\";\n    }\n    return text;\n}\nexport const sortArray = (a,b, asc) => {\n    if(a === b){\n        return 0;\n    }\n    if(asc){\n        return a.id < b.id ? -1:1\n    }\n    return a.id > b.id ? 1:-1\n}\n\nexport const b64toBlob = (b64Data, contentType='', sliceSize=512) => {\n    const byteCharacters = atob(b64Data);\n    const byteArrays = [];\n\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        const byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n    }\n\n    const blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/Breadcrumb.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/NoDataIndication.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CategoriesPieChart.js",["1292","1293"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {customerCategoryStats, customerOrdersStats} from \"../../helpers/service\";\nimport moment from \"moment\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport PieChart from \"../../components/Common/PieChart\";\n\nconst CategoriesPieChart = ({customerId}) => {\n\n    const [categoryChart, setCategoryChart] = useState({series: [], labels:[]});\n\n    useEffect(() => {\n        if (customerId) {\n            customerCategoryStats(customerId, moment()).then(resp => {\n                const chartData = {series: [], labels:[]};\n                if(resp){\n                    resp.forEach(pc => {\n                        chartData.series.push(pc.qty);\n                        chartData.labels.push(pc.name);\n                    })\n                }\n                setCategoryChart(chartData);\n            });\n        }\n    }, [customerId]);\n\n    return (\n        <>\n            <h4 className=\"card-title text-info\">Categorias</h4>\n            <div style={{background: '#f6f6f6', height: '100%'}}>\n                <PieChart data={categoryChart}/>\n            </div>\n        </>\n    );\n}\n\nCategoriesPieChart.propTypes = {\n    customerId: PropTypes.number.isRequired\n}\n\nexport default CategoriesPieChart;\n","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/OrdersPieChart.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/Observations.js",["1294","1295","1296"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Col, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CustomizedTimeline from \"../../pages/CustomerEdit/TimeLine\";\nimport ButtonSubmit from \"./ButtonSubmit\";\nimport {ConfirmationModalAction} from \"../Modal/ConfirmationModal\";\nimport {threeDots} from \"../../common/utils\";\nimport {deleteComment, getCommentsByEntity, registerComment} from \"../../store/comment/actions\";\nimport {findFieldOptionByGroup} from \"../../helpers/service\";\n\nconst Observations = (props) => {\n\n    const {user, observations, onGetObservations, onCreateObservation, onDeleteObservation, onGetCommentSuggested, entitySuggested, entity, entityId} = props;\n    const [observation, setObservation] = useState(undefined);\n    const [observationsSuggested, setObservationsSuggested] = useState([]);\n    const [observationList, setObservationList] = useState([]);\n\n    useEffect(() => {\n        onGetObservations(entity, entityId);\n        if(entitySuggested) onGetCommentSuggested(entitySuggested).then(data => setObservationsSuggested(data.map(item => item.value)));\n    }, [entityId]);\n\n    useEffect(() => {\n        if (observations && observations.length > 0) {\n            if(observations.some(o => o.entity === entity)) setObservationList(observations.filter(o => o.entity === entity));\n        }else{\n            setObservationList([]);\n        }\n    }, [observations]);\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este registro?',\n            description: 'Usted está eliminado este registro, una vez eliminado no podrá ser recuperado.',\n            id: '_observationsModal',\n            onConfirm: () => {\n                const item = observationList.find(cl => cl.id === id);\n                if(onDeleteObservation) onDeleteObservation(item);\n            }\n        });\n    }\n\n    const onAdd = (comment) => {\n        if(onCreateObservation) onCreateObservation(entityId, {entity: entity, comment: comment});\n    }\n\n    const handleValidSubmit = (event) => {\n        if (!observation || observation === '') return;\n        setObservation(undefined);\n        event.target.reset();\n        onAdd(observation);\n    }\n\n    return (\n        <React.Fragment>\n            <Card id={''} className=\"p-3\">\n                {(observationsSuggested && observationsSuggested.length > 0) && (\n                    <Row>\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\">Observaciones sugeridas</h4>\n                        </Col>\n                        <Col md={12}>\n                            {observationsSuggested.map((suggest, k) => (\n                               <span key={k}>\n                                   <Tooltip placement=\"bottom\" title={suggest} aria-label=\"add\">\n                                       <button className=\"btn bg-light m-1\" onClick={() => onAdd(suggest)}>\n                                        <span className=\"font-sm m-0\"><i className={\"uil uil-star\"}> </i> &nbsp;\n                                            {threeDots(suggest, 30)}\n                                        </span>\n                                       </button>\n                                   </Tooltip>\n                               </span>\n                            ))}\n                        </Col>\n                        <hr/>\n                    </Row>\n                )}\n                <Row>\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\">Agregar observación</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col md={10}>\n                                    <input id={\"observation\"} name={\"observation\"} className=\"form-control\" value={observation} onChange={(e) => setObservation(e.target.value)} required/>\n                                </Col>\n                                <Col md={2}>\n                                    <ButtonSubmit loading={props.loading} disabled={!observation}/>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </Col>\n                    <Col md={12}>\n                        <hr/>\n                        <h4 className=\"card-title text-info\">Observaciones</h4>\n                    </Col>\n                    <Col md={12} style={{maxHeight: '500px', overflowY: 'auto'}}>\n                        {observationList.length > 0 ? (<CustomizedTimeline data={observationList} onDelete={onDelete}/>) : \"No hay observaciones\"}\n                    </Col>\n                </Row>\n            </Card>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {user} = state.Login\n    const {comments} = state.Comment\n    return {user, observations: comments}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetObservations: (entity, idRelated) => dispatch(getCommentsByEntity(entity, idRelated)),\n    onCreateObservation: (entityId, comment) => dispatch(registerComment(entityId, comment)),\n    onDeleteObservation: (comment) => dispatch(deleteComment(comment)),\n    onGetCommentSuggested: findFieldOptionByGroup,\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Observations)\n)\n\nObservations.propTypes = {\n    entitySuggested: PropTypes.string,\n    entity: PropTypes.string.isRequired,\n    entityId: PropTypes.number.isRequired,\n}\n","/Users/ramon/Repositories/lucy-moie/src/helpers/service.js",["1297","1298","1299","1300","1301","1302","1303"],"import {fetchDataApi} from \"./backend_helper\";\nimport Conditionals from \"../common/conditionals\";\nimport {showMessage} from \"../components/MessageToast/ShowToastMessages\";\nimport {DEFAULT_PAGE_LIMIT} from \"../common/pagination\";\nimport * as url from \"./url_helper\";\nimport {formatDateToServer, getMoment} from \"../common/utils\";\n\nexport const getData = (urlStr, name, conditionalOptions, defaultConditions) => {\n    const conditions = new Conditionals.Condition;\n    if (defaultConditions) {\n        defaultConditions.forEach(dc => conditions.add(dc.field, dc.value, dc.operator));\n    }\n    if (name) {\n        if (conditionalOptions) {\n            conditions.add(conditionalOptions.fieldName, name, conditionalOptions.operator);\n        } else {\n            conditions.add('name', name, Conditionals.OPERATORS.LIKE);\n        }\n    }\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, DEFAULT_PAGE_LIMIT, 0);\n    return fetchDataApi(urlStr, query);\n}\n\nexport const findOrders = (conditions, limit = null, offset = null) => {\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n    return fetchDataApi(url.ORDERS, query);\n}\n\nexport const showResponseMessage = (response, message, errorMessage) => {\n    if (response.status === 200 || response.code === 200) {\n        showMessage.success(message);\n    } else {\n        showMessage.error(errorMessage || message);\n    }\n}\n\nexport const hasCustomerOpenOrders = (customerId) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('status', '1::4', Conditionals.OPERATORS.BETWEEN);\n    conditions.add('customer', customerId, Conditionals.OPERATORS.EQUAL);\n    return findOrders(conditions, 1);\n}\n\nexport const countCustomersByStatus = () => {\n    return countByStatus(url.CUSTOMER);\n}\n\nexport const countProductsByStatus = () => {\n    return countByStatus(url.PRODUCT);\n}\n\nconst countByStatus = (urlString) => {\n    const query = {};\n    query.operation = 'id::count';\n    query.group = 'status'\n\n    return fetchDataApi(urlString, Conditionals.urlSearchParams(query)).then(resp => {\n        const group = {};\n        resp.data.forEach(item => group[!!item.status ? 1 : 0] = item.id);\n        return group;\n    });\n}\n\nexport const countMayoristas = () => {\n    const query = {};\n    query.operation = 'id::count';\n    query.group = 'isMayorist'\n\n    return fetchDataApi(url.CUSTOMER, Conditionals.urlSearchParams(query)).then(resp => {\n        const group = {};\n        resp.data.forEach(item => group[item.isMayorist ? 1 : 0] = item.id);\n        return group;\n    });\n}\n\nexport const countUsersOrders = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('status', '1::5', Conditionals.OPERATORS.BETWEEN);\n    // conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n\n    const query = {};\n    query.conditional = Conditionals.getConditionalFormat(conditions.all());\n    query.operation = 'origen::count,totalAmount::sum';\n    query.group = 'user_id'\n\n    return fetchDataApi(url.ORDERS, Conditionals.urlSearchParams(query));\n}\n\nexport const statsCustomerRegisteredToday = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    return statsRegistered(url.CUSTOMER, conditions);\n}\n\nexport const statsCustomerRegistered = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt',formatDateToServer(getMoment().isoWeekday(1)), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    return statsRegistered(url.CUSTOMER, conditions);\n}\n\nexport const statsRegistered = (urlString, conditions) => {\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = {conditional: cond, operation: 'id::count'};\n\n    return fetchDataApi(urlString, Conditionals.urlSearchParams(query)).then(resp => {\n        const data = {count: 0};\n        if(resp.data && resp.data.length > 0){\n            data.count = resp.data[0].id;\n        }\n        return data;\n    });\n}\n\nexport const getCatalogBatchRequest = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    conditions.add('type', 2, Conditionals.OPERATORS.EQUAL);\n    conditions.add('status', 2, Conditionals.OPERATORS.EQUAL);\n\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, 15);\n    return fetchDataApi(url.BATCH_REQUEST, Conditionals.urlSearchParams(query));\n}\n\nexport const findFieldOptionByGroup = (group, limit = null, offset = null) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('groups', group, Conditionals.OPERATORS.EQUAL);\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n    return fetchDataApi(url.FIELD_OPTIONS, query).then(resp => (resp.data || []));\n}\n\nexport const customerOrdersStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/order_stats?beforeDate=${date.format(\"YYYY-MM-DD\")}`, {});\n}\nexport const customerProductStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/stats?beforeDate=${date.format(\"YYYY-MM-DD\")}`, {});\n}\nexport const customerCategoryStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/stats?beforeDate=${date.format(\"YYYY-MM-DD\")}&categoryMode=true`, {});\n}","/Users/ramon/Repositories/lucy-moie/src/common/pagination.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderList.js",["1304","1305","1306","1307","1308"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {TableFilter} from \"../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../common/converters\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport orderColumns from \"./orderColumn\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {doConciliation, doPrintBatchRequest, getOrders} from \"../../store/order/actions\";\nimport OrderEdit from \"./orderEdit\";\nimport Conditionals from \"../../common/conditionals\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderConciliationForm from \"./orderConciliationsForm\";\nimport ConciliationReportForm from \"../Reports/ConciliationReportForm\";\n\nconst OrderList = props => {\n    const {orders, meta, onGetOrders, refresh, customActions, conditionals, showAsModal, conciliation} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [orderSelected, setOrderSelected] = useState(null);\n    const [ordersSelected, setOrdersSelected] = useState([]);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [filterable, setFilterable] = useState(true);\n    const [conciliationView, setConciliationView] = useState(null);\n    const [openConfirmConciliationModal, setOpenConfirmConciliationModal] = useState(false);\n    const [openReportConciliationModal, setOpenReportConciliationModal] = useState(false);\n    const [columns, setColumns] = useState(orderColumns(setOrderSelected, showAsModal, false));\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        if (null !== refresh) onGetOrders(getConditionals(), DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }, [refresh])\n\n    useEffect(() => {\n        if (null !== conciliationView) {\n            onFilterAction(conditional);\n        }\n        setColumns(orderColumns(setOrderSelected, showAsModal, conciliationView));\n    }, [conciliationView])\n\n    useEffect(() => {\n        if (conciliationView && !conciliation.loading && conciliation.success) {\n            setConciliationView(false);\n        }\n    }, [conciliation])\n\n    useEffect(() => {\n        onGetOrders(getConditionals());\n        if (customActions) {\n            setFilterable(false);\n        }\n    }, [onGetOrders])\n\n    useEffect(() => {\n        setStatesList(orders)\n        console.log('orders', orders)\n    }, [orders])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetOrders(getConditionals(), DEFAULT_PAGE_LIMIT, p * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        let conditionals = condition || [];\n        handleConciliateStatus(conditionals);\n        setConditional(conditionals);\n        onGetOrders(conditionals, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const printOrders = () => {\n        let conditionals = conditional || [];\n\n        if (ordersSelected && ordersSelected.length === 1) {\n            conditionals.push({field: 'id', value: ordersSelected[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if (ordersSelected && ordersSelected.length > 1) {\n            conditionals.push({field: 'id', value: ordersSelected.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n\n        props.onPrintBatchRequest(conditionals);\n    }\n\n    const handleConciliateStatus = (conditionals) => {\n        let statusFiltered = conditionals.find(c => c.field === 'status');\n        let statusToConciliate = 4;//Enviada --> 4\n        if (conciliationView) {\n            if (statusFiltered) {\n                statusFiltered.value = statusToConciliate;\n            } else {\n                conditionals.push({field: 'status', value: statusToConciliate, operator: Conditionals.OPERATORS.EQUAL});\n            }\n        } else if (statusFiltered && statusFiltered.value === statusToConciliate) {\n            conditionals.splice(conditionals.indexOf(statusFiltered), 1);\n        }\n    }\n\n    const showConciliationView = () => {\n        setOrdersSelected([]);\n        setConciliationView(true);\n    }\n    const hideConciliationView = () => {\n        setOrdersSelected([]);\n        setConciliationView(false);\n    }\n\n    const sendToConciliation = () => {\n        props.onConciliation(ordersSelected, props.history);\n    }\n\n    const getConditionals = () => {\n        const cond = conditional || [];\n        const extConditions = conditionals || [];\n        return [...cond, ...extConditions];\n    }\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        onSelect: (row) => {\n            let list = [...ordersSelected]\n\n            const index = list.indexOf(row.id);\n            if(index >= 0){\n                list.splice(index, 1);\n            } else{\n                list.push(row.id);\n            }\n            setOrdersSelected(list);\n        },\n        onSelectAll: (rows) => {\n            setOrdersSelected([]);\n        }\n    };\n\n    const onPressAction = () => {\n        let conditionals = conditional || [];\n\n        if (ordersSelected && ordersSelected.length === 1) {\n            conditionals.push({field: 'id', value: ordersSelected[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if (ordersSelected && ordersSelected.length > 1) {\n            conditionals.push({field: 'id', value: ordersSelected.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n\n        /** TODO -- envio la condicion para procesar en orden superior */\n        props.customActions(conditionals);\n    };\n\n    return (\n        <Row>\n            <CustomModal title={\"Confirmar Conciliados\"} size=\"lg\" showFooter={false} isOpen={openConfirmConciliationModal} onClose={() => setOpenConfirmConciliationModal(false)}>\n                <OrderConciliationForm onCloseModal={() => setOpenConfirmConciliationModal(false)}/>\n            </CustomModal>\n            <CustomModal title={\"Generar reporte conciliados\"} showFooter={false} isOpen={openReportConciliationModal} onClose={() => setOpenReportConciliationModal(false)}>\n                <ConciliationReportForm onCloseModal={() => setOpenReportConciliationModal(false)}/>\n            </CustomModal>\n\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter && filterable}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter && filterable ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={4}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\">\n                                                                <i className=\"uil-shopping-cart-alt me-2\"></i>\n                                                                {conciliationView ? `Conciliar pedidos (${ordersSelected.length})` : 'Pedidos'}\n                                                            </h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                {customActions ? <Col md={8}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                            <Button onClick={() => onPressAction()} color=\"success\">\n                                                                <i className={\"mdi mdi-check\"}> </i> &nbsp; Aceptar\n                                                            </Button>\n                                                        </Tooltip>\n                                                    </div>\n                                                </Col> : (\n                                                    <Col md={8}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            {!conciliationView && (\n                                                                <>\n                                                                    <Tooltip placement=\"bottom\" title=\"Impresión multiple\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => printOrders()} disabled={ordersSelected.length === 0 && (!conditional || conditional.length === 0)}>\n                                                                            <i className=\"mdi mdi-printer\"> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                  {/*  <Tooltip placement=\"bottom\" title=\"Conciliar pedidos\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => showConciliationView()}>\n                                                                            <i className=\"mdi mdi-list-status\"> </i>\n                                                                        </Button>\n                                                                    </Tooltip>*/}\n                                                                    <Tooltip placement=\"bottom\" title=\"Confirmar Conciliados\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => setOpenConfirmConciliationModal(true)}>\n                                                                            <i className=\"mdi mdi-check\"> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                    <Tooltip placement=\"bottom\" title=\"Generar reporte conciliados\" aria-label=\"add\">\n                                                                        <Button onClick={() => setOpenReportConciliationModal(true)}>\n                                                                            <i className={\"mdi mdi-file\"}> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                    <Link to={\"/orders/create\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                        <i className=\"mdi mdi-plus\"> </i> Crear pedido\n                                                                    </Link>\n                                                                </>\n                                                            )}\n\n                                                            {conciliationView && (\n                                                                <>\n                                                                    <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => sendToConciliation()} disabled={ordersSelected.length === 0}>\n                                                                            {!conciliation.loading && <i className=\"mdi mdi-check\"> </i>}\n                                                                            {conciliation.loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                                                            Aceptar\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                    <Tooltip placement=\"bottom\" title=\"Cancelar\" aria-label=\"add\">\n                                                                        <Button color=\"default\" onClick={() => hideConciliationView(false)}>\n                                                                            Cancelar\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            selectRow={selectRowProp}\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n            {orderSelected && (<OrderEdit orderId={orderSelected} showOrderOverlay={true} onCloseOverlay={() => setOrderSelected(null)}/>)}\n        </Row>\n    )\n}\n\nOrderList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh, conciliation} = state.Order\n    return {\n        orders,\n        loading,\n        meta,\n        refresh,\n        conciliation\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrders: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getOrders(conditional, limit, page)),\n    onPrintBatchRequest: (conditional) => dispatch(doPrintBatchRequest(conditional)),\n    onConciliation: (ordersSelected) => dispatch(doConciliation(ordersSelected)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OrderList)\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonSubmit.js",["1309"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Spinner} from \"reactstrap\";\nimport {Button} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonSubmit = props => {\n  return (\n      <Button color=\"primary\" type=\"submit\" disabled={props.loading || props.disabled}>\n          {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"primary\"/>}\n          {props.name? props.name:'Guardar'}\n      </Button>\n  )\n}\n\nButtonSubmit.propTypes = {\n    name: PropTypes.string,\n    iconClass: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool\n}\n\nexport default ButtonSubmit\n","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductPublish.js",["1310","1311","1312","1313","1314","1315","1316","1317","1318"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {CardBody, Col, Label, Row, Spinner} from \"reactstrap\"\nimport {FieldNumber, FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport {connect} from \"react-redux\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {updateProduct} from \"../../store/product/actions\";\nimport {STATUS} from \"../../common/constants\";\nimport {Button} from \"@material-ui/core\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {map} from \"lodash\";\n\nconst ProductPublish = props => {\n    const {product, updateProduct} = props\n    const [productData, setProductData] = useState(product);\n    const [discount, setDiscount] = useState(0);\n    const [selectValues, setSelectValues] = useState([]);\n\n    useEffect(() => {\n        fillValues();\n    }, [product])\n\n    const handleValidSubmit = (event, values) => {\n        const data = {\n            published: values.published === true,\n            discount: Number.parseFloat(discount)\n        };\n        updateProduct(product.id, data, props.history);\n    }\n\n    const fillValues = () => {\n        if (selectValues.length === 0) {\n            const valueList = [];\n            for (let i = 5; i <= 100;) {\n                valueList.push({label: i, value: i});\n                i += 5;\n            }\n            setSelectValues(valueList);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <div className=\"p-4 border-top\">\n                    <Row>\n                        <Col lg={6}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"productpublished\">Publicación Activa</Label>\n                                <FieldSwitch name={\"published\"} defaultValue={productData.published}/>\n                            </div>\n                        </Col>\n                        <Col lg={6}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"field_discount\">Descuento especial</Label>\n                                <select\n                                    id={\"field_discount\"}\n                                    name={\"discount\"}\n                                    value={discount}\n                                    onChange={(e) => setDiscount(e.target.value)}\n                                    className=\"form-control\"\n                                >\n                                    {map(selectValues, (o, k3) => (\n                                        <option key={k3} value={o.value}>{o.label}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12} className=\"text-right\">\n                            <ButtonSubmit loading={props.loading}/>\n                        </Col>\n                    </Row>\n                </div>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductPublish.propTypes = {\n    product: PropTypes.object,\n    onGetProductSizes: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {product, loading, meta, refresh} = state.Product\n    return {product, loading, meta, refresh}\n}\n\n\nexport default connect(mapStateToProps, {updateProduct})(ProductPublish)\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductImage.js",["1319","1320","1321","1322","1323","1324","1325","1326"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Card, CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport {Button} from \"@material-ui/core\";\nimport {getProductImage, updateProductImage} from \"../../store/productImages/actions\";\nimport {connect} from \"react-redux\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport Images from \"../../components/Common/Image\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport {getImageByQuality} from \"../../common/utils\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\n\nconst groups = [\n    {group: 'Izquierda', groupId: 1},\n    {group: 'Centro', groupId: 2},\n    {group: 'Derecha', groupId: 3}\n];\n\nconst ProductImage = props => {\n    const {product, onGetProductImage, productImages, refresh} = props\n    const [productImageList, setProductImageList] = useState(false);\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [productImageGroups, setProductImageGroups] = useState(groups);\n    const form = React.createRef();\n\n    useEffect(() => {\n        //onGetProductImage(product.id);\n        const files = groups.map(g => ({...g, file: {name: '', preview: ''}}));\n        if (product.productImage && product.productImage.length > 0) {\n            files.forEach((f, i) => {\n                if (product.productImage.length > i) {\n                    const imgData = product.productImage[i];\n                    if (imgData) {\n                        // f.groupId = imgData.group;\n                        f.file.preview = `${getImageByQuality(imgData, 'high')}`\n                        f.file.name = imgData.filename;\n                    }\n                }\n            })\n        }\n\n        setSelectedFiles(files);\n    }, [product])\n\n    useEffect(() => {\n        if (productImages && productImages.length > 0) {\n            setProductImageList(productImages);\n        } else {\n            setProductImageList([]);\n        }\n    }, [productImages])\n\n    function handleAcceptedFiles(groupId, file) {\n        const filesSelected = [...selectedFiles];\n        let group = filesSelected.find(f => f.groupId === groupId);\n        group.file = {\n            ...file,\n            preview: URL.createObjectURL(file.f),\n            formattedSize: formatBytes(file.f.size)\n        }\n        setSelectedFiles(filesSelected);\n\n    }\n\n    function formatBytes(bytes, decimals = 2) {\n        if (bytes === 0) return \"0 Bytes\"\n        const k = 1024\n        const dm = decimals < 0 ? 0 : decimals\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i]\n    }\n\n    const handleValidSubmit = (event, values) => {\n        const files = selectedFiles.filter(selectedFile => selectedFile.groupId && selectedFile.file.base64).map(f => ({group: f.groupId, file: f.file.base64}));\n        if (files.length > 0) {\n            props.onUpdateProductImage(product.id, files, props.history);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm ref={form} className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row className=\"p-4 border-top\">\n                    {selectedFiles.map((f, i) => (\n                        <Col md={4} key={i + \"-file\"}>\n                            <Card className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\">\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\" style={{borderBottom: '1px solid #f5f6f8'}}>\n                                        <Col md={12} className=\"text-center p-2\" style={{height: '400px'}}>\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"block\"\n                                                hasImage={f.file && f.file.preview}\n                                                onDrop={(files) => {\n                                                    handleAcceptedFiles(f.groupId, files);\n                                                }}>\n                                                <Images className=\"img-fluid mx-auto d-block tab-img rounded\"\n                                                        height={370}\n                                                        alt={f.file?.f?.name}\n                                                        src={f.file?.preview}\n                                                />\n                                            </DropZoneIcon>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"p-2\">\n                                        <Col md={8}>\n                                            <>\n                                                <div className=\"text.muted\"><strong>Grupo:</strong> {f.groupId}</div>\n                                                {(f.file && f.file.f) && (\n                                                    <>\n                                                        <div className=\"text.muted\">{f.file.f.path}</div>\n                                                        <div className=\"text.muted\">{f.file.formattedSize}</div>\n                                                    </>\n                                                )}\n                                            </>\n                                        </Col>\n                                        <Col md={4} className=\"text-right\">\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"icon\"\n                                                onDrop={(files) => {\n                                                    handleAcceptedFiles(f.groupId, files);\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n                <Row className=\"p-4\">\n                    <Col md={12} className=\"text-right\">\n                        <ButtonSubmit loading={props.loading}/>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductImage.propTypes = {\n    product: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n    const {productImages, loading, meta, refresh} = state.ProductImage\n    return {productImages, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductImage: (productId) => {\n        if (productId) dispatch(getProductImage(productId, null, 0));\n    },\n    onUpdateProductImage: (id, data, history) => dispatch(updateProductImage(id, data, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductImage)\n\n","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actions.js",["1327","1328","1329"],"import {\n    GET_FIELD_OPTIONS,\n    GET_FIELD_OPTIONS_SUCCESS,\n    GET_FIELD_OPTIONS_FAILED,\n    GET_FIELD_OPTION,\n    GET_FIELD_OPTION_SUCCESS,\n    GET_FIELD_OPTION_FAILED,\n    REGISTER_FIELD_OPTION,\n    REGISTER_FIELD_OPTION_SUCCESS,\n    REGISTER_FIELD_OPTION_FAILED,\n    UPDATE_FIELD_OPTION,\n    UPDATE_FIELD_OPTION_SUCCESS,\n    UPDATE_FIELD_OPTION_FAILED, DELETE_FIELD_OPTION, DELETE_FIELD_OPTION_SUCCESS, DELETE_FIELD_OPTION_FAILED,\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const getFieldOptions = (conditional, limit, offset) => ({\n    type: GET_FIELD_OPTIONS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getFieldOptionByGroups = (groups, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(groups.length > 0) conditions.add(\"groups\", groups.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getFieldOptionByGroup = (group, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add(\"groups\", group, Conditionals.OPERATORS.EQUAL);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getProductFieldOption = (limit, offset) => {\n    return getFieldOptionByName(\"PRODUCT\", limit, offset);\n}\n\nexport const getFieldOptionByName = (name, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add(\"name\", name, Conditionals.OPERATORS.EQUAL);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getFieldOptionsSuccess = (data, meta) => ({\n    type: GET_FIELD_OPTIONS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getFieldOptionsFailed = error => ({\n    type: GET_FIELD_OPTIONS_FAILED,\n    payload: error,\n})\n\nexport const getFieldOption = id => ({\n    type: GET_FIELD_OPTION,\n    id\n})\n\nexport const getFieldOptionSuccess = data => ({\n    type: GET_FIELD_OPTION_SUCCESS,\n    payload: data,\n})\n\nexport const getFieldOptionFailed = error => ({\n    type: GET_FIELD_OPTION_FAILED,\n    payload: error,\n})\n\nexport const registerFieldOption = (data, history) => {\n    return {\n        type: REGISTER_FIELD_OPTION,\n        payload: { data, history },\n    }\n}\n\nexport const registerFieldOptionSuccess = data => {\n    return {\n        type: REGISTER_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const registerFieldOptionFailed = data => {\n    return {\n        type: REGISTER_FIELD_OPTION_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateFieldOption = (id, data, history) => {\n    return {\n        type: UPDATE_FIELD_OPTION,\n        payload: { id, data, history },\n    }\n}\nexport const updateFieldOptionSuccess = data => {\n    return {\n        type: UPDATE_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateFieldOptionFail = error => {\n    return {\n        type: UPDATE_FIELD_OPTION_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteFieldOption = (id, history) => {\n    return {\n        type: DELETE_FIELD_OPTION,\n        payload: { id, history },\n    }\n}\nexport const deleteFieldOptionSuccess = data => {\n    return {\n        type: DELETE_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\nexport const deleteFieldOptionFail = error => {\n    return {\n        type: DELETE_FIELD_OPTION_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/order/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderSummary.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/actions.js",["1330","1331"],"import {\n    GET_PRODUCTS,\n    GET_PRODUCTS_SUCCESS,\n    GET_PRODUCTS_FAILED,\n    GET_PRODUCT,\n    GET_PRODUCT_SUCCESS,\n    GET_PRODUCT_FAILED,\n    REGISTER_PRODUCT_FAILED,\n    REGISTER_PRODUCT_SUCCESS,\n    REGISTER_PRODUCT,\n    UPDATE_PRODUCT_FAILED,\n    UPDATE_PRODUCT_SUCCESS, UPDATE_PRODUCT, RESET_PRODUCT, QUERY_PRODUCTS, QUERY_PRODUCTS_FAILED, QUERY_PRODUCTS_SUCCESS, QUERY_PENDING_PRODUCTS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\nimport {getFieldOptions} from \"../fieldOptions/actions\";\n\nexport const resetProduct = () => ({\n    type: RESET_PRODUCT,\n})\n\nexport const getProducts = (conditional, limit, offset) => ({\n    type: GET_PRODUCTS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\n\n\nexport const getProductsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getProducts(conditions.all(), ids.length, offset);\n}\n\nexport const getProductsSuccess = (data, meta) => ({\n    type: GET_PRODUCTS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getProductsFailed = error => ({\n    type: GET_PRODUCTS_FAILED,\n    payload: error,\n})\n\nexport const getProduct = id => ({\n    type: GET_PRODUCT,\n    id\n})\n\nexport const getProductSuccess = data => ({\n    type: GET_PRODUCT_SUCCESS,\n    payload: data,\n})\n\nexport const getProductFailed = error => ({\n    type: GET_PRODUCT_FAILED,\n    payload: error,\n})\n\nexport const registerProduct = (data, history) => {\n    return {\n        type: REGISTER_PRODUCT,\n        payload: { data, history },\n    }\n}\n\nexport const registerProductSuccess = data => {\n    return {\n        type: REGISTER_PRODUCT_SUCCESS,\n        payload: data.product,\n    }\n}\n\n\nexport const registerProductFailed = data => {\n    return {\n        type: REGISTER_PRODUCT_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateProduct = (id, data, history) => {\n    return {\n        type: UPDATE_PRODUCT,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateProductSuccess = data => {\n    return {\n        type: UPDATE_PRODUCT_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateProductFail = error => {\n    return {\n        type: UPDATE_PRODUCT_FAILED,\n        payload: error,\n    }\n}\n\n\n\nexport const countProductByStatus = () => {\n    const params = {operation:'id::count', group:\"status\"};\n    return queryProducts(params, 'statusGroup');\n}\n\nexport const pendingProducts = (id) => ({\n    type: QUERY_PENDING_PRODUCTS,\n    id:id\n})\nexport const queryProducts = (params, node) => ({\n    type: QUERY_PRODUCTS,\n    params: params,\n    node: node,\n})\nexport const queryProductsFailed = error => ({\n    type: QUERY_PRODUCTS_FAILED,\n    payload: error,\n})\nexport const queryProductsSuccess = (data, meta, node) => ({\n    type: QUERY_PRODUCTS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})","/Users/ramon/Repositories/lucy-moie/src/store/customer/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCar.js",["1332"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {map} from \"lodash\";\nimport Images from \"../../../components/Common/Image\";\nimport {buildNumericOptions, getImageByQuality, priceFormat} from \"../../../common/utils\";\nimport {FieldDecimalNumber, FieldSelect} from \"../../../components/Fields\";\nimport {HtmlTooltip} from \"../../../components/Common/HtmlTooltip\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {updateCard} from \"../../../store/order/actions\";\n\n\nconst OrderCar = (props) => {\n    const {car, onUpdateCar} = props;\n    const [globalDiscount, setGlobalDiscount] = useState(0);\n\n    useEffect(() => {\n        if (car.products && car.products.length > 0) {\n            const list = [...car.products];\n            let totaledProductList = getProductListWithTotals(list);\n\n            if(JSON.stringify(totaledProductList) !== JSON.stringify(car.products)){\n                onUpdateCar({...car, products: totaledProductList})\n            }\n        }\n    }, [car.products, globalDiscount])\n\n    const getProductListWithTotals = (list) => {\n        var map = {};\n        list.map((prod) => {\n            const discountPercentage = globalDiscount > 0 ? globalDiscount : prod.discountPercentage;\n            let total = prod.origin.price * prod.quantity;\n            const discount = total * (discountPercentage / 100);\n            total = total - discount;\n\n            return {\n                ...prod,\n                quantity: parseInt(prod.quantity),\n                discountPercentage: discountPercentage,\n                discount: discount,\n                total: total,\n            };\n        }).forEach((prod) => {\n            const key = prod.origin.id + '_' + prod.color + '_' + prod.sizeId;\n            if (map[key]) {\n                map[key].quantity += prod.quantity;\n                if (map[key].quantity > prod.quantityAvailable) map[key].quantity = prod.quantityAvailable;\n                map[key].total += prod.total;\n            } else {\n                map[key] = prod;\n            }\n        });\n        return Object.keys(map).map((key) => (map[key]));\n    }\n\n    const removeProduct = (prod) => {\n        const list = [...car.products];\n        list.splice(list.indexOf(prod), 1);\n        onUpdateCar({...car, products: list})\n    }\n\n    const onChangeQuantity = (quantity, p) => {\n        if (quantity === 0) {\n            removeProduct(p);\n        } else {\n            const list = [...car.products];\n            list.forEach((prod) => {\n                if (prod.origin.id === p.origin.id) {\n                    prod.quantity = parseInt(quantity);\n                }\n            });\n            onUpdateCar({...car, products: getProductListWithTotals(list)})\n        }\n    }\n\n    const onChangeDiscount = (discountPercentage, p) => {\n        const list = [...car.products];\n        list.forEach((prod) => {\n            if (prod.origin.id === p.origin.id && prod.color === p.color && prod.size === p.size) {\n                prod.discountPercentage = parseFloat(discountPercentage);\n            }\n        });\n        onUpdateCar({...car, products: getProductListWithTotals(list)})\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col md={12} className=\"mb-3\">\n                        <h4 className=\"card-title text-info\"><i className=\"uil-box me-2\"> </i> Productos</h4>\n                    </Col>\n                    <Col md={4} className=\"mb-3\">\n                        <Label htmlFor=\"weight\">Descuento Global</Label>\n                        <FieldSelect\n                            id={\"discount\"}\n                            name={\"discount\"}\n                            options={buildNumericOptions(100, 5, 0)}\n                            defaultValue={globalDiscount}\n                            onChange={(item => setGlobalDiscount(parseInt(item.value)))}\n                            required\n                        />\n                    </Col>\n                    <Col md={12}>\n                        <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                            <thead>\n                            <tr>\n                                <th className=\"text-center\">Código</th>\n                                <th className=\"text-center\">Color</th>\n                                <th className=\"text-center\">Talla</th>\n                                <th className=\"text-center\">Cantidad</th>\n                                <th className=\"text-center\">Precio Unit.</th>\n                                <th className=\"text-center\">% Desc.</th>\n                                <th className=\"text-center\">Total Desc.</th>\n                                <th className=\"text-center\">SubTotal</th>\n                                <th className=\"text-center\"> </th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {map(car.products, (product, key) => (\n                                <tr key={key}>\n                                    <td style={{width: '10%'}}>\n                                        <HtmlTooltip\n                                            title={\n                                                <React.Fragment>\n                                                    <Images src={`${getImageByQuality(product.origin.productImage.length > 0 ? product.origin.productImage[0] : {}, 'medium')}`}\n                                                            alt={product.origin.reference}\n                                                            height={100}\n                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                </React.Fragment>\n                                            }>\n                                            <div className=\"text-info\">{product.origin.reference}</div>\n                                        </HtmlTooltip>\n                                    </td>\n                                    <td style={{width: '25%'}} className=\"text-center\">{product.color}</td>\n                                    <td style={{width: '15%'}} className=\"text-center\">{product.size}</td>\n                                    <td style={{width: '10%'}}>\n                                        <FieldSelect\n                                            id={\"quantity\"}\n                                            name={\"quantity\"}\n                                            options={buildNumericOptions(product.quantityAvailable)}\n                                            defaultValue={product.quantity}\n                                            onChange={item => onChangeQuantity(item.value, product)}\n                                            required\n                                        />\n                                    </td>\n                                    <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.origin.price)}</td>\n                                    <td style={{width: '10%'}} className=\"text-center\">\n                                        {globalDiscount > 0 && (<>{product.discountPercentage + '%'}</>)}\n                                        {globalDiscount === 0 && (\n                                            <FieldDecimalNumber\n                                                id={\"discountProd\"}\n                                                name={\"discountProd\"}\n                                                value={product.discountPercentage}\n                                                onChange={el => onChangeDiscount((el.target.value ? el.target.value : 0), product)}\n                                            />\n                                        )}\n                                    </td>\n                                    <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.discount)}</td>\n                                    <td style={{width: '15%'}} className=\"text-end\">{priceFormat(product.total)}</td>\n                                    <td style={{width: '5%'}} className=\"text-end\">\n                                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => removeProduct(product)}>\n                                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                        </button>\n                                    </td>\n                                </tr>\n                            ))}\n                            {car.products.length === 0 && (\n                                <tr>\n                                    <td colSpan={8} className=\"text-center text-muted\">Pedido vacio</td>\n                                </tr>\n                            )}\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderCar.propTypes = {\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {product, error, loading} = state.Product\n    const {car} = state.Order\n    return {car, product, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderCar))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCustomer.js",["1333","1334","1335","1336","1337"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row, Spinner} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect} from \"../../../components/Fields\";\nimport {CUSTOMER} from \"../../../helpers/url_helper\";\nimport {getCustomer} from \"../../../store/customer/actions\";\nimport {arrayToOptionsByFieldName, getEmptyOptions} from \"../../../common/converters\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport Conditionals from \"../../../common/conditionals\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport CustomerForm from \"../../CustomerEdit/CustomerForm\";\nimport {updateCard} from \"../../../store/order/actions\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {hasCustomerOpenOrders} from \"../../../helpers/service\";\nimport OrdersPieChart from \"../../CustomerEdit/OrdersPieChart\";\nimport CategoriesPieChart from \"../../CustomerEdit/CategoriesPieChart\";\n\nconst searchByOptions = [{label: \"Documento\", value: \"doc\"}, {label: \"Nombre\", value: \"name\"}, {label: \"Correo\", value: \"email\"}];\n\nconst OrderCustomer = (props) => {\n    const {car, customer, onGetCustomer, hasCustomerOpenOrders, onUpdateCar, showAsModal} = props;\n    const [initComponent, setInitComponent] = useState(true);\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [editCustomer, setEditCustomer] = useState(false);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n    const [openCustomerStatsModal, setOpenCustomerStatsModal] = useState(false);\n    const [hasPendingOrders, setHasPendingOrders] = useState(false);\n    const [customerData, setCustomerData] = useState({});\n    const [customerDefault, setCustomerDefault] = useState(getEmptyOptions());\n    const [customerEmailDefault, setCustomerEmailDefault] = useState(getEmptyOptions());\n    const [customerDocumentDefault, setCustomerDocumentDefault] = useState(getEmptyOptions());\n\n    useEffect(() => {\n        if (showAsModal && car.isEdit && car.customer && car.customer.id && initComponent) {\n            setInitComponent(false);\n            onGetCustomer(car.customer.id);\n        }\n    }, [showAsModal]);\n\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n            if(customer.status) onUpdateCar({...car, customer});\n            if (car && !car.orderId) hasCustomerOpenOrders(customer.id).then(resp => setHasPendingOrders(resp && resp.data && resp.data.length > 0));\n        } else {\n            resetData();\n        }\n    }, [customer]);\n\n    const toggleCustomerStatsModal = () => {\n        setOpenCustomerStatsModal(!openCustomerStatsModal);\n    }\n    const toggleModal = () => {\n        setOpenCustomerModal(!openCustomerModal);\n    }\n\n    const resetData = () => {\n        setCustomerDefault(getEmptyOptions());\n        setCustomerEmailDefault(getEmptyOptions());\n        setCustomerDocumentDefault(getEmptyOptions());\n        setCustomerData({})\n        setHasPendingOrders(false)\n    }\n\n    const onCloseCustomerModal = () => {\n        toggleModal();\n        setEditCustomer(false);\n    }\n\n    const onAcceptCustomerModal = () => {\n        toggleModal();\n        setCustomerDefault(getEmptyOptions());\n        setCustomerEmailDefault(getEmptyOptions());\n        setCustomerDocumentDefault(getEmptyOptions());\n        if (editCustomer) {\n            onGetCustomer(customer.id);\n        }\n        setEditCustomer(false);\n    }\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col>\n                    <h4 className=\"card-title text-info\"><i className=\"uil-users-alt me-2\"> </i> Datos del cliente</h4>\n                </Col>\n            </Row>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col md={2}>\n                        <Label htmlFor=\"product\">Buscar por</Label>\n                        <FieldSelect\n                            id={\"searchByOptions\"}\n                            name={\"searchByOptions\"}\n                            options={searchByOptions}\n                            defaultValue={searchBy}\n                            onChange={(e) => {\n                                setSearchBy(e.value);\n                            }}\n                        />\n                    </Col>\n                    {searchBy === \"doc\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"product\">Documento</Label>\n                            <FieldAsyncSelect\n                                name={\"product\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por documento\"\n                                defaultValue={customerDocumentDefault}\n                                conditionalOptions={{fieldName: 'document', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c) => {\n                                    onGetCustomer(c.value);\n                                    setCustomerDefault(getEmptyOptions());\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"name\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Nombre</Label>\n                            <FieldAsyncSelect\n                                name={\"customer\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por nombre\"\n                                defaultValue={customerDefault}\n                                onChange={(c) => {\n                                    onGetCustomer(c.value);\n                                    setCustomerDocumentDefault(getEmptyOptions());\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"email\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Correo</Label>\n                            <FieldAsyncSelect\n                                name={\"email\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por correo\"\n                                defaultValue={customerEmailDefault}\n                                conditionalOptions={{fieldName: 'email', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c) => {\n                                    onGetCustomer(c.value);\n                                    setCustomerEmailDefault(getEmptyOptions());\n                                }}\n                            />\n                        </Col>\n                    )}\n                    <Col md={1} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                        <Tooltip placement=\"bottom\" title=\"Agregar nuevo cliente\" aria-label=\"add\">\n                            <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\" onClick={() => toggleModal()}>\n                                <i className=\"fa fa-user-plus\"> </i>\n                            </button>\n                        </Tooltip>\n                    </Col>\n                </Row>\n            </AvForm>\n            {customerData.id && (\n                <Row className=\"mt-3\">\n                    <Col md={11}>\n                        <Row>\n                            <Col md={6}>\n                                <label>Nombre: </label>\n                                <span className=\"p-1\">{customerData.name}</span>\n                                {customerData.isMayorist === true && (\n                                    <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                        <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                    </Tooltip>\n                                )}\n                            </Col>\n                            <Col md={6}>\n                                <label>Correo: </label>\n                                <span className=\"p-1\">{customerData.email}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Departamento: </label>\n                                <span className=\"p-1\">{customerData.state?.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Municipio: </label>\n                                <span className=\"p-1\">{customerData.municipality?.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Documento: </label>\n                                <span className=\"p-1\">{customerData.document}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono Celular: </label>\n                                <span className=\"p-1\">{customerData.cellphone}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono Residencial: </label>\n                                <span className=\"p-1\">{customerData.phone}</span>\n                            </Col>\n                        </Row>\n\n                    </Col>\n                    <Col md={1} className=\"text-right\">\n                        <Tooltip placement=\"bottom\" title=\"Editar cliente\" aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className=\"btn btn-sm text-primary\"\n                                    onClick={() => {\n                                        toggleModal();\n                                        setEditCustomer(true);\n                                    }}>\n                                <i className=\"uil uil-pen font-size-18\"> </i>\n                            </button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottom\" title=\"Estadisticas del cliente\" aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className=\"btn btn-sm text-primary\"\n                                    onClick={() => {\n                                        toggleCustomerStatsModal();\n                                    }}>\n                                <i className=\"uil uil-chart font-size-18\"> </i>\n                            </button>\n                        </Tooltip>\n\n                    </Col>\n\n                    {hasPendingOrders && (\n                        <Col md={12} >\n                            <div className=\"alert alert-warning m-0 font-size-14\">\n                                <i className=\"uil uil-exclamation-triangle\"> </i> <b>Existe un pedido apartado para el cliente seleccionado, Solicite autorización para realizar este pedido.</b>\n                            </div>\n                        </Col>\n                    )}\n\n                    {!customer.status && (\n                        <Col md={12} >\n                            <div className=\"alert alert-danger m-0 font-size-14\">\n                                <i className=\"uil uil-exclamation-triangle\"> </i> <b>Este cliente no puede generar pedidos nuevos debido a que se encuentra inactivo.</b>\n                            </div>\n                        </Col>\n                    )}\n\n                    {showAsModal && (\n                        <>\n                            <hr/>\n                            <Row>\n                                <Col md={12} className=\"text-right\">\n                                    {props.onCloseModal && (\n                                        <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                    )}\n                                    {props.onAcceptModal && (\n                                        <Button color=\"primary\" type=\"button\" onClick={() => props.onAcceptModal()}>Guardar</Button>\n                                    )}\n                                </Col>\n                            </Row>\n                        </>\n                    )}\n                </Row>\n            )}\n            <CustomModal title={editCustomer ? \"Modificar cliente\" : \"Nuevo cliente\"} size=\"lg\" showFooter={false} isOpen={openCustomerModal} onClose={onCloseCustomerModal}>\n                <CustomerForm customer={customerData}\n                              showAsModal={true}\n                              onCloseModal={onCloseCustomerModal}\n                              onAcceptModal={onAcceptCustomerModal}\n                />\n            </CustomModal>\n            <CustomModal title={\"Estadisticas del cliente\"} size=\"lg\" isOpen={openCustomerStatsModal} onClose={toggleCustomerStatsModal}>\n                <Row>\n                    <Col md={6} className=\"mb-3\">\n                        <OrdersPieChart customerId={customerData.id}/>\n                    </Col>\n                    <Col md={6} className=\"mb-3\">\n                        <CategoriesPieChart customerId={customerData.id}/>\n                    </Col>\n                </Row>\n            </CustomModal>\n        </React.Fragment>\n    )\n}\n\nOrderCustomer.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {customer, error, loading} = state.Customer\n    const {car} = state.Order\n    return {car, customer, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hasCustomerOpenOrders,\n    onGetCustomer: (id) => dispatch(getCustomer(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderCustomer))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderDeliveryOptions.js",["1338","1339","1340","1341","1342","1343","1344","1345"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldNumber, FieldSelect} from \"../../../components/Fields\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {getFieldOptionByGroups} from \"../../../store/fieldOptions/actions\";\nimport {DELIVERY_METHODS_PAYMENT_TYPES, DELIVERY_TYPES, GROUPS, PAYMENT_TYPES, PAYMENT_TYPES_LIST} from \"../../../common/constants\";\nimport {getDeliveryMethods, getDeliveryQuote, updateCard} from \"../../../store/order/actions\";\nimport {arrayToOptions, getEmptyOptions} from \"../../../common/converters\";\nimport {Button} from \"@material-ui/core\";\nimport {getAllDeliveryLocalities} from \"../../../store/deliveryLocality/actions\";\n\nconst OrderDeliveryOptions = (props) => {\n    const {\n        onUpdateCar, car, fieldOptions, onGetFieldOptions, onGetDeliveryMethods, onGetDeliveryQuote, deliveryMethods, deliveryQuote,\n        showAsModal, onCloseModal, onAcceptModal, pOriginOrder,\n        onGetDeliveryLocalities, deliveryLocalities,\n    } = props;\n\n    const [initComponent, setInitComponent] = useState(true);\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState(null);\n    const [deliveryLocalitiesList, setDeliveryLocalitiesList] = useState([]);\n    const [deliveryLocality, setDeliveryLocality] = useState(null);\n    const [originOrders, setOriginOrders] = useState([]);\n    const [originOrder, setOriginOrder] = useState(pOriginOrder || null);\n    const [deliveryTypes, setDeliveryTypes] = useState(null);\n    const [deliveryType, setDeliveryType] = useState(null);\n    const [paymentTypes, setPaymentTypes] = useState(null);\n    const [paymentType, setPaymentType] = useState(null);\n    const [tracking, setTracking] = useState(null);\n    const [deliveryCost, setDeliveryCost] = useState(0);\n    const [pieceToChange, setPieceToChange] = useState(0);\n    const [showPaymentType, setShowPaymentType] = useState(false);\n    const [productQty, setProductQty] = useState(0);\n\n    //Carga inicial\n    useEffect(() => {\n        setDeliveryTypes([getEmptyOptions(), ...DELIVERY_TYPES.map(dt => ({label: dt.label, value: dt.id}))]);\n        setPaymentTypes([getEmptyOptions(), ...PAYMENT_TYPES_LIST]);\n        onGetFieldOptions();\n        if(!deliveryMethods || deliveryMethods.length === 0) onGetDeliveryMethods();\n        onGetDeliveryLocalities();\n        if (car.reset) {\n            setDeliveryMethod(null);\n            setOriginOrder(null);\n            setDeliveryType(null);\n            setPaymentType(null);\n            setDeliveryCost(0);\n            setPieceToChange(0);\n            setShowPaymentType(false);\n            setProductQty(0);\n            setTracking(\"\");\n        }\n    }, [onGetFieldOptions, car.reset]);\n\n    useEffect(() => {\n        const list = fieldOptions || [];\n        setOriginOrders([getEmptyOptions(), ...list.filter(op => (op.groups === GROUPS.ORDERS_ORIGIN)).map(op => ({label: op.name, value: op.name}))]);\n    }, [fieldOptions]);\n\n    useEffect(() => {\n        const list = deliveryLocalities || [];\n        setDeliveryLocalitiesList([getEmptyOptions(), ...arrayToOptions(list)]);\n    }, [deliveryLocalities]);\n\n    useEffect(() => {\n        const list = deliveryMethods || [];\n        const ot = deliveryType + '';\n        setDeliveryMethodList([getEmptyOptions(), ...list.filter(op => (op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        onChangeDeliveryOptions();\n    }, [deliveryType]);\n\n    useEffect(() => {\n        if (deliveryMethod) {\n            setShowPaymentType(DELIVERY_METHODS_PAYMENT_TYPES.includes(deliveryMethod));\n            getQuote();\n            onChangeDeliveryOptions();\n        }\n    }, [deliveryMethod]);\n\n    useEffect(() => {\n        if (deliveryMethods) {\n            const ot = deliveryType ? deliveryType + '' : null;\n            setDeliveryMethodList([getEmptyOptions(), ...deliveryMethods.filter(op => (!ot || op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        }\n    }, [deliveryMethods]);\n\n    useEffect(() => {\n        if (deliveryMethod && deliveryQuote) {\n            setDeliveryCost(parseFloat(deliveryQuote.amount || 0));\n            onChangeDeliveryOptions();\n        }\n    }, [deliveryQuote]);\n\n    useEffect(() => {\n        onChangeDeliveryOptions();\n    }, [deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality]);\n\n    useEffect(() => {\n        getQuote();\n    }, [car.products]);\n\n    useEffect(() => {\n        if (car.isEdit && car.deliveryOptions && car.deliveryOptions.origin && initComponent) {\n            setInitComponent(false);\n            console.log('paso', car.deliveryOptions)\n            setDeliveryMethod(car.deliveryOptions.method);\n            setOriginOrder(car.deliveryOptions.origin);\n            setDeliveryType(car.deliveryOptions.type);\n            setDeliveryCost(car.deliveryOptions.cost);\n            setPieceToChange(car.deliveryOptions.pieces);\n            setDeliveryLocality(car.deliveryOptions.deliveryLocality);\n            setTracking(car.deliveryOptions.tracking);\n            setShowPaymentType(DELIVERY_METHODS_PAYMENT_TYPES.includes(car.deliveryOptions.method));\n\n            if (car.deliveryOptions.paymentType)\n                setPaymentType(car.deliveryOptions.paymentType === 1 ? PAYMENT_TYPES.CASH : PAYMENT_TYPES.TRANSFER);\n            //getQuote()\n        }\n    }, [car.deliveryOptions]);\n\n    const getQuote = () => {\n        let qty = 0;\n        car.products.forEach(prod => (qty += prod.quantity));\n        if (qty > 0 && deliveryMethod && (qty !== productQty || car.deliveryOptions.method !== deliveryMethod)) {\n            setProductQty(qty);\n            let products = car.products.map(prod => ({id: prod.origin.id, qty: prod.quantity}));\n            onGetDeliveryQuote({deliveryType: deliveryType, deliveryMethodCode: deliveryMethod, products});\n        }\n    }\n\n    const onChangeDeliveryOptions = () => {\n        let deliveryOps = {\n            origin: originOrder,\n            type: deliveryType,\n            method: deliveryMethod,\n            cost: (parseFloat(deliveryCost) || 0),\n            paymentType: paymentType,\n            pieces: pieceToChange,\n            deliveryLocality: deliveryLocality\n        };\n\n        if(tracking && tracking !== ''){\n            deliveryOps.tracking = tracking;\n        }\n        //console.log(deliveryOps, paymentType)\n        onUpdateCar({...car, deliveryOptions: deliveryOps});\n    }\n\n    const acceptModal = () => {\n        onAcceptModal(car);\n    }\n\n    const showGuia = () => car.status && car.status > 1 && car.status < 6\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col>\n                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Opciones de envio</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Origen del pedido</Label>\n                        <FieldSelect\n                            id={\"originOrder\"}\n                            name={\"originOrder\"}\n                            options={originOrders}\n                            defaultValue={originOrder}\n                            onChange={item => setOriginOrder(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Tipo de pedido</Label>\n                        <FieldSelect\n                            id={\"deliveryType\"}\n                            name={\"deliveryType\"}\n                            options={deliveryTypes}\n                            defaultValue={deliveryType}\n                            onChange={item => setDeliveryType(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Metodo de envio</Label>\n                        <FieldSelect\n                            id={\"deliveryMethod\"}\n                            name={\"deliveryMethod\"}\n                            options={deliveryMethodList}\n                            defaultValue={deliveryMethod}\n                            onChange={item => setDeliveryMethod(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Costo del envio</Label>\n                        <FieldNumber\n                            id={\"deliveryCost\"}\n                            name={\"deliveryCost\"}\n                            value={deliveryCost}\n                            onChange={item => setDeliveryCost(item.target.value)}\n                            required/>\n                    </Col>\n                    {(deliveryMethod && !showPaymentType) && (\n                        <Col md={12} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Dirección de envío</Label>\n                            <FieldSelect\n                                id={\"deliveryLocality\"}\n                                name={\"deliveryLocality\"}\n                                options={deliveryLocalitiesList}\n                                defaultValue={deliveryLocality}\n                                onChange={item => setDeliveryLocality(item.value)}\n                                required\n                            />\n                        </Col>\n                    )}\n                    {showPaymentType && (\n                        <>\n                            <Col md={6} className=\"p-1\">\n                                <Label htmlFor=\"weight\">Forma de pago</Label>\n                                <FieldSelect\n                                    id={\"paymentType\"}\n                                    name={\"paymentType\"}\n                                    options={paymentTypes}\n                                    defaultValue={paymentType}\n                                    onChange={item => {\n                                        setPaymentType(item.value)\n                                    }}\n                                    required\n                                />\n                            </Col>\n                            <Col md={6} className=\"p-1\">\n                                <Label htmlFor=\"weight\">Prendas para cambio</Label>\n                                <FieldNumber\n                                    id={\"pieceToChange\"}\n                                    name={\"pieceToChange\"}\n                                    value={pieceToChange}\n                                    onChange={item => setPieceToChange(item.target.value)}\n                                    required/>\n                            </Col>\n                        </>\n                    )}\n                    {!!(showGuia() && tracking && tracking !== '') && (\n                        <Col md={6} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Guia número</Label>\n                            <div className=\"form-control\">{tracking}</div>\n                           {/* <FieldText\n                                id={\"tracking\"}\n                                name={\"tracking\"}\n                                value={tracking}\n                                onChange={item => setTracking(item.target.value)}\n                            />*/}\n                        </Col>\n                    )}\n                </Row>\n            </AvForm>\n            {showAsModal && (\n                <>\n                    <hr/>\n                    <Row>\n                        <Col md={12} className=\"text-right\">\n                            {onCloseModal && (\n                                <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                            )}\n                            {onAcceptModal && (\n                                <Button color=\"primary\" type=\"button\" onClick={() => acceptModal()}>Guardar</Button>\n                            )}\n                        </Col>\n                    </Row>\n                </>\n\n            )}\n\n        </React.Fragment>\n    )\n}\n\nOrderDeliveryOptions.propTypes = {\n    history: PropTypes.object\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.ORDERS_ORIGIN], limit, page)),\n    onGetDeliveryLocalities: () => dispatch(getAllDeliveryLocalities()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n    onGetDeliveryQuote: (request) => dispatch(getDeliveryQuote(request)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nconst mapStateToProps = state => {\n    const {deliveryLocalities} = state.DeliveryLocalities\n    const {fieldOptions} = state.FieldOption\n    const {car, deliveryMethods, deliveryQuote} = state.Order\n    return {car, deliveryLocalities, deliveryMethods: deliveryMethods.data, deliveryQuote: deliveryQuote.data, fieldOptions};\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderDeliveryOptions))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderProducts.js",["1346"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect} from \"../../../components/Fields\";\nimport {GET_CUSTOMER, PRODUCT} from \"../../../helpers/url_helper\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {getEmptyOptions} from \"../../../common/converters\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {map} from \"lodash\";\nimport Images from \"../../../components/Common/Image\";\nimport {buildNumericOptions, getImageByQuality, priceFormat} from \"../../../common/utils\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {updateCard} from \"../../../store/order/actions\";\n\nconst searchByOptions = [{label:\"Codigo\", value:\"code\"},{label:\"Nombre\", value:\"name\"}];\n\nconst OrderProducts = (props) => {\n    const {car, product, onGetProduct, onUpdateCar} = props;\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [productData, setProductData] = useState({});\n    const [productDefault, setProductDefault] = useState(getEmptyOptions());\n    const [productReferenceDefault, setProductReferenceDefault] = useState(getEmptyOptions());\n    const [imgSelected, setImgSelected] = useState(0);\n    const [quantityAvailable, setQuantityAvailable] = useState(0);\n    const [colorsMap, setColorsMap] = useState({});\n    const [colors, setColors] = useState([]);\n    const [color, setColor] = useState({});\n    const [sizes, setSizes] = useState([]);\n    const [size, setSize] = useState({});\n    const [defaultQuantity, setDefaultQuantity] = useState({});\n\n    useEffect(() => {\n        if (product.id) {\n            const productImage = product.productImage.length > 0 ? product.productImage : [{}];\n            setProductData({...product, _status: product.status, productImage: productImage});\n\n            const map = {};\n            if (product.productSize.length) {\n                product.productSize.filter(s => s.quantity > 0).forEach((s => {\n                    if (!map[s.color]) map[s.color] = [];\n                    map[s.color].push({label: s.name, value: s.id});\n                }))\n            }\n            setColorsMap(map);\n\n            let productSizeColors = Object.keys(map).map(k => ({label: k, value: k}));\n            setColors(productSizeColors);\n\n            setColor(-1);\n            setSize(-1);\n            setSizes([]);\n            setQuantityAvailable(0);\n            setDefaultQuantity(-1);\n        } else {\n            resetData();\n        }\n    }, [product]);\n\n    const addToOrder = (e, d) => {\n        const prod = {\n            origin: productData,\n            color: d.color.value,\n            size: d.size.label,\n            sizeId: d.size.value,\n            quantity: d.quantity.value,\n            quantityAvailable: quantityAvailable,\n            discountPercentage: 0,\n            discount: 0,\n        };\n\n        onUpdateCar({...car, products: [...car.products, prod]})\n        resetData();\n    }\n\n    const onChangeSize = (e) => {\n        const item = product.productSize.find(s => s.id === e.value);\n        setQuantityAvailable(item.quantity);\n        setSize(sizes.find(s => s.id === e.value));\n    }\n\n    const resetData = () => {\n        setProductDefault(getEmptyOptions());\n        setProductReferenceDefault(getEmptyOptions());\n        setProductData({})\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => addToOrder(e, v)}>\n                <Row>\n                    <Col>\n                        <h4 className=\"card-title text-info\"><i className=\"uil-filter me-2\"> </i> Agregar productos</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={2}>\n                        <Label htmlFor=\"product\">Buscar por</Label>\n                        <FieldSelect\n                            id={\"searchByOptions\"}\n                            name={\"searchByOptions\"}\n                            options={searchByOptions}\n                            defaultValue={searchBy}\n                            onChange={(e) => {\n                                setSearchBy(e.value);\n                            }}\n                        />\n                    </Col>\n                    {searchBy === \"code\" && (\n                        <Col md={10}>\n                            <Label htmlFor=\"product\">Código</Label>\n                            <FieldAsyncSelect\n                                name={\"productCode\"}\n                                urlStr={PRODUCT}\n                                placeholder=\"Código del producto\"\n                                defaultValue={productReferenceDefault}\n                                hasWild={true}\n                                conditionalOptions={{fieldName: 'reference', operator: Conditionals.OPERATORS.EQUAL}}\n                                onChange={(d) => {\n                                    onGetProduct(d.value);\n                                    setProductDefault(getEmptyOptions());\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"name\" && (\n                        <Col md={10}>\n                            <Label htmlFor=\"product\">Nombre</Label>\n                            <FieldAsyncSelect\n                                name={\"productName\"}\n                                urlStr={PRODUCT}\n                                placeholder=\"Nombre del producto\"\n                                defaultValue={productDefault}\n                                onChange={(d) => {\n                                    onGetProduct(d.value);\n                                    setProductReferenceDefault(getEmptyOptions());\n                                }}\n                            />\n                        </Col>\n                    )}\n                </Row>\n                {productData.id && (\n                    <Row className=\"mt-3\">\n                        <Col md={3} className=\"text-center\">\n                            <Row className=\"\">\n                                <Col md={4} className=\"image-left-panel\" style={{minHeight: '225px'}}>\n                                    <div className={`nav flex-column nav-pills`} id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                                        {map(productData.productImage, (img, key) => (\n                                            <div key={key}\n                                                 className={`cursor-pointer nav-link ${imgSelected === key ? 'custom-active' : ''}`}\n                                                 onClick={() => (setImgSelected(key))}>\n                                                <Images src={`${getImageByQuality(img, 'small')}`}\n                                                        alt={img.filename}\n                                                        className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </Col>\n                                <Col md={8}>\n                                    <div className=\"tab-content position-relative\" id=\"v-pills-tabContent\">\n                                        {map(productData.productImage, (img, key) => (\n                                            <div key={key} className={`tab-pane fade ${imgSelected === key ? 'show active bg-white border-1' : ''}`} id={`product-${key}`} role=\"tabpanel\">\n                                                <div className=\"product-img panel-bordered\">\n                                                    <Images src={`${getImageByQuality(img, 'medium')}`}\n                                                            alt={img.filename}\n                                                            className=\"img-fluid mx-auto d-block\"\n                                                            width={200}/>\n                                                </div>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col md={9}>\n                            <Row>\n                                <Col md={8}>\n                                    <Row>\n                                        <Col md={12}>\n                                            <div className=\"p-1\">\n                                                <b className=\"text-info font-size-16\">{productData.reference}</b> - <span>{productData.name}</span>\n                                            </div>\n                                        </Col>\n                                        <Col md={12}>\n                                            <label>Categoria: </label>\n                                            <span className=\"p-1\">{productData.category?.name}</span>\n                                        </Col>\n                                        <Col md={12}>\n                                            <label>Material: </label>\n                                            <span className=\"p-1\">{productData.material}</span>\n                                        </Col>\n                                        {productData.size && (\n                                            <Col md={12}>\n                                                <label>Tipo: </label>\n                                                <span className=\"p-1\">{productData.size.name}</span>\n                                            </Col>\n                                        )}\n                                    </Row>\n                                </Col>\n                                <Col md={4}>\n                                    <Row>\n                                        <Col md={12} className=\"text-right\">\n                                            <div className=\"mt-3\">\n                                                <p className=\"text-muted mb-2\">Precio</p>\n                                                <h5 className=\"font-size-20\">{priceFormat(productData.price)}</h5>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={4}>\n                                    <Label className=\"control-label\">Color</Label>\n                                    <FieldSelect\n                                        id={\"color\"}\n                                        name={\"color\"}\n                                        options={colors}\n                                        defaultValue={color}\n                                        onChange={(e) => {\n                                            setSizes(colorsMap[e.label]);\n                                            setColor(colors.find(s => s.id === e.value));\n                                        }}\n                                        isSearchable\n                                        required\n                                    />\n                                </Col>\n                                <Col md={3}>\n                                    <Label className=\"control-label\">Tallas</Label>\n                                    <FieldSelect\n                                        id={\"size\"}\n                                        name={\"size\"}\n                                        options={sizes}\n                                        defaultValue={size}\n                                        onChange={(e) => onChangeSize(e)}\n                                        isSearchable\n                                        required\n                                    />\n                                </Col>\n                                <Col md={3}>\n                                    <Label htmlFor=\"weight\">Cantidad</Label>\n                                    <FieldSelect\n                                        id={\"quantity\"}\n                                        name={\"quantity\"}\n                                        options={buildNumericOptions(quantityAvailable, 1, 1)}\n                                        defaultValue={defaultQuantity}\n                                        onChange={(e) => setDefaultQuantity(e.value)}\n                                        required\n                                    />\n                                </Col>\n                                <Col md={2} style={{display: 'flex', 'alignItems': 'normal'}}>\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\">\n                                        <i className=\"uil uil-shopping-cart-alt me-2\"> </i> Agregar\n                                    </button>\n                                </Col>\n                            </Row>\n                        </Col>\n\n                    </Row>\n                )}\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderProducts.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {product, error, loading} = state.Product;\n    const {car} = state.Order;\n    return {car, product, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderProducts))\n","/Users/ramon/Repositories/lucy-moie/src/helpers/backend_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/conditionals.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/actions.js",["1347"],"import {\n    ADD_ORDER_OFFICE,\n    ADD_ORDER_OFFICE_FAILED,\n    ADD_ORDER_OFFICE_SUCCESS,\n    CONFIRM_OFFICE,\n    CONFIRM_OFFICE_FAILED,\n    CONFIRM_OFFICE_SUCCESS,\n    DELETE_OFFICE,\n    DELETE_OFFICE_FAILED,\n    DELETE_OFFICE_SUCCESS,\n    GET_OFFICE,\n    GET_OFFICE_FAILED,\n    GET_OFFICE_SUCCESS,\n    GET_OFFICES,\n    GET_OFFICES_FAILED,\n    GET_OFFICES_SUCCESS,\n    IMPORT_FILE,\n    IMPORT_FILE_FAILED,\n    IMPORT_FILE_RESET,\n    IMPORT_FILE_SUCCESS,\n    PRINT_OFFICE_REPORT,\n    PRINT_OFFICE_REPORT_FAILED,\n    PRINT_OFFICE_REPORT_RESET,\n    PRINT_OFFICE_REPORT_SUCCESS,\n    QUERY_OFFICES,\n    QUERY_OFFICES_FAILED,\n    QUERY_OFFICES_SUCCESS,\n    REGISTER_OFFICE,\n    REGISTER_OFFICE_FAILED,\n    REGISTER_OFFICE_SUCCESS,\n    RESET_OFFICE,\n    UPDATE_OFFICE,\n    UPDATE_OFFICE_FAILED,\n    UPDATE_OFFICE_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetOffice = () => ({\n    type: RESET_OFFICE,\n})\n\nexport const getOffices = (conditional, limit, offset) => ({\n    type: GET_OFFICES,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\n\n\nexport const getOfficesByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getOffices(conditions.all(), ids.length, offset);\n}\n\nexport const getOfficesSuccess = (data, meta) => ({\n    type: GET_OFFICES_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getOfficesFailed = error => ({\n    type: GET_OFFICES_FAILED,\n    payload: error,\n})\n\nexport const getOffice = id => ({\n    type: GET_OFFICE,\n    id\n})\n\nexport const getOfficeSuccess = data => ({\n    type: GET_OFFICE_SUCCESS,\n    payload: data,\n})\n\nexport const getOfficeFailed = error => ({\n    type: GET_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const registerOffice = (data, history) => {\n    return {\n        type: REGISTER_OFFICE,\n        payload: { data, history },\n    }\n}\n\nexport const registerOfficeSuccess = data => {\n    return {\n        type: REGISTER_OFFICE_SUCCESS,\n        payload: data.office,\n    }\n}\n\n\nexport const registerOfficeFailed = data => {\n    return {\n        type: REGISTER_OFFICE_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateOffice = (id, data, history) => {\n    return {\n        type: UPDATE_OFFICE,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateOfficeSuccess = data => {\n    return {\n        type: UPDATE_OFFICE_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateOfficeFail = error => {\n    return {\n        type: UPDATE_OFFICE_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteOffice = (id, history) => ({\n    type: DELETE_OFFICE,\n    payload: { id, history}\n})\n\nexport const deleteOfficeSuccess = () => ({\n    type: DELETE_OFFICE_SUCCESS\n})\n\nexport const deleteOfficeFailed = error => ({\n    type: DELETE_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const confirmOffice = (id, history) => ({\n    type: CONFIRM_OFFICE,\n    payload: { id, history}\n})\n\nexport const confirmOfficeSuccess = () => ({\n    type: CONFIRM_OFFICE_SUCCESS\n})\n\nexport const confirmOfficeFailed = error => ({\n    type: CONFIRM_OFFICE_FAILED,\n    payload: error,\n})\n\n\n\nexport const countOfficeByStatus = () => {\n    const params = {operation:'id::count', group:\"status\"};\n    return queryOffices(params, 'statusGroup');\n}\n\nexport const queryOffices = (params, node) => ({\n    type: QUERY_OFFICES,\n    params: params,\n    node: node,\n})\nexport const queryOfficesFailed = error => ({\n    type: QUERY_OFFICES_FAILED,\n    payload: error,\n})\nexport const queryOfficesSuccess = (data, meta, node) => ({\n    type: QUERY_OFFICES_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const addOrderOffice = (id, data, conditional, history) => {\n    return {\n        type: ADD_ORDER_OFFICE,\n        payload: { id, data, conditional, history },\n    }\n}\n\nexport const addOrderOfficeSuccess = data => {\n    return {\n        type: ADD_ORDER_OFFICE_SUCCESS,\n        payload: data.office,\n    }\n}\n\n\nexport const addOrderOfficeFailed = data => {\n    return {\n        type: ADD_ORDER_OFFICE_FAILED,\n        payload: data,\n    }\n}\nconsole.log('importFile')\nexport const importFileReset = () => ({\n    type: IMPORT_FILE_RESET\n})\nexport const importFile = (data) => ({\n    type: IMPORT_FILE,\n    payload: {data}\n})\nexport const importFileFailed = error => ({\n    type: IMPORT_FILE_FAILED,\n    payload: error,\n})\nexport const importFileSuccess = () => ({\n    type: IMPORT_FILE_SUCCESS\n})\n\nexport const printOfficeReport = (id) => ({\n    type: PRINT_OFFICE_REPORT,\n    payload: { id}\n})\nexport const printOfficeReportSuccess = (data) => ({\n    type: PRINT_OFFICE_REPORT_SUCCESS,\n    payload: data\n})\nexport const printOfficeReportFailed = error => ({\n    type: PRINT_OFFICE_REPORT_FAILED,\n    payload: error,\n})\nexport const resetPrintOfficeReport = () => ({\n    type: PRINT_OFFICE_REPORT_RESET\n})\n\n\n","/Users/ramon/Repositories/lucy-moie/src/common/converters.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Modal/CommosModal.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/Autocomplete.js",["1348"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormGroup, FormText} from \"reactstrap\";\nimport theme from './scss/autocomplete.scss';\nimport Autosuggest from 'react-autosuggest';\n\nconst Autocomplete = (props) => {\n    const [selected, setSelected] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n    const {defaultValue, options} = props;\n\n    const getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        return inputValue.length === 0 ? [] : (options || []).filter(item => {\n                return item.name.toLowerCase().includes(inputValue)\n            }\n        );\n    };\n\n    const getSuggestionValue = suggestion => suggestion.name;\n\n    const renderSuggestion = suggestion => (\n        <div className=\"font-size-12\">\n            {suggestion.name}\n        </div>\n    )\n    const onSuggestionSelected = (val) => {\n        setSelected(val.currentTarget.textContent)\n        props.onChange && props.onChange(val.currentTarget.textContent || '')\n    }\n\n    useEffect(() => {\n        setSelected(defaultValue || '');\n    }, [defaultValue]);\n\n    const onSuggestionsFetchRequested = ({value}) => {\n        setSuggestions(getSuggestions(value))\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([])\n    };\n\n    return (\n        <AvAutoSuggestInput\n            validate={{\n                required: {value: props.required === true, errorMessage: messages.required}\n            }}\n            name={props.name}\n            value={selected}\n            placeholder={props.placeholder}\n            disabled={props.disabled}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            onSuggestionSelected={onSuggestionSelected}\n            onChange={(e) => setSelected(e.target.value || '')}\n            suggestions={suggestions || []}\n        />\n    )\n}\n\nAutocomplete.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array,\n    defaultValue: PropTypes.any,\n};\n\nclass AvAutoSuggestInput extends AvBaseInput {\n    render() {\n        const {name, value, onChange, onSuggestionSelected, onSuggestionsFetchRequested, onSuggestionsClearRequested, getSuggestionValue, renderSuggestion, suggestions, placeholder, helpMessage, disabled} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <Autosuggest\n                        name={name}\n                        suggestions={suggestions}\n                        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                        onSuggestionsClearRequested={onSuggestionsClearRequested}\n                        getSuggestionValue={getSuggestionValue}\n                        renderSuggestion={renderSuggestion}\n                        onSuggestionSelected={onSuggestionSelected}\n                        inputProps={{\n                            placeholder: placeholder,\n                            value,\n                            onChange: onChange,\n                        }}\n                        theme={{\n                            ...theme,\n                            input: 'form-control',\n                            container: 'react-autosuggest__container',\n                            containerOpen: 'react-autosuggest__container--open',\n                            inputOpen: 'react-autosuggest__input--open',\n                            inputFocused: 'react-autosuggest__input--focused',\n                            suggestionsContainer: 'react-autosuggest__suggestions-container',\n                            suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',\n                            suggestionsList: 'react-autosuggest__suggestions-list',\n                            suggestion: 'react-autosuggest__suggestion',\n                            suggestionFirst: 'react-autosuggest__suggestion--first',\n                            suggestionHighlighted: 'react-autosuggest__suggestion--highlighted',\n                            sectionContainer: 'react-autosuggest__section-container',\n                            sectionContainerFirst: 'react-autosuggest__section-container--first',\n                            sectionTitle: 'react-autosuggest__section-title'\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default Autocomplete;\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputDate.js",["1349"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Select from \"react-select\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\nimport \"flatpickr/dist/themes/material_blue.css\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"flatpickr/dist/l10n/es.js\";\nimport \"../Fields/scss/customInputDate.scss\";\n\nexport const DATE_MODES = {\n    SINGLE: 'single',\n    MULTIPLE: 'multiple',\n    RANGE: 'range',\n};\n\nconst InputDateField = (props) => {\n    const [ selected, setSelected ] = useState(null);\n    const {defaultValue, options} = props;\n\n    useEffect(() => {\n        /*if(options && options.length > 0) {\n            if(defaultValue) {\n                const selected = options.filter(item => item.value === defaultValue)[0];\n                setSelected(selected);\n            } else {\n                setSelected(null);\n            }\n        }*/\n        setSelected(defaultValue ? defaultValue: null);\n    }, [options, defaultValue]);\n\n    return (\n        <AvSearchInput\n            validate={\n                {\n                    required: { value: props.required ? true : false, errorMessage: messages.required }\n                }\n            }\n            name={props.name}\n            value={selected}\n            placeholder={props.placeholder}\n            onChange={(date) => {\n                setSelected(date)\n                if(props.onChange){\n                    props.onChange(date);\n                }\n            }}\n            mode={props.mode}\n            classNamePrefix=\"select2-selection\"\n        />\n    )}\n\nInputDateField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array,\n    defaultValue: PropTypes.any,\n    mode: PropTypes.string\n};\n\nclass AvSearchInput extends AvBaseInput {\n    render() {\n        const { name, value, onChange, validate, placeholder, helpMessage,mode } = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <Flatpickr\n                        id={name}\n                        className=\"form-control d-block\"\n                        validate={validate}\n                        value={value}\n                        name={name}\n                        placeholder={placeholder}\n                        options={{\n                            mode: mode || DATE_MODES.SINGLE,\n                            dateFormat: \"Y-m-d\",\n                            locale: 'es'\n                        }}\n                        onChange={onChange}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default InputDateField;\n","/Users/ramon/Repositories/lucy-moie/src/store/reports/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/actions.js",["1350"],"import {\n    GET_TEMPLATES,\n    GET_TEMPLATES_SUCCESS,\n    GET_TEMPLATES_FAILED,\n    GET_TEMPLATE,\n    GET_TEMPLATE_SUCCESS,\n    GET_TEMPLATE_FAILED,\n    REGISTER_TEMPLATE,\n    REGISTER_TEMPLATE_SUCCESS,\n    REGISTER_TEMPLATE_FAILED,\n    UPDATE_TEMPLATE,\n    UPDATE_TEMPLATE_SUCCESS,\n    UPDATE_TEMPLATE_FAILED, DELETE_TEMPLATE\n} from \"./actionTypes\";\n\nexport const getTemplates = (conditional, limit, offset) => ({\n    type: GET_TEMPLATES,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getTemplatesSuccess = (data, meta) => ({\n    type: GET_TEMPLATES_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getTemplatesFailed = error => ({\n    type: GET_TEMPLATES_FAILED,\n    payload: error,\n})\n\nexport const getTemplate = id => ({\n    type: GET_TEMPLATE,\n    id\n})\n\nexport const getTemplateSuccess = data => ({\n    type: GET_TEMPLATE_SUCCESS,\n    payload: data,\n})\n\nexport const getTemplateFailed = error => ({\n    type: GET_TEMPLATE_FAILED,\n    payload: error,\n})\n\nexport const registersTemplate = (data, history) => {\n    return {\n        type: REGISTER_TEMPLATE,\n        payload: { data, history },\n    }\n}\n\nexport const registerTemplateSuccess = data => {\n    return {\n        type: REGISTER_TEMPLATE_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const registerTemplateFailed = data => {\n    return {\n        type: REGISTER_TEMPLATE_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateTemplate = (id, data, history) => {\n    return {\n        type: UPDATE_TEMPLATE,\n        payload: { id, data, history },\n    }\n}\nexport const updateTemplateSuccess = data => {\n    return {\n        type: UPDATE_TEMPLATE_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateTemplateFail = error => {\n    return {\n        type: UPDATE_TEMPLATE_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsList.js",["1351","1352","1353","1354","1355"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getPayments} from \"../../../store/payments/actions\";\nimport paymentsColumns from \"./paymentsColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport PaymentOverlay from \"../paymentOverlay\";\n\nconst list = [{\n    id: 1,\n    name: \"asdasdasd\",\n    email: \"yoel.gonzalez@warnermedia.com\",\n    cellphone: \"+57 434 333 4\",\n    paymentForm: \"Transferencia bancaria\",\n    originBank: \"Banco Colpatria\",\n    targetBank: \"BANCO1\",\n    consignmentAmount: \"43434334\",\n    consignmentNumber: \"sdfsfdffsd\",\n    date: \"2021-11-13\"\n}]\n\nconst PaymentsList = props => {\n    const {payments, meta, onGetPayments, onDeletePayment, loading, refresh} = props;\n    const [paymentsList, setPaymentsList] = useState([])\n    const [paymentSelected, setPaymentSelected] = useState(null);\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        onGetPayments();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetPayments()\n    }, [onGetPayments])\n\n    useEffect(() => {\n        setPaymentsList(payments)\n        // setPaymentsList(list)\n    }, [payments])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetPayments(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetPayments(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeletePayment(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = paymentsColumns(setPaymentSelected);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n    };\n\n    return (\n        <>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={paymentsList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Pagos</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}></i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/payment\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo pago\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\n                                                                    \"table table-centered table-nowrap mb-0\"\n                                                                }\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            {paymentSelected && (<PaymentOverlay payment={paymentSelected} showOverlay={true} onCloseOverlay={() => setPaymentSelected(null)}/>)}\n        </>\n    )\n}\n\nPaymentsList.propTypes = {\n    payments: PropTypes.array,\n    onGetPayments: PropTypes.func,\n    onDeletePayments: PropTypes.func,\n}\n\nconst mapPaymentToProps = state => {\n    const {payments, loading, meta, refresh} = state.Payments\n    return {payments, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetPayments: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getPayments(conditional, limit, page)),\n})\n\nexport default connect(\n    mapPaymentToProps,\n    mapDispatchToProps\n)(PaymentsList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeList.js",["1356","1357","1358","1359","1360","1361","1362"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getOffices} from \"../../../store/office/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport officeColumns from \"./officeColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport OfficeReportForm from \"../../Reports/OfficeReportForm\";\n\nconst OfficeList = props => {\n    const {states, offices, meta, getStates, onGetOffices, loading, refresh} = props; //onDeleteOffice,\n    const [officeList, setOfficeList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openReportModal, setOpenReportModal] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetOffices();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetOffices()\n        //getStates();\n    }, [onGetOffices])\n\n    useEffect(() => {\n        setOfficeList(offices);\n    }, [offices])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetOffices(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetOffices(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteOffice(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = officeColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n    };\n\n    const NoDataIndication = () => (\n        <div className=\"spinner\">\n            <div className=\"rect1\"/>\n            <div className=\"rect2\"/>\n            <div className=\"rect3\"/>\n            <div className=\"rect4\"/>\n            <div className=\"rect5\"/>\n        </div>\n    );\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={officeList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-truck me-2\"></i> Despachos</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n\n                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenReportModal(true)}>\n                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n\n                                                        <Link to={\"/office\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"> </i> Generar Despacho\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n\n\n            <CustomModal title={\"Generar reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <OfficeReportForm onCloseModal={() => setOpenReportModal(false)}/>\n            </CustomModal>\n        </Row>\n    )\n}\n\nOfficeList.propTypes = {\n    states: PropTypes.array,\n    onGetOffices: PropTypes.func,\n    //onDeleteOffice: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, offices, loading, meta, refresh} = state.Office\n    return {states, offices, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    //getStates,\n    onGetOffices: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getOffices(conditional, limit, page)),\n    //onDeleteOffice: (id) => dispatch(deleteOffice(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OfficeList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billList.js",["1363","1364","1365","1366","1367","1368"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getBills, registerBill} from \"../../../store/bill/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport billColumns from \"./billColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport Conditionals from \"../../../common/conditionals\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport OrderList from \"../../Orders/orderList\";\nimport BillGenerateReportForm from \"../../Reports/BillsReportForm\";\n\nconst BillList = props => {\n    const {states, bills, meta, getStates, onGetBills, loading, refresh} = props; //onDeleteBill,\n    const [billList, setBillList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const [openReportModal, setOpenReportModal] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n    }\n    useEffect(() => {\n        onGetBills();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetBills();\n        //getStates();\n    }, [onGetBills])\n\n    useEffect(() => {\n        setBillList(bills);\n    }, [bills])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetBills(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetBills(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteBill(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = billColumns(onDelete);\n\n    const addOrders = () => {\n        const conditions = new Conditionals.Condition;\n        // conditions.add(\"status\", 4, Conditionals.OPERATORS.EQUAL);//Enviada\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        console.log('conditions', conditions);\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const onCloseModal = () => {\n        setOpenOrdersModal(false);\n    };\n    const onAcceptModal = (conditionals) => {\n        console.log('conditionals', conditionals)\n        if (conditionals && conditionals.length > 0) {\n            const value = conditionals[0].value;\n            const ids = value.split ? value.split('::') : [value];\n            props.onCreateBill({ids: ids});\n        }\n        setOpenOrdersModal(false);\n    };\n\n    return (\n        <>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions}/>\n            </CustomModal>\n            <CustomModal title={\"Generar Reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <BillGenerateReportForm onCloseModal={(reload) => setOpenReportModal(false)}/>\n            </CustomModal>\n            <Row>\n\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={billList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-bill me-2\"></i> Facturas</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                                <Button onClick={() => setOpenReportModal(true)}>\n                                                                    <i className=\"mdi mdi-file\"> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                            <Button color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\" onClick={addOrders}>\n                                                                <i className=\"mdi mdi-plus\"> </i> Generar Factura\n                                                            </Button>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nBillList.propTypes = {\n    states: PropTypes.array,\n    onGetBills: PropTypes.func,\n    //onDeleteBill: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, bills, loading, meta, refresh} = state.Bill\n    return {states, bills, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetBills: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getBills(conditional, limit, page)),\n    onCreateBill: (ids) => dispatch(registerBill(ids)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BillList)\n","/Users/ramon/Repositories/lucy-moie/src/components/mentions/MultiMention.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/mentions/useHookValue.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateList.js",["1369","1370","1371","1372","1373","1374","1375","1376"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport paginationFactory, {\n    PaginationListStandalone,\n    PaginationProvider,\n} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModal, ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {getTemplates} from \"../../../store/template/actions\";\nimport templateColumns from \"./templateColumn\";\nimport Template from \"../../../store/template/reducer\";\n\nconst TemplateList = props => {\n    const {templates, meta, onGetTemplates, onDeleteState, loading, refresh} = props;\n    const [templatesList, setTemplatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetTemplates();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetTemplates()\n    }, [onGetTemplates])\n\n    useEffect(() => {\n        setTemplatesList(templates)\n    }, [templates])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetTemplates(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetTemplates(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Plantilla?',\n            description: 'Usted está eliminado esta Plantilla, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = templateColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n    };\n\n    const NoDataIndication = () => (\n        <div className=\"spinner\">\n            <div className=\"rect1\"/>\n            <div className=\"rect2\"/>\n            <div className=\"rect3\"/>\n            <div className=\"rect4\"/>\n            <div className=\"rect5\"/>\n        </div>\n    );\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={templatesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Plantillas</h4>\n                                                           {/* {!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Link to={\"/template\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"> </i> Nueva Plantilla\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nTemplateList.propTypes = {\n    templates: PropTypes.array,\n    onGetTemplates: PropTypes.func,\n    // onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {templates, loading, meta, refresh} = state.Template\n    return {templates, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetTemplates: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getTemplates(conditional, limit, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TemplateList)\n","/Users/ramon/Repositories/lucy-moie/src/store/bill/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/PieChart.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleList.js",["1377","1378","1379"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {TableFilter} from \"../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../common/converters\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport postSaleColumns from \"./postSaleColumn\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {doPrintBatchRequest, getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {importFile} from \"../../store/office/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport PostSaleImportFileForm from \"./PostSaleImportFileForm\";\nimport PostSaleReportForm from \"../Reports/PostSaleReportForm\";\n\nconst PostSaleList = props => {\n    const {orders, meta, onGetOrders, loading, refresh, customActions} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openImportFileModal, setOpenImportFileModal] = useState(false);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [filterable, setFilterable] = useState(true);\n    const [openReportModal, setOpenReportModal] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        if (null !== refresh) onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }, [refresh])\n\n    useEffect(() => {\n        onGetOrders(conditional);\n        if (customActions) {\n            setFilterable(false);\n        }\n    }, [onGetOrders])\n\n    useEffect(() => {\n        setStatesList(orders)\n    }, [orders])\n\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetOrders(conditional, DEFAULT_PAGE_LIMIT, p * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetOrders(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const handleImportFile = (reload) => {\n        setOpenImportFileModal(false);\n        if(reload) onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }\n\n    const columns = postSaleColumns();\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter && filterable}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter && filterable ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Post Venta</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end d-flex\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Tooltip placement=\"bottom\" title=\"Importar archivo\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenImportFileModal(true)}>\n                                                                <i className={\"mdi mdi-file-excel\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenReportModal(true)}>\n                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n            <CustomModal title={\"Importar\"} showFooter={false} isOpen={openImportFileModal} onClose={() => setOpenImportFileModal(false)}>\n                <PostSaleImportFileForm onCloseModal={(reload) => handleImportFile(reload)}/>\n            </CustomModal>\n            <CustomModal title={\"Generar reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <PostSaleReportForm onCloseModal={() => setOpenReportModal(false)}/>\n            </CustomModal>\n        </Row>\n    )\n}\n\nPostSaleList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh} = state.Order\n    return {orders, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onImportFile: (data) => dispatch(importFile(data)),\n    onGetOrders: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => {\n        if(!conditional) conditional = [];\n        conditional.push({field:'orderDelivery.tracking', value:'', operator: Conditionals.OPERATORS.NOT_NULL});\n        dispatch(getOrders(conditional, limit, page))\n    },\n    onPrintBatchRequest: (conditional) => dispatch(doPrintBatchRequest(conditional)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PostSaleList)\n","/Users/ramon/Repositories/lucy-moie/src/helpers/api_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/configsList.js",["1380","1381","1382","1383","1384"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\n\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {deleteFieldOption, getFieldOptionByGroup, getFieldOptionByGroups, getProductFieldOption, registerFieldOption, updateFieldOption} from \"../../store/fieldOptions/actions\";\nimport {GROUPS, NAMES} from \"../../common/constants\";\nimport {map} from \"lodash\";\nimport {FieldNumber, FieldSelect, FieldText} from \"../../components/Fields\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst ConfigsList = props => {\n    const {fieldOptions, refresh, onGetByGroup, onCreateFieldOption, onUpdateFieldOption, onDeleteFieldOption} = props;\n\n    const [groupsList, setGroupsList] = useState([GROUPS.OP_GROUPS]);\n    const [groupSelected, setGroupSelected] = useState(null);\n    const [fieldOptionsList, setFieldOptionsList] = useState([]);\n    const [fieldOption, setFieldOption] = useState({options: []});\n    const [fieldOptionEdited, setFieldOptionEdited] = useState(null);\n\n    useEffect(() => {\n        onGetByGroup(groupSelected || GROUPS.OP_GROUPS);\n    }, [onGetByGroup, refresh, groupSelected]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            const options = {};\n\n            if (fieldOptions.some(item => item.groups === GROUPS.OP_GROUPS)) {\n                const list = fieldOptions.map(item => item.name);\n                list.unshift(GROUPS.OP_GROUPS);\n                setGroupsList(list);\n            }\n\n            if (groupSelected) {\n                fieldOptions.forEach(op => {\n                    const key = op.groups;\n                    if (!options[key]) {\n                        options[key] = {groups: op.groups, options: []};\n                    }\n                    options[key].options.push({id: op.id, name: op.name, value: op.value});\n                });\n                const list = [];\n                Object.keys(options).forEach(op => list.push(options[op]))\n                setFieldOptionsList(list);\n\n                setFieldOption(list.find(l => l.groups === groupSelected));\n                setFieldOptionEdited(null);\n            }\n        } else {\n            setFieldOptionsList([])\n            setFieldOption({options: []});\n        }\n    }, [fieldOptions])\n\n    const onAddFieldOptions = (ev, data) => {\n        if (!data.groups || !data.groups.value) return;\n\n        const items = fieldOptionsList ? fieldOptionsList : [];\n\n        //If item doesnt exist It will be added\n        if (items.some(i => i.groups === data.groups.value)) return;\n\n        const item = {groups: data.groups.value, options: [{id: null, name: null, value: ''}]};\n        items.push(item);\n        setFieldOptionsList(items);\n        setGroupSelected(data.groups.value);\n    };\n\n    const onAddFieldOption = () => {\n        //to avoid multiple\n        if (fieldOption && fieldOption.options.some(item => !item.id)) return;\n\n        setFieldOptionEdited(null);\n        setFieldOption({...fieldOption, options: [...fieldOption.options, {id: null, name: null, value: ''}]});\n    };\n\n    const onDeleteOption = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este registro?',\n            description: 'Usted está eliminado este registro, una vez eliminado no podrá ser recuperado.',\n            id: '_fieldOptionsModal',\n            onConfirm: () => onDeleteFieldOption(id)\n        });\n    };\n\n    const handleValidSubmit = (ev, data) => {\n        const name = data.name ? data.name : data.value;\n\n        //avoid duplicate\n        if (fieldOption && fieldOption.options.some(item => item.id && item.name === name && item.value === data.value)) {\n            const optionGroup = {...fieldOption};\n            const option = optionGroup.options.find(item => !item.id && item.name === name && item.value === data.value);\n            optionGroup.options.splice(optionGroup.options.indexOf(option), 1);\n            setFieldOption(optionGroup);\n            return;\n        }\n\n        const payload = {\n            groups: groupSelected,\n            name: data.name ? data.name : data.value,\n            value: data.value\n        }\n\n        if (fieldOptionEdited) {\n            onUpdateFieldOption(fieldOptionEdited, payload);\n        } else {\n            onCreateFieldOption(payload);\n        }\n    };\n\n    return (\n        <Row>\n            <Col md={5}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onAddFieldOptions(e, v)}>\n                            <Row>\n                                <Col>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '80%'}}>Grupo</th>\n                                            <th style={{width: '20%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(groupsList, (group, key) => (\n                                            <tr key={key} className={group === groupSelected ? 'bg-light' : ''}>\n                                                <td>{group}</td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setGroupSelected(group)}>\n                                                                <i className=\"uil uil-eye font-size-18\"> </i>\n                                                            </button>\n                                                        </li>\n                                                    </ul>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </Col>\n            <Col md={7}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col className=\"text-right p-2\">\n                                    {groupSelected && (\n                                        <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary\" onClick={() => onAddFieldOption()}>\n                                            <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                        </button>\n                                    )}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th>Nombre</th>\n                                            {groupSelected === GROUPS.REFERENCE_KEY && (\n                                                <>\n                                                    <th>Inicia en</th>\n                                                </>\n                                            )}\n                                            <th style={{width: '20%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(fieldOption.options, (option, key) => (\n                                            <tr key={key}>\n                                                {groupSelected === GROUPS.REFERENCE_KEY && (\n                                                    <>\n                                                        {fieldOptionEdited !== option.id && (\n                                                            <>\n                                                                <td>{option.name}</td>\n                                                                <td>{option.value}</td>\n                                                            </>\n                                                        )}\n                                                        {fieldOptionEdited === option.id && (\n                                                            <>\n                                                                <td>\n                                                                    <FieldText\n                                                                        id={\"name\"}\n                                                                        name={\"name\"}\n                                                                        value={option.name}\n                                                                        required/>\n                                                                </td>\n                                                                <td>\n                                                                    <FieldNumber\n                                                                        id={\"value\"}\n                                                                        name={\"value\"}\n                                                                        value={option.value}\n                                                                        required/>\n                                                                </td>\n                                                            </>\n                                                        )}\n                                                    </>\n                                                )}\n\n                                                {groupSelected !== GROUPS.REFERENCE_KEY && (\n                                                    <td>\n                                                        {fieldOptionEdited !== option.id && (\n                                                            <>\n                                                                {option.value}\n                                                            </>\n                                                        )}\n                                                        {fieldOptionEdited === option.id && (\n                                                            <>\n                                                                <FieldText\n                                                                    id={\"value\"}\n                                                                    name={\"value\"}\n                                                                    value={option.value}\n                                                                    required/>\n                                                            </>\n                                                        )}\n                                                    </td>\n                                                )}\n                                                <td className=\"text-center\">\n                                                    <div className=\"btn-group\">\n\n                                                        {(fieldOptionEdited !== option.id && option.id) && (\n                                                            <div>\n                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={fieldOptionEdited} onClick={() => setFieldOptionEdited(option.id)}>\n                                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                </button>\n                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={fieldOptionEdited} onClick={() => onDeleteOption(option.id)}>\n                                                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                </button>\n                                                            </div>\n                                                        )}\n                                                        {(fieldOptionEdited === option.id || !option.id) && (\n                                                            <div>\n                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                    <i className=\"uil uil-check font-size-18\"> </i>\n                                                                </button>\n                                                                {option.id && (\n                                                                    <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setFieldOptionEdited(null)}>\n                                                                        <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                    </button>\n                                                                )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nConfigsList.propTypes = {\n    fieldOptions: PropTypes.array,\n    onGetFieldOptions: PropTypes.func,\n    onCreateFieldOption: PropTypes.func,\n    onUpdateFieldOption: PropTypes.func,\n    onDeleteFieldOption: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {fieldOptions, loading, meta, refresh} = state.FieldOption\n    return {fieldOptions, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetByGroup: (group) => dispatch(getFieldOptionByGroup(group, 500, 0)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n    onUpdateFieldOption: (id, data, history) => dispatch(updateFieldOption(id, data, history)),\n    onDeleteFieldOption: (id, history) => dispatch(deleteFieldOption(id, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ConfigsList)\n","/Users/ramon/Repositories/lucy-moie/src/store/category/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userList.js",["1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {getUsers, setUserToChangePassword} from \"../../../store/user/actions\";\nimport userColumns from \"./userColumn\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport ForgetPassword from \"./forgetPassword\";\n\nconst UserList = props => {\n    const {users, meta, onGetUsers, onSelectUser, loading, refresh} = props;\n    const [usersList, setCategoriesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [userSelected, setUserSelected] = useState(null);\n    const [newPassword, setNewPassword] = useState(null);\n    const [confirmPassword, setConfirmPassword] = useState(null);\n    const [openChangePasswordModal, setOpenChangePasswordModal] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetUsers();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetUsers()\n    }, [onGetUsers])\n\n    useEffect(() => {\n        setCategoriesList(users)\n    }, [users])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetUsers(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetUsers(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const columns = userColumns(onSelectUser);\n\n    return (\n        <>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={usersList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-users-alt me-2\"></i> Usuarios</h4>\n                                                        </div>\n                                                    </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/user\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nuevo usuario\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <ForgetPassword/>\n        </>\n    )\n}\n\nUserList.propTypes = {\n    users: PropTypes.array,\n    onGetUsers: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n    onSelectUser: (user) => dispatch(setUserToChangePassword(user)),\n    // onDeleteStates: (id) => dispatch(deleteState(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserList)\n","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityList.js",["1396","1397","1398","1399","1400","1401","1402","1403","1404","1405"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport paginationFactory, {\n    PaginationListStandalone,\n    PaginationProvider,\n} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModal, ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {deleteMunicipality, getMunicipalities, getStates} from \"../../../store/location/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport municipalityColumns from \"./municipalityColumns\";\nimport {normalizeColumnsList, statesToOptions} from \"../../../common/converters\";\n\nconst MunicipalityList = props => {\n    const {states, municipalities, meta, getStates, onGetMunicipalities, onDeleteMunicipality, loading, refresh} = props;\n    const [municipalityList, setMunicipalityList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetMunicipalities();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetMunicipalities()\n        getStates();\n    }, [onGetMunicipalities])\n\n    useEffect(() => {\n        setMunicipalityList(municipalities.map(m => {\n            m.state = m.state.name;\n            return m;\n        }))\n    }, [municipalities])\n\n    /*useEffect(() => {\n        const cols = statesColumns(onDelete).map(col => {\n            if (col.dataField === 'state' && (!col.filterOptions || !col.filterOptions.length)) {\n                col.filterOptions = statesToOptions(states);\n            }\n            return col;\n        });\n        setColumns(cols);\n    }, [states])*/\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetMunicipalities(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetMunicipalities(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteMunicipality(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = municipalityColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n    };\n\n    const NoDataIndication = () => (\n        <div className=\"spinner\">\n            <div className=\"rect1\"/>\n            <div className=\"rect2\"/>\n            <div className=\"rect3\"/>\n            <div className=\"rect4\"/>\n            <div className=\"rect5\"/>\n        </div>\n    );\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={municipalityList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Municipios</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Link to={\"/municipality\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"> </i> Nuevo Municipio\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nMunicipalityList.propTypes = {\n    states: PropTypes.array,\n    onGetMunicipalities: PropTypes.func,\n    onDeleteMunicipality: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, municipalities, loading, meta, refresh} = state.Location\n    return {states, municipalities, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    getStates,\n    onGetMunicipalities: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getMunicipalities(conditional, limit, page)),\n    onDeleteMunicipality: (id) => dispatch(deleteMunicipality(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MunicipalityList)\n","/Users/ramon/Repositories/lucy-moie/src/store/payments/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesList.js",["1406","1407","1408","1409"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {deleteState, getStates} from \"../../../store/location/actions\";\nimport statesColumns from \"./statesColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\n\nconst StatesList = props => {\n    const {states, meta, onGetStates, onDeleteState, loading, refresh} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetStates();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetStates()\n    }, [onGetStates])\n\n    useEffect(() => {\n        setStatesList(states)\n    }, [states])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetStates(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetStates(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = statesColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n    };\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Estados</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Link to={\"/state\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"></i> Nuevo Estado\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nStatesList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, loading, meta, refresh} = state.Location\n    return {states, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetStates: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getStates(conditional, limit, page)),\n    onDeleteStates: (id) => dispatch(deleteState(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(StatesList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryList.js",["1410","1411","1412","1413","1414"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {doCatalogPrintBatchRequest, getCategories} from \"../../../store/category/actions\";\nimport categoryColumns from \"./categoryColumn\";\nimport Conditionals from \"../../../common/conditionals\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport StatsRegisteredCard from \"../../../components/Common/StatsRegisteredCard\";\nimport CountUp from \"react-countup\";\nimport {getCatalogBatchRequest} from \"../../../helpers/service\";\nimport {formatDate} from \"../../../common/utils\";\n\nconst CategoryList = props => {\n    const {categories, onGetCategories, onDeleteState, getCatalogBatchRequest, onCatalogPrintBatchRequest, refresh} = props;\n    const [categoriesList, setCategoriesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [printCategoriesId, setPrintCategoriesId] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n\n    useEffect(() => {\n        if(currentPage) onGetCategories(conditional, DEFAULT_PAGE_LIMIT,currentPage*DEFAULT_PAGE_LIMIT);\n        onGetCatalogBatchRequest();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetCategories();\n        onGetCatalogBatchRequest();\n    }, [onGetCategories])\n\n    useEffect(() => {\n        setCategoriesList(categories)\n    }, [categories])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetCategories(conditional, DEFAULT_PAGE_LIMIT, p*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetCategories(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n    const onGetCatalogBatchRequest = () => {\n        getCatalogBatchRequest().then(resp => {\n            if(resp && resp.data && resp.data.length > 0){\n                let arr = [...resp.data];\n                arr = arr.sort((a, b) => a.id === b.id ? 0 : (a.id > b.id) ? -1 : 1);\n                if(arr.length > 4){\n                    arr.splice(4);\n                }\n                setCatalogs(arr);\n            }\n        });\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const printCatalogs= () => {\n        let conditionals = conditional || [];\n\n        if(printCategoriesId && printCategoriesId.length === 1){\n            conditionals.push({field:'id', value:printCategoriesId[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if(printCategoriesId && printCategoriesId.length > 1){\n            conditionals.push({field:'id', value:printCategoriesId.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n        onCatalogPrintBatchRequest(conditionals);\n    }\n\n    const columns = categoryColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        onSelect: (row) => {\n            let list = [...printCategoriesId]\n            const index = list.indexOf(row.id);\n            if(index >= 0){\n                list.splice(index, 1);\n            } else{\n                list.push(row.id);\n            }\n            setPrintCategoriesId(list);\n        },\n        onSelectAll: (rows) => {\n            setPrintCategoriesId([]);\n        }\n    };\n\n    return (\n        <>\n            {!!(catalogs && catalogs.length > 0) && (\n                <Row className=\"text-center\">\n                    {catalogs.map((catalog, k) => (\n                        <Col sm={6} md={3} key={k}>\n                            <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col xs={8}>\n                                            <h5 className=\"mb-1 mt-2\"> Catálogo</h5>\n                                            <div className=\"text-muted mb-0 mt-3\">\n                                                <small>{formatDate(catalog.createdAt)}</small>\n                                            </div>\n                                        </Col>\n                                        <Col xs={4}>\n                                            <Tooltip placement=\"bottom\" title=\"Imprimir Catálogo\" aria-label=\"add\">\n                                                <Button color=\"primary\" onClick={() => onCatalogPrintBatchRequest(null, catalog)}>\n                                                    <i className=\"mdi mdi-printer font-size-24\"> </i>\n                                                </Button>\n                                            </Tooltip>\n                                        </Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n\n                </Row>\n            )}\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={categoriesList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-box me-2 me-2\"></i> Categorias</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Tooltip placement=\"bottom\" title=\"Impresión multiple\" aria-label=\"add\">\n                                                                <Button color=\"primary\" onClick={() => printCatalogs()} disabled={printCategoriesId.length === 0 && (!conditional || conditional.length === 0)}>\n                                                                    <i className=\"mdi mdi-printer\"> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                            <Link to={\"/category\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nueva Categoria\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                selectRow={selectRowProp}\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nCategoryList.propTypes = {\n    categories: PropTypes.array,\n    onGetCategories: PropTypes.func,\n    // onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {categories, loading, meta, refresh} = state.Category\n    return {categories, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetCategories: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCategories(conditional, limit, page)),\n    onCatalogPrintBatchRequest: (conditional, catalog ) => dispatch(doCatalogPrintBatchRequest(conditional, catalog)),\n    getCatalogBatchRequest,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CategoryList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/products-list.js",["1415","1416","1417","1418","1419"],"import {Card, CardBody, Col, Row} from \"reactstrap\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {connect} from \"react-redux\";\nimport {getProducts} from \"../../../store/product/actions\";\nimport React, {useEffect, useState} from \"react\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport paginationFactory, {PaginationListStandalone, PaginationProvider} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport productColumns from \"./productColumn\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport {countProductsByStatus} from \"../../../helpers/service\";\n\n\nconst series2 = [70]\n\nconst options2 = {\n    fill: {\n        colors: ['#34c38f']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst series3 = [55]\n\nconst options3 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\n\n/*\n\nconst reportss = [\n    {\n        id: 1,\n        icon: \"mdi mdi-clock-five-time\",\n        title: \"Productos\",\n        value: pageOptions.totalSize,\n        prefix: \"\",\n        suffix: \"\",\n        decimal: 0,\n        charttype: \"bar\",\n        chartheight: 40,\n        chartwidth: 70,\n        badgeValue: parseInt(statusGroup.filter(s => s.status === 1 ).map(s => s.count)),\n        color: \"success\",\n        desc: \"activos\",\n        badgeValue2: parseInt(statusGroup.filter(s => s.status === 0 ).map(s => s.count)),\n        color2: \"danger\",\n        desc2: \"inactivos\",\n        series: series1,\n        options: options1,\n    },\n    {\n        id: 2,\n        icon: \"mdi mdi-arrow-up-bold\",\n        title: \"Productos publicados\",\n        value: parseInt(pageOptions.totalSize * 0.67),\n        decimal: 0,\n        charttype: \"radialBar\",\n        chartheight: 45,\n        chartwidth: 45,\n        prefix: \"\",\n        suffix: \"\",\n        badgeValue: \"0.2%\",\n        color: \"success\",\n        desc: \"desde ayer\",\n        series: series2,\n        options: options2,\n    },\n    {\n        id: 3,\n        icon: \"mdi mdi-arrow-up-bold\",\n        title: \"Agregados en esta semana\",\n        value: 265,\n        decimal: 0,\n        prefix: \"\",\n        suffix: \"\",\n        charttype: \"radialBar\",\n        chartheight: 45,\n        chartwidth: 45,\n        badgeValue: \"0.24%\",\n        color: \"success\",\n        desc: \"desde hace una semana\",\n        series: series3,\n        options: options3,\n    },\n];\n*/\n\n\nconst ProductList = props => {\n\n    const {refresh, onGetProducts, countProductsByStatus, products, meta} = props;\n    const [productList, setProductList] = useState([]);\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters || 0,\n        custom: true,\n    };\n\n    useEffect(() => {\n        onGetProducts();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetProducts();\n    }, [onGetProducts])\n\n    useEffect(() => {\n        setProductList(products)\n    }, [products])\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetProducts(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetProducts(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const columns = productColumns();\n\n    return (\n        <>\n            <Row className=\"text-center\">\n                <Col md={4}>\n                    <StatsStatusCard title=\"Productos\" getData={countProductsByStatus}/>\n                </Col>\n            </Row>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={productList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-box me-2 me-2\"></i> Productos</h4>\n                                                                {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/product\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nuevo Producto\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                onTableChange={handleTableChange}\n                                                                {...toolkitProps.baseProps}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nProductList.propTypes = {\n    onGetProducts: PropTypes.func,\n    products: PropTypes.array,\n    meta: PropTypes.object,\n    loading: PropTypes.bool,\n    refresh: PropTypes.bool,\n}\n\nconst mapStateToProps = state => {\n    const {products, loading, meta, refresh, custom} = state.Product\n    return {customData: custom, products, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProducts: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getProducts(conditional, limit, page)),\n    countProductsByStatus,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductList);\n","/Users/ramon/Repositories/lucy-moie/src/store/comment/actions.js",["1420","1421","1422"],"import {\n    GET_COMMENTS,\n    GET_COMMENTS_SUCCESS,\n    GET_COMMENTS_FAILED,\n    GET_COMMENT,\n    GET_COMMENT_SUCCESS,\n    GET_COMMENT_FAILED,\n    REGISTER_COMMENT,\n    REGISTER_COMMENT_SUCCESS,\n    REGISTER_COMMENT_FAILED,\n    UPDATE_COMMENT,\n    UPDATE_COMMENT_SUCCESS,\n    UPDATE_COMMENT_FAILED, DELETE_COMMENT, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_FAILED,\n} from \"./actionTypes\";\nimport {queryCustomers} from \"../customer/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\n\nexport const getCommentsByEntity = (entity, idRelated) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('entity', entity, Conditionals.OPERATORS.EQUAL);\n    conditions.add('idRelated', idRelated, Conditionals.OPERATORS.EQUAL);\n    return getComments(conditions.all(), 100, 0);\n}\n\nexport const getComments = (conditional, limit, offset) => ({\n    type: GET_COMMENTS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\nexport const getCommentsSuccess = (data, meta) => ({\n    type: GET_COMMENTS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\nexport const getCommentsFailed = error => ({\n    type: GET_COMMENTS_FAILED,\n    payload: error,\n})\nexport const getComment = id => ({\n    type: GET_COMMENT,\n    id\n})\nexport const getCommentSuccess = data => ({\n    type: GET_COMMENT_SUCCESS,\n    payload: data,\n})\nexport const getCommentFailed = error => ({\n    type: GET_COMMENT_FAILED,\n    payload: error,\n})\nexport const registerComment = (idRelated, data) => {\n    return {\n        type: REGISTER_COMMENT,\n        payload: {idRelated, data},\n    }\n}\nexport const registerCommentSuccess = data => {\n    return {\n        type: REGISTER_COMMENT_SUCCESS,\n        payload: data.comment,\n    }\n}\nexport const registerCommentFailed = data => {\n    return {\n        type: REGISTER_COMMENT_FAILED,\n        payload: data,\n    }\n}\nexport const updateComment = (id, data, history) => {\n    return {\n        type: UPDATE_COMMENT,\n        payload: { id, data, history },\n    }\n}\nexport const updateCommentSuccess = data => {\n    return {\n        type: UPDATE_COMMENT_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateCommentFail = error => {\n    return {\n        type: UPDATE_COMMENT_FAILED,\n        payload: error,\n    }\n}\nexport const deleteComment = (comment) => {\n    return {\n        type: DELETE_COMMENT,\n        payload: { comment },\n    }\n}\nexport const deleteCommentSuccess = id => {\n    return {\n        type: DELETE_COMMENT_SUCCESS,\n        payload: id,\n    }\n}\nexport const deleteCommentFail = error => {\n    return {\n        type: DELETE_COMMENT_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/TimeLine.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/StatusField/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/url_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/ConciliationReportForm.js",["1423","1424"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {DELIVERY_METHODS, REPORT_TYPES} from \"../../common/constants\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst ConciliationReportForm = ({onCloseModal, deliveryMethods, onGetDeliveryMethods, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            deliveryMethod: values.deliveryMethod.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ConciliationReportForm)\n)\n\nConciliationReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/DropZoneIcon.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/Image.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerForm.js",["1425","1426","1427"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCustomer, registerCustomer, updateCustomer} from \"../../store/customer/actions\";\nimport {getMunicipalities, getStates} from \"../../store/location/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {FieldEmail, FieldPhone, FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst CustomerForm = (props) => {\n    const {getCustomer, customer, showAsModal = false, onCloseModal= false, onAcceptModal= false} = props;\n    const [customerData, setCustomerData] = useState({_status: \"true\"});\n\n    // definición de localidades\n    const {getStates, states} = props;\n    const {getMunicipalities, municipalities} = props;\n    const [state, setState] = useState(null);\n    const [municipality, setMunicipality] = useState(null);\n\n    const [statesOptions, setStates] = useState([]);\n    const [municipalitiesOptions, setMunicipalities] = useState([]);\n\n    //carga inicial\n    useEffect(() => {\n        if (props.match.params.id && getCustomer) {\n            getCustomer(props.match.params.id);\n        }\n        getStates();\n    }, [getCustomer]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n\n            //definir estado por defecto\n            const defaultState = customer.state?.id || null;\n            setState(defaultState);\n\n            //definir municipalidad por defecto\n            const defaultMunicipality = customer.municipality?.id || null;\n            setMunicipality(defaultMunicipality);\n\n        }\n    }, [customer]);\n\n    //cargar estados\n    useEffect(() => {\n        if (states && states.length > 0) {\n            const itemsConverter = item => ({\n                label: item.name,\n                value: item.id\n            });\n            setStates(states.map(itemsConverter));\n        } else {\n            setStates([]);\n        }\n    }, [states]);\n\n    //cargar municipios\n    useEffect(() => {\n        if (municipalities && municipalities.length > 0) {\n            const itemsConverter = item => ({\n                label: item.name,\n                value: item.id\n            });\n            setMunicipalities(municipalities.map(itemsConverter));\n        } else {\n            setMunicipalities([]);\n        }\n    }, [municipalities]);\n\n    useEffect(() => {\n        if (state != null) {\n            const conditions = new Conditionals.Condition;\n            conditions.add('state', state);\n            getMunicipalities(conditions.all());\n        }\n    }, [state]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = filteredValues(values);\n        if (!customer.id) {\n            props.registerCustomer(data, props.history)\n        } else {\n            props.updateCustomer(customer.id, data, props.history)\n        }\n        if(showAsModal && onAcceptModal){\n            onAcceptModal(customer.id);\n        }\n    }\n\n    const filteredValues = (values) => {\n        const data = {...values};\n        data.state = values.state?.value;\n        data.municipality = values.municipality?.value;\n        data.status = values._status;\n        data.cellphone = values.cellphone ? values.cellphone.replace(/\\s/g, '') : '';\n        data.phone = values.phone ? values.phone.replace(/\\s/g, '') : '';\n        delete data._status;\n        return data;\n    }\n\n    function handleSelectDepartment(option) {\n        getMunicipalities(option.value);\n        setState(option.value);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row>\n                    <Col xl={12}>\n                        {!showAsModal && (\n                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                <div className={\"float-end\"}>\n                                    <Row>\n                                        <Col>\n                                            ¿Activo?\n                                        </Col>\n                                        <Col>\n                                            <FieldSwitch\n                                                value={customerData.status}\n                                                defaultValue={customerData.status}\n                                                name={\"_status\"}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        )}\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id={\"name\"}\n                                        name={\"name\"}\n                                        value={customerData.name}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom02\">Email <span className=\"text-danger\">*</span></Label>\n                                    <FieldEmail\n                                        name={\"email\"}\n                                        value={customerData.email}\n                                        required/>\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"document\">Documento <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='document'\n                                        name={\"document\"}\n                                        value={customerData.document}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"cellphone\">Teléfono Celular <span className=\"text-danger\">*</span></Label>\n                                    <FieldPhone\n                                        id=\"cellphone\"\n                                        name=\"cellphone\"\n                                        value={customerData.cellphone}\n                                        placeholder=\"\"\n                                        type=\"text\"\n                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                        className=\"form-control\"\n                                        validate={{required: {value: true}}}\n                                        onChange={(value) => setCustomerData({...customerData, cellphone: value})}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"phone\">Teléfono Residencial</Label>\n                                    <FieldPhone\n                                        id=\"phone\"\n                                        name=\"phone\"\n                                        value={customerData.phone}\n                                        placeholder=\"\"\n                                        type=\"text\"\n                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                        className=\"form-control\"\n                                        validate={{required: {value: true}}}\n                                        onChange={(value) => setCustomerData({...customerData, phone: value})}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"state\">Departamento <span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id=\"state\"\n                                        defaultValue={state}\n                                        name={\"state\"}\n                                        placeholder={\"Indique un departamento\"}\n                                        options={statesOptions}\n                                        onChange={handleSelectDepartment}\n                                        required\n                                        isSearchable\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom03\">Municipio <span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id=\"municipality\"\n                                        defaultValue={municipality}\n                                        name={\"municipality\"}\n                                        placeholder={\"Indique un municipio\"}\n                                        options={municipalitiesOptions}\n                                        required\n                                        isSearchable\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom03\">Dirección</Label>\n                                    <FieldText\n                                        id='address'\n                                        name={\"address\"}\n                                        value={customerData.address}\n                                        required/>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        {(customerData.temporalAddress && customerData.temporalAddress.length > 0) && (\n                            <Row>\n                                <hr/>\n                                <p className=\"alert alert-warning\">Este cliente tiene una dirección de una versión anterior, es recomendable que por favor agregue la dirección en la parte superior.</p>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <h4>Dirección temporal</h4>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"validationCustom04\">Departamento temporal</Label>\n                                        <div className=\"form-control\">\n                                            {customerData.temporalAddress[0].state}\n                                        </div>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"validationCustom04\">Municipio temporal</Label>\n                                        <div className=\"form-control\">\n                                            {customerData.temporalAddress[0].municipality}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        )}\n                        <Row>\n                            <Col>\n                                <div className=\"\">\n                                    <AvField\n                                        checked={customerData.hasNotification ? true : false}\n                                        className=\"form-check-input\"\n                                        type=\"checkbox\"\n                                        name=\"hasNotification\"\n                                        label=\"Recibe notificaciones\"/>\n                                </div>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {showAsModal && onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                <ButtonSubmit loading={props.loading}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.Customer\n    const {states, municipalities} = state.Location\n    return {error, states, municipalities, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerCustomer, updateCustomer, getCustomer, getStates, getMunicipalities})(CustomerForm)\n)\n\nCustomerForm.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateColumn.js",["1428"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {isValidOption, STATUS_OPTIONS} from \"../../../common/utils\";\n\nconst templateColumns = (onDelete = false) => [\n    {\n        text: \"ID\",\n        dataField: \"reference\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <Link to={`/template/${item.id}`}>\n                {item.reference}\n            </Link>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Descripción\",\n        dataField: \"description\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <Link to={`/template/${item.id}`} className=\"px-2 text-primary\">\n                        <i className=\"uil uil-pen font-size-18\"> </i>\n                    </Link>\n                </li>\n            </ul>\n        ),\n    },\n]\n\nexport default templateColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/PostSaleReportForm.js",["1429","1430"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {DELIVERY_METHODS, ORDER_STATUS_LIST, REPORT_TYPES} from \"../../common/constants\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst PostSaleReportForm = ({onCloseModal, deliveryMethods, onGetDeliveryMethods, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            status: values._status.value,\n            deliveryMethod: values.deliveryMethod.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Estatus<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"_status\"}\n                                        name={\"_status\"}\n                                        options={ORDER_STATUS_LIST}\n                                        defaultValue={ORDER_STATUS_LIST[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.POST_SALE, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PostSaleReportForm)\n)\n\nPostSaleReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/PostSaleImportFileForm.js",["1431","1432"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {importFile, importFileReset} from \"../../store/office/actions\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {DELIVERY_METHODS} from \"../../common/constants\";\n\nconst PostSaleImportFileForm = ({onCloseModal, deliveryMethods, loading, error, success, getDeliveryMethods, importFileReset, importFile}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n    const [file, setFile] = useState(null);\n\n    //carga inicial\n    useEffect(() => {\n        if (importFileReset) importFileReset();\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [importFileReset]);\n\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            file: file.base64.replace('data:image/xlsx;base64,', ''),\n            deliveryMethod: values.deliveryMethod.value,\n            deliveryDate: values.deliveryDate[0] ? formatDate(values.deliveryDate[0], DATE_FORMAT.ONLY_DATE) : null\n        };\n        console.log(payload);\n        onImportFile(payload);\n    }\n\n    const onGetDeliveryMethods = (conditional = null, limit = 50, page) => getDeliveryMethods(conditional, limit, page);\n    const onImportFile = (data) => importFile(data);\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"deliveryDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3 text-center\">\n                                    <Tooltip placement=\"bottom\" title=\"Importar archivo\" aria-label=\"add\">\n                                        <div className={\"btn\"}>\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"icon\"\n                                                iconClass=\"display-4 mdi mdi-file-excel\"\n                                                onDrop={(f) => setFile(f)}>\n                                            </DropZoneIcon>\n                                            {(file && file.f)? (<span>{file.f.name}</span>) : (<span>Seleccione un archivo</span>)}\n                                        </div>\n                                    </Tooltip>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading || !file || !file.f}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {deliveryMethods} = state.Order;\n    const {importFile} = state.Office\n    return {deliveryMethods: deliveryMethods.data, loading: importFile.loading, error: importFile.error, success: importFile.success}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {getDeliveryMethods, importFile, importFileReset})(PostSaleImportFileForm)\n)\n\nPostSaleImportFileForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/store/category/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/accessToken.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/auth-token-header.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/list/forgetPassword.js",["1433","1434"],"import PropTypes from 'prop-types'\nimport React, {useEffect, useState} from \"react\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router-dom\"\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\nimport {changePassword, resetPasswordState} from \"../../../store/user/actions\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\n\nconst ForgetPassword = ({user, changePassword, resetPasswordState, passwordChanged}) => {\n\n    const [userSelected, setUserSelected] = useState(null);\n    const [newPassword, setNewPassword] = useState(null);\n    const [openChangePasswordModal, setOpenChangePasswordModal] = useState(false);\n    const [isValidPassword, setIsValidPassword] = useState(false);\n\n    useEffect(() => {\n        return function cleanup() {\n            resetPasswordState();\n        };\n    });\n\n    useEffect(() => {\n        resetPasswordState();\n\n        if (user) {\n            setUserSelected(user);\n            toggleChangePasswordModal();\n        }\n    }, [user])\n\n    useEffect(() => {\n        if (passwordChanged) {\n            onCloseChangePasswordModal();\n        }\n    }, [passwordChanged])\n\n    const toggleChangePasswordModal = () => {\n        setOpenChangePasswordModal(!openChangePasswordModal);\n    }\n\n    const onCloseChangePasswordModal = () => {\n        toggleChangePasswordModal();\n        setUserSelected(null);\n        resetPasswordState();\n    }\n\n    const onAcceptChangePasswordModal = () => {\n        if(!isValidPassword){\n            return;\n        }\n        const payload = {\n            username: user.username,\n            password: newPassword\n        };\n        changePassword(payload);\n    }\n\n    const validatePasswords = (cPassword) => {\n        let isValid = newPassword === cPassword;\n        setIsValidPassword(isValid);\n        if (!isValid) {\n            return 'Las contraseñas no son iguales';\n        }\n        return true;\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={`Cambio de contraseña`}\n                         isOpen={openChangePasswordModal}\n                         onClose={onCloseChangePasswordModal}\n                         onAccept={onAcceptChangePasswordModal}>\n                <div className=\"p-2\">\n                    <div className=\"alert alert-success text-center mb-4\" role=\"alert\"> Ingrese la nueva contraseña para el usuario <b>{`${userSelected?.name} ${userSelected?.lastname}`}</b></div>\n\n                    <AvForm className=\"form-horizontal\"  autoComplete=\"off\" >\n                        <div className=\"mb-1\">\n                                <AvField\n                                    name=\"password\"\n                                    label=\"Contraseña\"\n                                    defaultValue={newPassword}\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                    required\n                                    placeholder=\"*********\"\n                                    onChange={(e) => {\n                                        setNewPassword(e.target.value);\n                                    }}\n                                />\n                        </div>\n                        <div className=\"mb-1\">\n                            <AvField\n                                name=\"confirmPassword\"\n                                label=\"Confirmar Contraseña\"\n                                type=\"password\"\n                                autoComplete=\"off\"\n                                required\n                                placeholder=\"*********\"\n                                validate={{myValidation: validatePasswords}}\n                            />\n                        </div>\n                    </AvForm>\n                </div>\n            </CustomModal>\n        </React.Fragment>\n    )\n}\n\nForgetPassword.propTypes = {\n    loading: PropTypes.bool,\n    user: PropTypes.object,\n}\n\nconst mapStateProps = state => {\n    const {changePassword} = state.User\n    return {loading: changePassword.loading, user: changePassword.user, passwordChanged: changePassword.success}\n}\n\nexport default withRouter(\n    connect(mapStateProps, {changePassword, resetPasswordState})(ForgetPassword)\n)\n","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsStatusCard.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsRegisteredCard.js",["1435"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport WidgetCard4 from \"./WidgetCard4\";\n\nconst StatsRegisteredCard = (props) => {\n    const {getData, getDataToday, title} = props;\n    const [reportData, setReportData] = useState(null);\n\n    useEffect(() => {\n        if (getData) {\n            getData().then(data => setReportData(data));\n        }\n    }, [getData]);\n\n    useEffect(() => {\n        if (reportData && !reportData.hasOwnProperty('countToday') && getDataToday) {\n            getDataToday().then(data => setReportData({...reportData, countToday: data.count}));\n        }\n    }, [reportData]);\n\n\n    return (\n        <React.Fragment>\n            <WidgetCard4 title={title} reportData={reportData}/>\n        </React.Fragment>\n    );\n}\n\nexport default StatsRegisteredCard;\n\nStatsRegisteredCard.propTypes = {\n    getData: PropTypes.func.isRequired,\n    getDataToday: PropTypes.func,\n    title: PropTypes.string.isRequired,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryColumn.js",["1436"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {formatDate, isValidOption, STATUS_OPTIONS} from \"../../../common/utils\";\n\nconst categoryColumns = (onDelete = false) => [\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <Link to={`/category/${item.id}`} className=\"text-body\">\n                {item.name}\n            </Link>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Fecha creación\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>\n                {formatDate(item.createdAt)}\n            </div>\n        ),\n    },\n    /*{\n        text: \"Código DIAN\",\n        dataField: \"dianCode\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Código ISO\",\n        dataField: \"isoCode\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },*/\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <Link to={`/category/${item.id}`} className=\"px-2 text-primary\">\n                        <i className=\"uil uil-pen font-size-18\"> </i>\n                    </Link>\n                </li>\n                {/*{onDelete && (\n                    <li className=\"list-inline-item\">\n                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                        </button>\n                    </li>\n                )}*/}\n            </ul>\n        ),\n    },\n]\n\nexport default categoryColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/productColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSelectBasicField.js",["1437","1438","1439","1440","1441","1442","1443","1444","1445"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Select from \"react-select\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\nimport {map} from \"lodash\";\nimport InputAsyncSearchField from \"./InputAsyncSearchField\";\nimport {FieldSelectBasic} from \"./index\";\n\nconst InputSelectBasicField = (props) => {\n    return (\n        <select\n            id={props.id}\n            name={props.name}\n            value={props.value}\n            onChange={(e => props.onChange?props.onChange(e.target.value):'')}\n            className={props.className || \"form-control\"}>\n            {map(props.options, (option, k) => (<option key={k} value={option.value}>{option.label}</option>))}\n        </select>\n    )\n}\n\nInputSelectBasicField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array.isRequired,\n};\n\nexport default InputSelectBasicField;","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputAsyncSearchField.js",["1446"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport AsyncSelect from 'react-select/async';\nimport {FormGroup, FormText} from \"reactstrap\";\nimport './style.scss';\nimport {getData} from \"../../helpers/service\";\nimport {arrayToOptionsByFieldName, getEmptyOptions} from \"../../common/converters\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport Conditionals from \"../../common/conditionals\";\n\nconst InputAsyncSearchField = (props) => {\n    const {defaultValue, conditionalOptions, defaultConditions} = props;\n    const [selected, setSelected] = useState(null);\n\n    useEffect(() => {\n        setSelected(defaultValue);\n    }, [defaultValue]);\n\n    return (\n        <AvAsyncSearchInput\n            validate={{required: {value: props.required === true, errorMessage: messages.required}}}\n            name={props.name}\n            hasWild={props.hasWild || false}\n            value={selected}\n            placeholder={props.placeholder}\n            urlStr={props.urlStr}\n            onChange={(value) => {\n                setSelected(value)\n                if (props.onChange) {\n                    props.onChange(value);\n                }\n            }}\n            conditionalOptions={conditionalOptions}\n            defaultConditions={defaultConditions}\n        />\n    )\n}\n\nInputAsyncSearchField.propTypes = {\n    urlStr: PropTypes.string.isRequired,\n};\n\n\nclass AvAsyncSearchInput extends AvBaseInput {\n    render() {\n        const {name, value, onChange, validate, hasWild, urlStr, conditionalOptions, defaultConditions, placeholder, helpMessage} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <AsyncSelect\n                        cacheOptions\n                        defaultOptions\n                        name={name}\n                        value={value}\n                        onChange={onChange}\n                        placeholder={placeholder}\n                        loadOptions={inputValue => {\n                            const cond = {...conditionalOptions};\n                            let textSearch = inputValue +'';\n                            if(hasWild && inputValue.includes(\"*\")){\n                                cond.operator = Conditionals.OPERATORS.LIKE;\n                                textSearch = textSearch.replace('*', '')\n                            }\n                            return getData(urlStr, textSearch, cond, defaultConditions).then(response => {\n                                const fieldName = conditionalOptions && conditionalOptions.fieldName ? conditionalOptions.fieldName : 'name';\n                                const options = arrayToOptionsByFieldName(response.data, fieldName);\n                                options.unshift(getEmptyOptions());\n                                return options\n                            })\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\n\nexport default InputAsyncSearchField;\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputPhoneField.js",["1447","1448","1449"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport es from 'react-phone-input-2/lang/es.json'\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\n\nconst InputPhoneField = (props) => {\n\n    return (\n        <AvPhoneInput\n            id={props.id}\n            name={props.name}\n            value={props.value}\n            required={props.required}\n            country={props.country || 'co'}\n            placeholder={props.placeholder}\n            onChange={(value) => props.onChange && props.onChange(value)}\n            validate={\n                {\n                    required: {value: props.required ? true : false, errorMessage: messages.required}\n                }\n            }\n        />\n    )\n}\n\nInputPhoneField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    country: PropTypes.string,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.any,\n};\n\nclass AvPhoneInput extends AvBaseInput {\n    render() {\n        const {id, name, value, onChange, validate, required, country, placeholder, helpMessage} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <PhoneInput\n                        id={id || name}\n                        country={country}\n                        onlyCountries={[country]}\n                        preferredCountries={[country]}\n                        value={value}\n                        name={name}\n                        placeholder={placeholder}\n                        localization={es}\n                        inputClass=\"form-control w-100\"\n                        inputProps={{\n                            name: {name},\n                            required: {required}\n                        }}\n                        onChange={(value, country, e, formattedValue) => {\n                            onChange(formattedValue);\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default InputPhoneField;\n","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/TableFilter/index.js",["1450","1451"],"import React from \"react\";\nimport {Button, Card, CardBody, Col, Label, Row} from \"reactstrap\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport PropTypes from \"prop-types\";\nimport {Button as ButtonMaterial} from \"@material-ui/core\";\nimport Conditionals from \"../../common/conditionals\";\nimport {FieldAsyncSelect, FieldDate, FieldNumber, FieldSelect, FieldText} from \"../Fields\";\nimport {formatDateToServer, isValidObject, isValidOption} from \"../../common/utils\";\nimport moment from \"moment\";\nimport {DATE_MODES} from \"../Fields/InputDate\";\n\nexport const TableFilter = (props) => {\n    const {fields} = props;\n    const form = React.createRef();\n\n    if (!props.isActive) {\n        return false;\n    }\n\n    const handleValidSubmit = (event, values) => {\n        console.log('values', fields)\n        if (props.onSubmit) {\n\n            let data = {...values};\n            const ranges = {};\n            Object.keys(values).filter(v => v.includes('_number')).forEach(v => {\n                const key = \"_\"+v.replace('_numberA_', '').replace('_numberB_', '');\n                if(!ranges[key]) ranges[key] = [];\n                ranges[key].push(values[v]);\n                delete data[v]\n            });\n\n            data = {...data, ...ranges};\n\n            const conditions = new Conditionals.Condition;\n            Object.keys(data)//FieldNames\n                .filter(dataField => data[dataField] && data[dataField] !== \"\")\n                .forEach(dataField => {\n\n                    // const isObject = data[dataField];\n                    //Se borra el \"_\" del inicio porque algunos campos se renderizan mal, ejemplo el status\n                    const fieldName = dataField.substr(1);\n\n                    let field = fields.filter(field => field.filter).filter(field => field.dataField === fieldName);\n\n                    if (!field || field.length === 0) {\n                        //para buscar dentro de nodos\n                        field = fields.filter(field => field.filter)\n                            .filter(field => field.dataField.includes('.'))\n                            .filter(field => field.dataField.startsWith(fieldName));\n                    }\n\n                    if (field && field.length > 0) {\n                        if (field.length === 1) {\n                            addConditionals(conditions, data, field, dataField, fieldName);\n                        }else{\n                            //agregar los los valores de los distintos nodos\n                            field.forEach(f => {\n                                const attr = f.dataField.split('.')[1];\n                                const d = {};\n                                d[f.dataField] = data[dataField][attr];\n\n                                if(d[f.dataField] && d[f.dataField] !== \"\"){\n                                    addConditionals(conditions, d, [f], f.dataField, f.dataField);\n                                }\n                            })\n                        }\n                    }\n                });\n\n            props.onSubmit(conditions.all());\n        }\n    }\n\n    const addConditionals = (conditions, data, field, dataField, fieldName) => {\n        if (field && field.length) {\n            const filter = field[0];\n            const value = data[dataField];\n\n            let operator;\n            if (filter.filterType === \"text\") {\n                operator = filter.filterCondition ? filter.filterCondition : Conditionals.OPERATORS.LIKE;\n                conditions.add(fieldName, value, operator);\n            }\n            if (filter.filterType === \"voyed\") {//for status\n                    operator = resolveOperator(filter, value.value ? Conditionals.OPERATORS.NOT_NULL : Conditionals.OPERATORS.NULL);\n                    conditions.add(fieldName, null, operator);\n            }\n            if (filter.filterType === \"select\" && isValidOption(filter.filterOptions, value.value)) {//for status\n                if(value.value === true || value.value === false){\n                    operator = resolveOperator(filter, value.value ? Conditionals.OPERATORS.TRUE : Conditionals.OPERATORS.FALSE);\n                    conditions.add(fieldName, null, operator);\n                }else{\n                    operator = resolveOperator(filter, Conditionals.OPERATORS.EQUAL);\n                    conditions.add(fieldName, value.value, operator);\n                }\n            }\n            if (filter.filterType === \"asyncSelect\" && value.value) {\n                operator = resolveOperator(filter, Conditionals.OPERATORS.EQUAL);\n                conditions.add(fieldName, value.value, operator);\n            }\n\n            if (filter.filterType === \"number\" && isValidObject(value) && value.length > 0) {\n\n                if (value.length > 1 && value[0] && value[1]) {\n                    conditions.add(fieldName, value[0], Conditionals.OPERATORS.BETWEEN,[value[1]]);\n\n                } else if (value.length > 0 && value[0]) {\n                    conditions.add(fieldName, value[1], Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n\n                } else if (value.length > 1 && value[1]) {\n                    conditions.add(fieldName, value[1], Conditionals.OPERATORS.LESS_THAN);\n                }\n\n            }\n            if (filter.filterType === \"dateRange\" && value && value.length > 0) {\n                if(moment(value[0]).isSame(moment(value[1]))){\n                    conditions.add(fieldName,formatDateToServer(value[0]),Conditionals.OPERATORS.LESS_THAN_OR_EQUAL);\n                }\n                else {\n                    conditions.add(fieldName,formatDateToServer(value[0]), Conditionals.OPERATORS.BETWEEN,[formatDateToServer(value[1])]);\n                }\n            }\n        }\n    }\n\n    const resolveOperator = (filter, defaultOperator) => {\n        return  filter.filterCondition ? filter.filterCondition : defaultOperator;\n    }\n\n    const cleanFilters = () => {\n        const conditions = new Conditionals.Condition;\n        props.onSubmit(conditions.all());\n        form && form.current && form.current.reset();\n    }\n\n    return (<div className=\"col-md-4\">\n        <Card>\n            <CardBody>\n                {props.onPressDisabled && (\n                    <div className={\"float-end\"}>\n                        <ButtonMaterial color=\"primary\" size=\"small\" onClick={props.onPressDisabled}>\n                            <i className={\"mdi mdi-minus\"}> </i>\n                        </ButtonMaterial>\n                    </div>\n                )}\n                <div className=\"mb-4\">\n                    <h5><i className={\"mdi mdi-filter-menu\"}> </i> Filtros Avanzados &nbsp;</h5>\n                </div>\n                <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                        onValidSubmit={(e, v) => {\n                            handleValidSubmit(e, v)\n                        }}\n                        ref={form}>\n\n                        {fields.filter(f => f.filter).map((field, idx) => (\n                            <Row key={idx}>\n                                {field.filterType === 'text' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldText name={\"_\" + field.dataField}\n                                                       defaultValue={field.filterDefaultOption}\n                                                       placeholder={field.text}/>\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'number' && (\n                                        <Col md=\"12\" >\n                                            <div className=\"mb-3\">\n                                                <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                                <Row>\n                                                    <Col xs=\"6\">\n                                                        <FieldNumber name={\"_numberA_\" + field.dataField}\n                                                                     defaultValue={field.filterDefaultOption}\n                                                                     placeholder=\"Desde\"\n                                                        />\n                                                    </Col>\n                                                    <Col xs=\"6\">\n                                                        <FieldNumber name={\"_numberB_\" + field.dataField}\n                                                                     defaultValue={field.filterDefaultOption}\n                                                                     placeholder=\"Hasta\"\n                                                        />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </Col>\n                                )}\n                                {field.filterType === 'select' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldSelect\n                                                name={\"_\" + field.dataField}\n                                                options={field.filterOptions}\n                                                defaultValue={field.filterDefaultOption}\n                                                placeholder={field.text}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'voyed' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldSelect\n                                                name={\"_\" + field.dataField}\n                                                options={field.filterOptions}\n                                                defaultValue={field.filterDefaultOption}\n                                                placeholder={field.text}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'asyncSelect' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldAsyncSelect\n                                                name={\"_\" + field.dataField}\n                                                urlStr={field.urlStr}\n                                                placeholder={field.text}\n                                                defaultValue={field.filterDefaultOption}\n                                                conditionalOptions={field.conditionalOptions}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'dateRange' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldDate\n                                                name={\"_\" + field.dataField}\n                                                mode={DATE_MODES.RANGE}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                            </Row>\n                        ))}\n                    <Row>\n                        <Col md={\"12\"}>\n                            <div className={\"float-end\"}>\n                                <Button type=\"submit\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                    <i className={\"mdi mdi-magnify\"}> </i> Buscar\n                                </Button>\n                            </div>\n                            <div className={\"float-end ml-5\"}>\n                                <Button type=\"button\"\n                                        onClick={cleanFilters}\n                                        color=\"default\"\n                                        className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                    Limpiar\n                                </Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </AvForm>\n            </CardBody>\n        </Card>\n    </div>)\n}\nTableFilter.propTypes = {\n    isActive: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    onPressDisabled: PropTypes.func,\n    fields: PropTypes.array.isRequired\n};\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputTextField.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSwitchField.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSearchField.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard1.js",["1452","1453","1454","1455","1456","1457"],"import React, {useEffect, useState} from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\nimport WidgetCard from \"./WidgetCard\";\n\nconst series1 = [{\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54]\n}]\nconst options1 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: !1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst WidgetCard1 = props => {\n    const {statusGroup, title} = props;\n    const [dataCard, setDataCard] = useState({});\n\n    useEffect(() => {\n        let active = 0;\n        let inactive = 0;\n        if(statusGroup ){\n            if(statusGroup[1]) active = statusGroup[1];\n            if(statusGroup[0]) inactive = statusGroup[0];\n        }\n\n        const total = active + inactive;\n        const data = {\n            id: 1,\n            icon: \"mdi mdi-clock-five-time\",\n            title: title,\n            value: total,\n            prefix: \"\",\n            suffix: \"\",\n            decimal: 0,\n            charttype: \"bar\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: active,\n            color: \"success\",\n            desc: \"activos\",\n            badgeValue2: inactive,\n            color2: \"danger\",\n            desc2: \"inactivos\",\n            series: series1,\n            options: options1,\n        };\n        setDataCard(data);\n    }, [statusGroup])\n\n    return (\n        <WidgetCard report={dataCard} />\n    )\n}\n\n\nWidgetCard1.propTypes = {\n    statusGroup: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nexport default WidgetCard1\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard4.js",["1458","1459","1460","1461","1462","1463"],"import React, {useEffect, useState} from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\nimport WidgetCard from \"./WidgetCard\";\n\nconst series4 = [{\n    data: [25, 66, 200]\n}]\n\nconst options4 = {\n\n    fill: {\n        colors: ['#f1b44c']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [\"Antier\", \"Ayer\", \"Hoy\"],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: 1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst WidgetCard4 = props => {\n    const {reportData = {}, title} = props;\n    const [dataCard, setDataCard] = useState({});\n\n    useEffect(() => {\n        let rData = {};\n        if(reportData){\n            rData = {...reportData};\n        }\n\n        const data = {\n            id: 4,\n            icon: \"uil-users-alt\",\n            title: title,\n            value: rData.count || 0,\n            decimal: 0,\n            charttype: \"line\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: `${!!rData.countToday ? rData.countToday : 0}`,\n            color: \"success\",\n            desc: \"registrados hoy\",\n            series: series4,\n            options: options4,\n        };\n        setDataCard(data);\n    }, [reportData])\n\n    return (\n        <WidgetCard report={dataCard}/>\n    )\n}\n\n\nWidgetCard4.propTypes = {\n    reportData: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nexport default WidgetCard4\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/HtmlTooltip.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/messages.js",["1464"],"export default {\n    required: 'Campo requerido',\n    minLength: 'Debe ingresar al menos {length} caracteres.',\n    maxLength: 'Solo puede ingresar {length} caracteres.',\n    email_invalid: 'Email es invalido'\n};\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard.js",["1465"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\n\nconst WidgetCard = props => {\n\n    const {report} = props;\n    return (\n        <Card>\n            {report.charttype && (\n                <CardBody>\n                    <div className=\"float-end mt-2\">\n\n                        <ReactApexChart\n                            options={report.options}\n                            series={report.series}\n                            type={report.charttype}\n                            height={report.chartheight}\n                            width={report.chartwidth}\n                        />\n\n                    </div>\n                    <div>\n                        <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <CountUp end={report.value} separator=\",\" prefix={report.prefix} suffix={report.suffix} decimals={report.decimal}/>\n                        </span>\n                        </h4>\n                        <p className=\"text-muted mb-0\">{report.title}</p>\n                    </div>\n                    <p className=\"text-muted mt-3 mb-0\">\n                    <span className={\"text-\" + report.color + \" me-1\"}>\n                        <i className={report.icon + \" me-1\"}> </i>{report.badgeValue}\n                    </span> {\" \"}{report.desc}\n                        {(report.badgeValue2 || report.badgeValue2 === 0) && (\n                            <> &nbsp; / &nbsp;\n                                <span className={\"text-\" + report.color2 + \" me-1\"}>\n                                    <i className={report.icon2 + \" me-1\"}> </i> {report.badgeValue2}\n                                </span> {\" \"}{report.desc2}\n                            </>\n                        )}\n                    </p>\n                </CardBody>\n            )}\n        </Card>\n    )\n}\n\n\nWidgetCard.propTypes = {\n    report: PropTypes.object.isRequired\n}\n\nexport default WidgetCard\n","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesColumn.js",["1466"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {isValidOption, STATUS_OPTIONS} from \"../../../common/utils\";\n\nconst statesColumns = (onDelete = false) => [\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <Link to=\"#\" className=\"text-body\">\n                    {item.name}\n                </Link>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Código DIAN\",\n        dataField: \"dianCode\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Código ISO\",\n        dataField: \"isoCode\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <Link to={`/state/${item.id}`} className=\"px-2 text-primary\">\n                        <i className=\"uil uil-pen font-size-18\"> </i>\n                    </Link>\n                </li>\n                {onDelete && (\n                    <li className=\"list-inline-item\">\n                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                        </button>\n                    </li>\n                )}\n            </ul>\n        ),\n    },\n]\n\nexport default statesColumns;\n","/Users/ramon/Repositories/lucy-moie/src/components/mentions/mentionStyles.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/BillsReportForm.js",["1467"],"import React, {useEffect} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\nimport { BILL_MEMO_TYPES, REPORT_TYPES } from \"../../common/constants\";\n\nconst types = [{label: 'Facturas electrónicas', value: BILL_MEMO_TYPES.INVOICE }, {label: 'Notas de crédito', value: BILL_MEMO_TYPES.CREDIT }];\n\nconst BillsReportForm = ({onCloseModal, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            type: values.type.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Tipo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"type\"}\n                                        name={\"type\"}\n                                        options={types}\n                                        defaultValue={types[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.Bill;\n    return {loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.BILLS, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BillsReportForm)\n)\n\nBillsReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Payments/paymentOverlay.js",["1468","1469","1470","1471"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport {applyPayment} from \"../../store/payments/actions\";\n\nconst PaymentOverlay = (props) => {\n\n    const {payment, onRelateOrder, onCloseOverlay, onGetOrders, orders} = props;\n    const [findOrderBy, setFindOrderBy] = useState(null)\n    const [orderRelated, setOrderRelated] = useState(null)\n\n    useEffect(() => {\n        console.log('YG payment', payment)\n        if (payment) {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"payment\", payment.id, Conditionals.OPERATORS.EQUAL);\n            onGetOrders(conditions);\n            setFindOrderBy(\"PAYMENT\");\n        }\n    }, [payment]);\n\n    useEffect(() => {\n        console.log('YG orders', orders);\n        if (findOrderBy === \"PAYMENT\") {\n            if (orders.length === 1 && orders[0].payment && orders[0].payment.id === payment.id) {\n                setOrderRelated(orders[0]);\n\n            } else {\n                const conditions = new Conditionals.Condition;\n                conditions.add(\"payment\", null, Conditionals.OPERATORS.NULL);\n                conditions.add(\"orderDelivery.chargeOnDelivery\", 0, Conditionals.OPERATORS.EQUAL);\n                onGetOrders(conditions);\n                setFindOrderBy(\"NO_PAYMENT\");\n            }\n        }\n\n    }, [orders]);\n\n    const selectOrder = (order) => {\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: `Usted está asociando el pago# ${payment.id} con el pedido# ${order.id}, ¿Desea continuar?`,\n            id: '_clienteModal',\n            onConfirm: () => {\n                console.log('YG onRelateOrder', order);\n                onRelateOrder(payment.id, {orderId: order.id});\n                setOrderRelated(order);\n            }\n        });\n    }\n\n    return payment.id ? (\n        <div className={'orderDetail-overlay pt-2'}>\n            <Row className=\"mb-2\">\n                <Col md={12}>\n                    <div className={\"mb-3 float-md-start\"}>\n                        <Tooltip placement=\"bottom\" title=\"Ocultar\" aria-label=\"add\">\n                            <button className=\"btn btn-outline-default mr-5\" onClick={() => onCloseOverlay()}>\n                                <i className=\"uil uil-arrow-to-right font-size-16\"> </i>\n                            </button>\n                        </Tooltip>\n                        <small className=\"badge rounded-pill bg-info font-size-14 mr-5 p-2\">Pago# {payment.id}</small>\n                    </div>\n                    <div className={\"mb-3 float-md-end\"}>\n\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-3\">\n                <Col md={12} className=\"p-3\">\n                    <Card id={'payment-detail'} className=\"p-3\">\n                        <Col xs={10}>\n                            <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Datos del pago</h4>\n                        </Col>\n                        <Row>\n                            <Col md={6}>\n                                <label>Nombre: </label>\n                                <span className=\"p-1\">{payment.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono: </label>\n                                <span className=\"p-1\">{payment.cellphone}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Correo: </label>\n                                <span className=\"p-1\">{payment.email}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Forma de pago: </label>\n                                <span className=\"p-1\">{payment.paymentForm}</span>\n                            </Col>\n                            {payment.originBank && (\n                                <Col md={6}>\n                                    <label>Banco origen: </label>\n                                    <span className=\"p-1\">{payment.originBank}</span>\n                                </Col>\n                            )}\n                            <Col md={6}>\n                                <label>Banco destino: </label>\n                                <span className=\"p-1\">{payment.targetBank}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Fecha: </label>\n                                <span className=\"p-1\">{formatDate(payment.createdAt)}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Número de comprobante: </label>\n                                <span className=\"p-1\">{payment.consignmentNumber}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Monto: </label>\n                                <span className=\"p-1\">{priceFormat(payment.consignmentAmount, \"\", true)}</span>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n                <Col md={12} className=\"p-3\">\n                    {!orderRelated && (\n                        <Card id={'orders'} className=\"p-3\">\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Seleccionar venta</h4>\n                            </Col>\n                            <Row>\n                                <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                                    <thead>\n                                    <tr>\n                                        <th style={{width: '35%'}}>Cliente</th>\n                                        <th style={{width: '20%'}}>Fecha</th>\n                                        <th style={{width: '15%'}}>Monto</th>\n                                        <th style={{width: '15%'}}>Envio</th>\n                                        <th style={{width: '15%'}}>Total</th>\n                                        <th></th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {orders.sort((a, b) => a.id < b.id).map((order, k) => (\n                                        <tr>\n                                            <td>{order.customer.name}</td>\n                                            <td>{formatDate(order.createdAt)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.subTotalAmount, \"\", true)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.totalAmount - order.subTotalAmount, \"\", true)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.totalAmount, \"\", true)}</td>\n                                            <td>\n                                                <Tooltip placement=\"bottom\" title=\"Asociar pedido\" aria-label=\"add\">\n                                                    <button size=\"small\" className=\"btn btn-sm btn-primary\" onClick={() => selectOrder(order)}>\n                                                        <i className=\"uil uil-plus-circle font-size-18\"> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Row>\n                        </Card>\n                    )}\n                    {orderRelated && (\n                        <Card id={'order-detail'} className=\"p-3\">\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Pedido asociado</h4>\n                            </Col>\n                            <Row>\n                                <Col md={6}>\n                                    <label>Pedido #: </label>\n                                    <span className=\"p-1\">{orderRelated.id}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Estado: </label>\n                                    <span className=\"p-1\">\n                                         <StatusField color={ORDER_STATUS[orderRelated.status].color} className={\"font-size-10 mr-5\"}>\n                                            {ORDER_STATUS[orderRelated.status].name}\n                                        </StatusField>\n                                    </span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Cliente: </label>\n                                    <span className=\"p-1\">{orderRelated.customer.name}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Correo: </label>\n                                    <span className=\"p-1\">{orderRelated.customer.email}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Fecha: </label>\n                                    <span className=\"p-1\">{formatDate(orderRelated.createdAt)}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Cantidad de prendas: </label>\n                                    <span className=\"p-1\">{orderRelated.quantity}</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={4}>\n                                    <label>Monto: </label>\n                                    <span className=\"p-1\">{priceFormat(orderRelated.subTotalAmount, \"\", true)}</span>\n                                </Col>\n                                <Col md={4}>\n                                    <label>Envio: </label>\n                                    <span className=\"p-1\">{priceFormat(orderRelated.totalAmount - orderRelated.subTotalAmount, \"\", true)}</span>\n                                </Col>\n                                <Col md={4}>\n                                    <label>Total: </label>\n                                    <span className=\"p-1\">{priceFormat(orderRelated.totalAmount, \"\", true)}</span>\n                                </Col>\n                            </Row>\n                        </Card>\n                    )}\n                </Col>\n            </Row>\n\n        </div>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {orders} = state.Order\n    return {orders}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrders: (conditions) => dispatch(getOrders(conditions.all(), 500, 0)),\n    onRelateOrder: (paymentId, payload) => dispatch(applyPayment(paymentId, payload))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PaymentOverlay)\n)\n\nPaymentOverlay.propTypes = {\n    payment: PropTypes.object.isRequired,\n    showOverlay: PropTypes.bool,\n    onCloseOverlay: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderConciliationsForm.js",["1472","1473","1474","1475","1476","1477"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {ORDERS} from \"../../helpers/url_helper\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {confirmConciliation, confirmConciliationRestart, getOrder, restartOrder} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {priceFormat} from \"../../common/utils\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport {fetchOrdersApi} from \"../../helpers/backend_helper\";\n\nconst searchByOptions = [{label: \"Pedido\", value: \"ID\"}, {label: \"Guia\", value: \"GUIA\"}, {label: \"Lote Guia\", value: \"LOTE_GUIA\"}, {label: \"Lote pedido\", value: \"LOTE_PEDIDO\"}];\nconst emptyOption = getEmptyOptions();\n\nconst OrderConciliationForm = ({\n                                   onConfirmConciliationRestart,\n                                   conciliationSuccess,\n                                   conciliationError,\n                                   conciliationLoading,\n                                   onGetOrder,\n                                   onCloseModal,\n                                   order,\n                                   loading,\n                                   success,\n                                   error,\n                                   onRestartOrder,\n                                   onConfirmConciliate\n                               }) => {\n\n    const [orderId, setOrderId] = useState(null);\n    const [orders, setOrders] = useState([]);\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [defaultOption, setDefaultOption] = useState(emptyOption);\n    const [lote, setLote] = useState(null);\n\n    useEffect(() => {\n        if (order) {\n            const list = [...orders];\n            if (!list.some(o => o.id === order.id)) {\n                list.push(order);\n                list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                setOrders(list);\n            }\n        } else {\n            setOrders([]);\n        }\n    }, [order]);\n\n    useEffect(() => {\n        if (onRestartOrder) {\n            onRestartOrder();\n        }\n    }, [onRestartOrder]);\n\n    useEffect(() => {\n        if (conciliationSuccess && !conciliationError) {\n            onCloseModal(true);\n            onConfirmConciliationRestart();\n        }\n    }, [conciliationSuccess]);\n\n    const addLote = () => {\n        lote.split(' ')\n            .filter(l => l)\n            .filter(l => !orders.some(o => o.id == l))\n            .forEach(id => {\n                onGetOrder(id);\n            })\n        setLote(\"\");\n    }\n    const addLoteGuia = () => {\n\n        const trackingList = lote.split(' ')\n            .filter(tracking => tracking)\n            .filter(tracking => !orders.some(o => o.orderDelivery && o.orderDelivery.tracking === tracking))\n            .map(tracking => tracking);\n\n        const list = [...orders];\n\n        trackingList.forEach((tracking, index) => {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"orderDelivery.tracking\", tracking, Conditionals.OPERATORS.EQUAL);\n            const cond = Conditionals.getConditionalFormat(conditions.all());\n            const query = Conditionals.buildHttpGetQuery(cond, 1, 0);\n\n            fetchOrdersApi(query).then(resp => {\n                if (resp && resp.data && resp.data.length === 1) {\n                    let _order = resp.data[0];\n                    if (!list.some(o => o.id === _order.id)) {\n                        list.push(_order);\n                        list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                    }\n                }\n\n                if ((index + 1) === trackingList.length) {\n                    setOrders(list);\n                }\n            })\n        })\n        setLote(\"\");\n    }\n\n    /*const addLoteGuia = () => {\n        console.log('addOrder', lote);\n\n        const trackingList = lote.split(' ')\n            .filter(tracking=> tracking)\n            .filter(tracking => !orders.some(o => o.orderDelivery && o.orderDelivery.tracking === tracking))\n            .map(tracking=> tracking);\n\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"orderDelivery.tracking\", trackingList, Conditionals.OPERATORS.IN);\n        const cond = Conditionals.getConditionalFormat(conditions.all());\n        const query = Conditionals.buildHttpGetQuery(cond, 1, 0);\n\n        fetchOrdersApi(query).then(o => {\n            console.log('YG OOO ', o)\n            if(o && o.data && o.data.length > 0){\n                const list = [...orders];\n                o.data.forEach((_order) => {\n                    if (!list.some(o => o.id === _order.id)) {\n                        list.push(_order);\n                        list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                    }\n                })\n                setOrders(list);\n            }\n        })\n        setLote(\"\");\n    }*/\n\n    const addOrder = () => {\n        if (searchBy === 'LOTE_GUIA') {\n            addLoteGuia();\n            return;\n        }\n        if (searchBy === 'LOTE_PEDIDO') {\n            addLote();\n            return;\n        }\n        console.log('addOrder', orderId);\n        onGetOrder(orderId);\n        setDefaultOption(getEmptyOptions());\n        setOrderId(null);\n    }\n\n    const removeOrder = (orderId) => {\n        console.log('removeOrder', orderId);\n        const list = [...orders];\n        const orderToRemove = list.find(o => o.id === orderId);\n        list.splice(list.indexOf(orderToRemove), 1);\n        setOrders(list);\n    }\n\n    const doConciliation = (e) => {\n        onConfirmConciliate(orders.filter(o => o.status === 4).map(o => o.id));\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => doConciliation(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col md={4}>\n                                <Label htmlFor=\"product\">Buscar por</Label>\n                                <FieldSelect\n                                    id={\"searchByOptions\"}\n                                    name={\"searchByOptions\"}\n                                    options={searchByOptions}\n                                    defaultValue={searchBy}\n                                    onChange={(e) => {\n                                        setSearchBy(e.value);\n                                    }}\n                                />\n                            </Col>\n                            {searchBy === \"ID\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"product\">Pedido # </Label>\n                                    <FieldAsyncSelect\n                                        name={\"order\"}\n                                        urlStr={ORDERS}\n                                        placeholder=\"Buscar por Pedido\"\n                                        defaultValue={defaultOption}\n                                        conditionalOptions={{fieldName: 'id', operator: Conditionals.OPERATORS.EQUAL}}\n                                        defaultConditions={[{field: 'status', value: 4, operator: Conditionals.OPERATORS.EQUAL}]}\n                                        onChange={(c) => {\n                                            setOrderId(c.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"GUIA\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"customer\">Guia</Label>\n                                    <FieldAsyncSelect\n                                        name={\"tracking\"}\n                                        urlStr={ORDERS}\n                                        placeholder=\"Buscar por Guia\"\n                                        defaultValue={defaultOption}\n                                        conditionalOptions={{fieldName: 'orderDelivery.tracking', operator: Conditionals.OPERATORS.LIKE}}\n                                        onChange={(c) => {\n                                            setOrderId(c.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"LOTE_GUIA\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"orders\">Lote - Guias</Label>\n                                    <FieldText\n                                        id='loteTracking'\n                                        name={\"loteTracking\"}\n                                        value={lote}\n                                        defaultValue={lote}\n                                        onChange={(e) => {\n                                            setLote(e.target.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"LOTE_PEDIDO\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"orders\">Lote - Pedidos</Label>\n                                    <FieldText\n                                        id='loteOrder'\n                                        name={\"loteOrder\"}\n                                        value={lote}\n                                        defaultValue={lote}\n                                        onChange={(e) => {\n                                            setLote(e.target.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            <Col md={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Agregar\" aria-label=\"add\">\n                                    <button type=\"button\"\n                                            className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={(!orderId && !lote) || loading}\n                                            onClick={() => addOrder()}>\n                                        {loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                        {!loading && <i className=\"mdi mdi-plus\"> </i>}\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <table className=\"table table-condensed table-bordered\">\n                                    <thead>\n                                    <tr>\n                                        <th>Pedido</th>\n                                        <th>Estado</th>\n                                        <th>Guia</th>\n                                        <th>Cliente</th>\n                                        <th>Monto</th>\n                                        <th></th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {orders.filter(o => o.status === 4).map(o => (\n                                        <tr>\n                                            <td>{o.id}</td>\n                                            <td>\n                                                <StatusField color={ORDER_STATUS[o.status]?.color}>\n                                                    {ORDER_STATUS[o.status]?.name}\n                                                </StatusField>\n                                            </td>\n                                            <td>{o.orderDelivery?.tracking}</td>\n                                            <td>{o.customer?.name}</td>\n                                            <td className=\"text-end\">{priceFormat(o.totalAmount)}</td>\n                                            <td className=\"text-center\">\n                                                <a title=\"button\" className=\"btn btn-sm text-danger\" onClick={() => removeOrder(o.id)}>\n                                                    <i className=\"uil uil-trash-alt font-size-16\"> </i>\n                                                </a>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Col>\n                            <Col>\n                                <div><b>Cant pedidos:</b> {orders.filter(o => o.status === 4).length}</div>\n                                <div><b>Total:</b> {priceFormat(orders.filter(o => o.status === 4).reduce((acc, item) => parseFloat(acc) + parseFloat(item.totalAmount), 0))}</div>\n                            </Col>\n                        </Row>\n                        {orders.some(o => o.status !== 4) && (\n                            <Row className=\"mt-5\">\n                                <Col md={12}>\n                                    <h5>Pedidos con estados no validos</h5>\n                                    <table className=\"table table-condensed table-bordered\">\n                                        <thead>\n                                        <tr>\n                                            <th>Pedido</th>\n                                            <th>Estado</th>\n                                            <th>Guia</th>\n                                            <th>Cliente</th>\n                                            <th>Monto</th>\n                                            <th></th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {orders.filter(o => o.status !== 4).map(o => (\n                                            <tr>\n                                                <td>{o.id}</td>\n                                                <td>\n                                                    <StatusField color={ORDER_STATUS[o.status]?.color}>\n                                                        {ORDER_STATUS[o.status]?.name}\n                                                    </StatusField>\n                                                </td>\n                                                <td>{o.orderDelivery?.tracking}</td>\n                                                <td>{o.customer?.name}</td>\n                                                <td className=\"text-end\">{priceFormat(o.totalAmount)}</td>\n                                                <td className=\"text-center\">\n                                                    <a className=\"btn btn-sm text-danger\" onClick={() => removeOrder(o.id)}>\n                                                        <i className=\"uil uil-trash-alt font-size-16\"> </i>\n                                                    </a>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                                <Col>\n                                    <div><b>Cant pedidos:</b> {orders.filter(o => o.status !== 4).length}</div>\n                                    <div><b>Total:</b> {priceFormat(orders.filter(o => o.status !== 4).reduce((acc, item) => parseFloat(acc) + parseFloat(item.totalAmount), 0))}</div>\n                                </Col>\n                            </Row>\n                        )}\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={conciliationLoading} disabled={conciliationLoading || orders.filter(o => o.status === 4).length === 0}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {order, loading, conciliation} = state.Order;\n    return {order, loading, conciliationSuccess: conciliation.success, conciliationError: conciliation.error, conciliationLoading: conciliation.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onConfirmConciliationRestart: () => dispatch(confirmConciliationRestart()),\n    onConfirmConciliate: (orders) => dispatch(confirmConciliation(orders)),\n    onRestartOrder: () => dispatch(restartOrder()),\n    onGetOrder: (id) => dispatch(getOrder(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderConciliationForm)\n)\n\nOrderConciliationForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderEdit.js",["1478","1479","1480","1481"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {copyToClipboard, getImageByQuality, priceFormat, printPartOfPage, threeDots} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\n\nimport {getOrder, nextStatusOrder, printOrder, resumeOrder, updateCard, updateOrder} from \"../../store/order/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderDeliveryOptions from \"./create/orderDeliveryOptions\";\nimport {COMMENT_ENTITIES, DELIVERY_METHODS_PAYMENT_TYPES, DELIVERY_TYPES, GROUPS, ORDER_STATUS, PAYMENT_TYPES} from \"../../common/constants\";\nimport {map} from \"lodash\";\nimport Images from \"../../components/Common/Image\";\nimport OrderCustomer from \"./create/orderCustomer\";\nimport OrderProducts from \"./create/orderProducts\";\nimport OrderCar from \"./create/orderCar\";\nimport {getProductsByIds} from \"../../store/product/actions\";\nimport {HtmlTooltip} from \"../../components/Common/HtmlTooltip\";\n\nimport {StatusField} from \"../../components/StatusField\";\nimport * as htmlToImage from 'html-to-image';\nimport Observations from \"../../components/Common/Observations\";\nimport {isMobile} from \"react-device-detect\";\n\n// import {toPng, toJpeg, toBlob, toPixelData, toSvg} from 'html-to-image';\n\n\nconst OrderEdit = (props) => {\n\n    const {orderId, onGetOrder, onUpdateCar, onUpdateOrder, onCloseOverlay, onNextStatusOrder, onResumeOrder, onPrintOrder, print, resume, order, car, refresh, showOrderOverlay = false} = props;\n    const [orderData, setOrderData] = useState({});\n    const [orderResume, setOrderResume] = useState('');\n    const [showAsTable, setShowAsTable] = useState(false);\n    const [orderPrint, setOrderPrint] = useState('');\n    const [downloadingPhoto, setDownloadingPhoto] = useState(false);\n    const [activeTab, setActiveTab] = useState(1);\n\n    const [openPrintConfirmModal, setOpenPrintConfirmModal] = useState(false);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n    const [openDeliveryModal, setOpenDeliveryModal] = useState(false);\n    const [openProductsModal, setOpenProductsModal] = useState(false);\n\n    const productSummaryRef = React.createRef();\n\n    useEffect(() => {\n        if (orderId) {\n            onGetOrder(orderId);\n        }\n    }, [orderId, refresh]);\n\n    useEffect(() => {\n        if (order && order.id) {\n            onResumeOrder(order.id);\n            onPrintOrder(order.id);\n\n            const orderDelivery = order.orderDelivery;\n\n            let newCar = {\n                ...car,\n                orderId: order.id,\n                customer: {id: order.customer.id},\n                deliveryOptions: {\n                    origin: order.origen,\n                    type: orderDelivery.deliveryType,\n                    method: order.deliveryMethod.name,\n                    cost: parseFloat(orderDelivery.deliveryCost) || 0,\n                    paymentType: order.paymentMode,\n                    pieces: order.piecesForChanges || 0,\n                    tracking: orderDelivery.tracking || '',\n                    deliveryLocality: orderDelivery.deliveryLocality.id || null\n                },\n                products: [],\n                isEdit: true\n            };\n\n            const o = {...order}\n            if (o.orderDetails) {\n                o.orderDetails.forEach(prod => {\n                    const total = prod.quantity * prod.price;\n                    prod.discount = total * (prod.discountPercent / 100);\n                    prod.total = total - prod.discount;\n                });\n                o.orderDetails.forEach(prod => {\n                    newCar.products.push({\n                        id: prod.id,\n                        origin: {...prod.product, id: prod.id, price: prod.price},\n                        color: prod.color,\n                        size: prod.size,\n                        sizeId: prod.productSize?.id || 0,\n                        quantity: prod.quantity,\n                        quantityAvailable: prod.productSize?.quantity || 0,\n                        discountPercentage: prod.discountPercent,\n                        discount: prod.discount,\n                    });\n                })\n            }\n            // onGetProducts(newCar.products.map(prod => prod.origin.id))\n            onUpdateCar(newCar)\n            setOrderData(order);\n\n            //setShowAsTable(order.orderDetails.length > 8);\n            setShowAsTable(isMobile);\n\n        }\n        //console.log(order);\n    }, [order]);\n\n    useEffect(() => {\n        if (resume) {\n            setOrderResume(resume);\n        }\n    }, [resume]);\n\n    useEffect(() => {\n        if (print) {\n            setOrderPrint(print);\n        }\n    }, [print]);\n\n    const copyResume = () => {\n        copyToClipboard(resume);\n    }\n\n    const printOrder = () => {\n        printPartOfPage(orderPrint);\n        setTimeout(() => setOpenPrintConfirmModal(true), 3000);\n    }\n\n    const toggleModal = () => {\n        setOpenCustomerModal(!openCustomerModal);\n    }\n    const onCloseModal = () => {\n        toggleModal();\n        onUpdateCar({...car, customer: {}});\n    }\n    const onAcceptModal = () => {\n        toggleModal();\n        if (car.customer && car.customer.id) {\n            onUpdateOrder(orderData.id, {customer: car.customer.id});\n        }\n    }\n\n    const toggleDeliveryModal = () => {\n        setOpenDeliveryModal(!openDeliveryModal);\n    }\n    const onCloseDeliveryModal = () => {\n        toggleDeliveryModal();\n    }\n    const onAcceptDeliveryModal = () => {\n        toggleDeliveryModal();\n        if (car.deliveryOptions) {\n            const deliveryData = {\n                deliveryMethod: car.deliveryOptions.method,\n                deliveryCost: car.deliveryOptions.cost,\n                chargeOnDelivery: car.deliveryOptions.type === 3,\n                origen: car.deliveryOptions.origin,\n                tracking: car.deliveryOptions.tracking,\n                deliveryLocality: car.deliveryOptions.deliveryLocality,\n                deliveryType: parseInt(car.deliveryOptions.type),\n            };\n\n            if (DELIVERY_METHODS_PAYMENT_TYPES.includes(deliveryData.deliveryMethod)) {\n                deliveryData.piecesForChanges = parseInt(car.deliveryOptions.pieces);\n                deliveryData.paymentMode = car.deliveryOptions.paymentType === PAYMENT_TYPES.CASH ? 1 : 2;\n            }\n            onUpdateOrder(orderData.id, deliveryData);\n        }\n    }\n\n    const toggleProductsModal = () => {\n        setOpenProductsModal(!openProductsModal);\n    }\n    const onCloseProductsModal = () => {\n        toggleProductsModal();\n    }\n    const onAcceptProductsModal = () => {\n        toggleProductsModal();\n        if (car.products) {\n            const order = {\n                products: car.products.map(prod => ({\n                    id: prod.origin.id,\n                    productSize: prod.sizeId,\n                    quantity: prod.quantity,\n                    discountPercentage: prod.discountPercentage,\n                }))\n            };\n            onUpdateOrder(orderData.id, order);\n        }\n    }\n\n    const getDeliveryType = (deliveryType) => {\n        let find = DELIVERY_TYPES.find(dt => dt.id === deliveryType);\n        return find ? find.label : '';\n    }\n\n    const getPaymentType = () => {\n        if (!order.paymentMode) return '';\n        return order.paymentMode === 1 ? PAYMENT_TYPES.CASH : PAYMENT_TYPES.TRANSFER;\n    }\n\n    const takePhoto = () => {\n        setDownloadingPhoto(true);\n        htmlToImage.toPng(productSummaryRef.current)\n            .then(function (dataUrl) {\n                setDownloadingPhoto(false);\n                var link = document.createElement('a');\n                link.download = `pedido_${order.id}.png`;\n                link.href = dataUrl;\n                link.click();\n            })\n            .catch(function (error) {\n                console.error('oops, something went wrong!', error);\n                setDownloadingPhoto(false);\n            })\n    }\n\n    const onConfirmPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        onNextStatusOrder(order.id);\n    }\n\n    const getDeliveryAddress = (orderDelivery) => {\n        let address = null;\n        if (orderDelivery.deliveryState) {\n            address = orderDelivery.deliveryState;\n        }\n        if (orderDelivery.deliveryMunicipality) {\n            address = (address ? address + '/' : '') + orderDelivery.deliveryMunicipality;\n        }\n        return address ? address : '';\n    }\n\n    return orderData.id ? (\n        <div className={showOrderOverlay ? 'orderDetail-overlay pt-2' : ''}>\n            <Row className=\"mb-2\">\n                <Col md={12}>\n                    <div className={\"mb-3 float-md-start\"}>\n                        {showOrderOverlay && (\n                            <>\n                                <Tooltip placement=\"bottom\" title=\"Ocultar\" aria-label=\"add\">\n                                    <button className=\"btn btn-outline-default mr-5\" onClick={() => onCloseOverlay()}>\n                                        <i className=\"uil uil-arrow-to-right font-size-16\"> </i>\n                                    </button>\n                                </Tooltip>\n                                <small className=\"badge rounded-pill bg-info font-size-14 mr-5 p-2\">Pedido# {order.id}</small>\n                            </>\n                        )}\n                        <StatusField color={ORDER_STATUS[order.status].color} className={\"font-size-14 mr-5\"}>\n                            {ORDER_STATUS[order.status].name}\n                        </StatusField>\n                        <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {order.user?.name}</small>\n                    </div>\n                    <div className={\"mb-3 float-md-end\"}>\n                        <div className=\"button-items\">\n                            {(order && (order.status === 1 || order.status === 2)) && (\n                                <Tooltip placement=\"bottom\" title=\"Anular\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\">\n                                        <i className={\"mdi mdi-delete\"}> </i>\n                                    </button>\n                                </Tooltip>\n                            )}\n                            {(order && order.status === 1) && (\n                                <Tooltip placement=\"bottom\" title=\"Confirmar\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                        <i className={\"mdi mdi-check\"}> </i>\n                                    </button>\n                                </Tooltip>\n                            )}\n                            {(order && order.status === 3) && (\n                                <Tooltip placement=\"bottom\" title=\"Confirmar envio\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                        <i className={\"mdi mdi-check\"}> </i>\n                                    </button>\n                                </Tooltip>\n                            )}\n                            {(order && order.status < 5) && (\n                                <Tooltip placement=\"bottom\" title=\"Imprimir\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => printOrder()}>\n                                        <i className={\"mdi mdi-printer\"}> </i>\n                                    </button>\n                                </Tooltip>\n\n                            )}\n                            <Tooltip placement=\"bottom\" title=\"Copiar resumen\" aria-label=\"add\">\n                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => copyResume()}>\n                                    <i className={\"mdi mdi-content-copy\"}> </i>\n                                </button>\n                            </Tooltip>\n                            <Tooltip placement=\"bottom\" title=\"Descargar foto\" aria-label=\"add\">\n                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => takePhoto()}>\n                                    <i className={\"mdi mdi-camera\"}> </i> {downloadingPhoto ? 'Descargando...' : ''}\n                                </button>\n                            </Tooltip>\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-3\">\n                <Col md={showOrderOverlay ? 12 : 4}>\n                    <Row>\n                        <Col md={showOrderOverlay ? 6 : 12} className=\"mb-3\">\n                            <Card id={'customer-detail'} className=\"p-3\">\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\"><i className=\"uil-users-alt me-2\"> </i> Datos del cliente</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <Tooltip placement=\"bottom\" title=\"Editar cliente\" aria-label=\"add\">\n                                            <button type=\"button\"\n                                                    size=\"small\"\n                                                    className=\"btn btn-sm text-primary\"\n                                                    onClick={() => {\n                                                        toggleModal();\n                                                    }}>\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </button>\n                                        </Tooltip>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Nombre: </label>\n                                        <span className=\"p-1\">{orderData.customer.name}</span>\n                                        {orderData.customer.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Correo: </label>\n                                        <span className=\"p-1\">{orderData.customer.email}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Departamento: </label>\n                                        <span className=\"p-1\">{orderData.customer.state?.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Municipio: </label>\n                                        <span className=\"p-1\">{orderData.customer.municipality?.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Documento: </label>\n                                        <span className=\"p-1\">{orderData.customer.document}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Teléfono Celular: </label>\n                                        <span className=\"p-1\">{orderData.customer.cellphone}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Teléfono Residencial: </label>\n                                        <span className=\"p-1\">{orderData.customer.phone}</span>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                        <Col md={showOrderOverlay ? 6 : 12} className=\"mb-3\">\n                            <Card id={'delivery-options'} className=\"p-3\">\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Datos de envio</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <Tooltip placement=\"bottom\" title=\"Editar envio\" aria-label=\"add\">\n                                            <button type=\"button\"\n                                                    size=\"small\"\n                                                    className=\"btn btn-sm text-primary\"\n                                                    onClick={toggleDeliveryModal}>\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </button>\n                                        </Tooltip>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Origen del pedido: </label>\n                                        <span className=\"p-1\">{orderData.origen}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Tipo de pedido: </label>\n                                        <span className=\"p-1\">{getDeliveryType(orderData?.orderDelivery?.deliveryType)}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Metodo de envio: </label>\n                                        <span className=\"p-1\">{orderData.deliveryMethod.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Costo del envio: </label>\n                                        <span className=\"p-1\">{orderData?.orderDelivery?.deliveryCost}</span>\n                                    </Col>\n                                    {DELIVERY_METHODS_PAYMENT_TYPES.includes(orderData.deliveryMethod.name) && (\n                                        <>\n                                            <Col md={12}>\n                                                <label>Forma de pago: </label>\n                                                <span className=\"p-1\">{getPaymentType()}</span>\n                                            </Col>\n                                            <Col md={12}>\n                                                <label>Prendas para cambio: </label>\n                                                <span className=\"p-1\">{orderData.piecesForChanges || 0}</span>\n                                            </Col>\n                                        </>\n                                    )}\n                                    <Col md={12}>\n                                        <label>Dirección del envio: </label>\n                                        <span className=\"p-1\">{orderData.orderDelivery?.deliveryLocality?.name}</span>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md={showOrderOverlay ? 12 : 8}>\n                    <div id={\"products-summary\"} ref={productSummaryRef}>\n                        <Row>\n                            <Col md={12} className=\"mb-3\">\n                                <Card id={'products'} className=\"p-3\">\n                                    <Row className=\"mb-2\">\n                                        <Col xs={6}>\n                                            <h4 className=\"card-title text-info\"><i className=\"uil-box me-2\"> </i> Productos</h4>\n                                        </Col>\n                                        <Col xs={6} className=\"text-right\">\n                                            {!isMobile && (\n                                                <>\n                                                    <Tooltip placement=\"bottom\" title=\"Mostar como tabla\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    setShowAsTable(true);\n                                                                }}>\n                                                            <i className=\"fa fa-list font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                    <Tooltip placement=\"bottom\" title=\"Mostrar como tarjetas\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    setShowAsTable(false);\n                                                                }}>\n                                                            <i className=\"fa fa-th font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                </>\n                                            )}\n                                            <Tooltip placement=\"bottom\" title=\"Editar products\" aria-label=\"add\">\n                                                <button type=\"button\"\n                                                        size=\"small\"\n                                                        className=\"btn btn-sm text-primary\"\n                                                        onClick={() => {\n                                                            toggleProductsModal();\n                                                        }}>\n                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                </button>\n                                            </Tooltip>\n                                        </Col>\n                                    </Row>\n                                    {!showAsTable && (\n                                        <Row>\n                                            {map(orderData.orderDetails, (product, k) => (\n                                                <div key={k} className=\"col-md-6 mb-2\">\n                                                    <div className=\"prod-box\">\n                                                        <Row>\n                                                            <Col xs={2} className=\"text-center\" style={{padding: '2px 0 2px 8px'}}>\n                                                                <div className={`border-1`} id={`product-${k}`} role=\"tabpanel\">\n                                                                    <Images src={`${getImageByQuality(product.product.productImage[0], 'medium')}`}\n                                                                            alt={\"\"}\n                                                                            height={80}\n                                                                            className=\"img-fluid d-block\"\n                                                                            styles={{height: '83px', width: '53px', borderRadius: '8px', 'margin-left': '4px'}}\n                                                                    />\n                                                                </div>\n                                                            </Col>\n                                                            <Col xs={5} className=\"p-1\">\n                                                                <Row>\n                                                                    <Col md={12}>\n                                                                        <HtmlTooltip\n                                                                            placement={'right-end'}\n                                                                            title={\n                                                                                <React.Fragment>\n                                                                                    <Images src={`${getImageByQuality(product.product.productImage.length > 0 ? product.product.productImage[0] : {}, 'medium')}`}\n                                                                                            alt={\"\"}\n                                                                                            height={120}\n                                                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                                                </React.Fragment>\n                                                                            }>\n                                                                            <b className=\"text-info\">{product.product.reference}</b>\n                                                                        </HtmlTooltip>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <Tooltip placement=\"bottom\" title={product.color} aria-label=\"add\">\n                                                                            <small> {threeDots(product.color, 22)}</small>\n                                                                        </Tooltip>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Cantidad:</span> {product.quantity}</small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small className=\"badge rounded-pill bg-soft-info\">Talla: {product.size}</small>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                            <Col xs={5} className=\"p-1\">\n                                                                <Row>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Precio:</span> {priceFormat(product.price)}</small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Desc.:</span> <span\n                                                                            className=\"text-danger\">-{priceFormat(product.discount)}</span></small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <div className=\"font-weight-600 font-size-12\"><b>Total: {priceFormat(product.total)}</b></div>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </Row>\n                                    )}\n                                    {showAsTable && (\n                                        <Row>\n                                            <Col md={12}>\n                                                <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                                                    <thead>\n                                                    <tr>\n                                                        <th className=\"text-center\">Código</th>\n                                                        <th className=\"text-center\">Color</th>\n                                                        <th className=\"text-center\">Talla</th>\n                                                        <th className=\"text-center\">Cantidad</th>\n                                                        <th className=\"text-center\">Precio Unit.</th>\n                                                        <th className=\"text-center\">% Desc.</th>\n                                                        <th className=\"text-center\">Total Desc.</th>\n                                                        <th className=\"text-center\">SubTotal</th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                    {map(orderData.orderDetails, (product, key) => (\n                                                        <tr key={key}>\n                                                            <td style={{width: '10%'}}>\n                                                                <HtmlTooltip\n                                                                    title={\n                                                                        <React.Fragment>\n                                                                            <Images src={`${getImageByQuality(product.product.productImage.length > 0 ? product.product.productImage[0] : {}, 'medium')}`}\n                                                                                    alt={product.product.reference}\n                                                                                    height={100}\n                                                                                    className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                                        </React.Fragment>\n                                                                    }>\n                                                                    <div className=\"text-info\">{product.product.reference}</div>\n                                                                </HtmlTooltip>\n                                                            </td>\n                                                            <td style={{width: '25%'}} className=\"text-start\">{product.color}</td>\n                                                            <td style={{width: '15%'}} className=\"text-center\">{product.size}</td>\n                                                            <td style={{width: '10%'}} className=\"text-center\">{product.quantity}</td>\n                                                            <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.price)}</td>\n                                                            <td style={{width: '10%'}} className=\"text-center\">{product.discountPercentage || 0}%</td>\n                                                            <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.discount)}</td>\n                                                            <td style={{width: '15%'}} className=\"text-end\">{priceFormat(product.total)}</td>\n                                                        </tr>\n                                                    ))}\n                                                    </tbody>\n                                                </table>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <Card id={'summary-detail'} className=\"p-3\">\n                                    <Row>\n                                        <Col md={12}>\n                                            <h4 className=\"card-title text-info\"><i className=\"uil uil-bill\"> </i> Totales</h4>\n                                        </Col>\n                                        <Col md={12}>\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table table-sm mb-0\">\n                                                    <tbody>\n                                                    <tr>\n                                                        <td>Total sin descuento:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.subTotalAmount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Descuento:</td>\n                                                        <td className=\"text-end text-danger\">- {priceFormat(orderData.totalDiscount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Total con descuento:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.totalDiscount + orderData.subTotalAmount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Envio:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.orderDelivery.deliveryCost)}</td>\n                                                    </tr>\n                                                    <tr className=\"bg-light\">\n                                                        <th className=\"font-size-16\">Total :</th>\n                                                        <td className=\"text-end\"><span className=\"fw-bold font-size-16\">{priceFormat(orderData.totalAmount)}</span></td>\n                                                    </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                </Col>\n            </Row>\n\n            <Row className=\"mb-3\">\n                <Col md={12}>\n                    <Card id={'order-tabs'} className=\"p-3\">\n                        <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Historial</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(2)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Observaciones del pedido</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 3 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(3)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Observaciones del cliente</span>\n                                </a>\n                            </li>\n                        </ul>\n                        <div className=\"tab-content p-3 text-muted\">\n                            <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab1\" role=\"tabpanel\">\n                                <p className=\"mb-0\">\n                                    <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap\">\n                                        <thead>\n                                        <tr>\n                                            <th className=\"text-center\">Estado</th>\n                                            <th className=\"text-center\">Usuario</th>\n                                            <th className=\"text-center\">Fecha</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        <tr>\n                                            <td colSpan={3}>\n                                                No se encontraron datos.\n                                            </td>\n                                        </tr>\n                                        </tbody>\n                                    </table>\n                                </p>\n                            </div>\n                            <div className={`tab-pane ${activeTab === 2 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                <Observations\n                                    entitySuggested={GROUPS.ORDER_OBSERVATIONS}\n                                    entity={COMMENT_ENTITIES.ORDER}\n                                    entityId={orderData.id}/>\n                            </div>\n                            <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                <Observations\n                                    entitySuggested={GROUPS.CUSTOMER_OBSERVATIONS}\n                                    entity={COMMENT_ENTITIES.CUSTOMER}\n                                    entityId={orderData.customer?.id}/>\n                            </div>\n                        </div>\n                    </Card>\n                </Col>\n            </Row>\n\n            <CustomModal title={\"Confirmar\"} showFooter={false} isOpen={order.status === 2 && openPrintConfirmModal} onClose={() => setOpenPrintConfirmModal(false)}>\n                <Row>\n                    <Col md={12}>\n                        ¿Logró imprimir el pedido?\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => setOpenPrintConfirmModal(false)}>NO</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onConfirmPrintOrder}>SI</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n\n            <CustomModal title={\"Modificar cliente\"} size=\"lg\" showFooter={false} isOpen={openCustomerModal} onClose={onCloseModal}>\n                <OrderCustomer showAsModal={true}\n                               onCloseModal={onCloseModal}\n                               onAcceptModal={onAcceptModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar opciones de envio\"} size=\"lg\" showFooter={false} isOpen={openDeliveryModal} onClose={onCloseDeliveryModal}>\n                <OrderDeliveryOptions customer={orderData.customer}\n                                      showAsModal={true}\n                                      onCloseModal={onCloseDeliveryModal}\n                                      onAcceptModal={onAcceptDeliveryModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar productos\"} size=\"lg\" showFooter={false} isOpen={openProductsModal} onClose={onCloseProductsModal}>\n                <Row>\n                    <Col md={12}>\n                        <OrderProducts/>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12}>\n                        <OrderCar/>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={onCloseProductsModal}>Cancelar</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onAcceptProductsModal}>Guardar</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n\n        </div>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {products} = state.Product\n    const {error, car, order, loading, custom, refresh} = state.Order;\n    const print = custom.data && custom.data.print ? custom.data.print : null;\n    const resume = custom.data && custom.data.resume ? custom.data.resume : null;\n    return {error, car, order, products, print, resume, loading, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onUpdateOrder: (id, payload) => dispatch(updateOrder(id, payload)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n    onGetProducts: (ids = []) => dispatch(getProductsByIds(ids)),\n    onNextStatusOrder: (id = []) => dispatch(nextStatusOrder({order: id})),\n    onResumeOrder: (id = []) => dispatch(resumeOrder(id)),\n    onPrintOrder: (id = []) => dispatch(printOrder(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderEdit)\n)\n\nOrderEdit.propTypes = {\n    orderId: PropTypes.number.isRequired,\n    showOrderOverlay: PropTypes.bool,\n    onCloseOverlay: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/fakebackend_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/firebase_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductSize.js",["1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport {FieldText} from \"../../components/Fields\";\nimport {map} from \"lodash\";\nimport {Button} from \"@material-ui/core\";\nimport {updateProductSizeList} from \"../../store/productSize/actions\";\nimport {connect} from \"react-redux\";\nimport Conditionals from \"../../common/conditionals\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst ProductSize = props => {\n    const {product, template, onGetProductSizes, productSizes, refresh} = props\n    const [productSizesList, setProductSizesList] = useState([]);\n    const [selectValues, setSelectValues] = useState([]);\n    const [sizeTotals, setSizeTotals] = useState({});\n    const form = React.createRef();\n\n    useEffect(() => {\n        if (product.productSize.length) {\n            setProductSizesList(parseList(product.productSize));\n        } else {\n            setProductSizesList([]);\n        }\n\n        fillSelectValues();\n    }, [product])\n\n    useEffect(() => {\n        calculateTotals();\n    }, [productSizesList])\n\n    const getModel = () => {\n        const model = {color: '', sizes: {}};\n        if (template && template.sizes) {\n            template.sizes.forEach(size => model.sizes[size] = 0)\n        }\n        return model;\n    }\n    const fillSelectValues = () => {\n        if (selectValues.length === 0) {\n            const valueList = [];\n            for (let i = 0; i <= 1000; i++) {\n                valueList.push({label: i, value: i});\n            }\n            setSelectValues(valueList);\n        }\n    }\n    const addColor = () => {\n        const list = [...productSizesList, getModel()];\n        setProductSizesList(list);\n        calculateTotals();\n    }\n    const removeColor = (index) => {\n        let list = [...productSizesList];\n        list.splice(index);\n        setProductSizesList(list);\n        calculateTotals();\n    }\n    const parseDefaultValue = (model, sizeName) => {\n        if (!model || !model.sizes) return 0;\n        return model.sizes[sizeName] ? model.sizes[sizeName] : 0;\n    }\n    const parseValues = () => {\n        //flat data\n        const dataList = [];\n        productSizesList.map((ps) => {\n            Object.keys(ps.sizes).forEach(sizeName => {\n                let qty = parseFloat(ps.sizes[sizeName]);\n\n                if (qty > 0) {\n                    dataList.push({name: sizeName, qty: qty, color: ps.color});\n                }\n            });\n        });\n        return dataList;\n    }\n    const parseList = (list) => {\n        let map = {};\n        list.filter(ps => null !== ps).map(ps => {\n            const key = ps.color.replace(/\\s/g, '');\n            let mapElement = map[key];\n            if (!mapElement) {\n                mapElement = {color: ps.color, sizes: {}};\n                template.sizes.forEach(size => mapElement.sizes[size] = 0)\n            }\n            mapElement.sizes[ps.name] = ps.quantity;\n            map[key] = mapElement;\n        });\n        return Object.keys(map).map((m) => map[m]);\n    }\n    const handleValidSubmit = (event, values) => {\n        const list = parseValues(values);\n        if (list && list.length > 0) {\n            props.onUpdateProductSizeList(product.id, list, props.history);\n        }\n    }\n    const handleChangeColors = (index, color) => {\n        if (!productSizesList.some(l => l.color === color)) {\n            const list = [...productSizesList];\n            list[index].color = color;\n            setProductSizesList(list);\n        }\n        validateColor(\"color_\" + index);\n    }\n    const handleChangeSizes = (index, sizeName, sizeValue) => {\n        const list = [...productSizesList];\n        list[index].sizes[sizeName] = sizeValue;\n        setProductSizesList(list);\n        calculateTotals();\n    }\n\n    const validateColorDuplicate = (color) => {\n        //TODO validar\n        if (productSizesList.some(l => l.color === color)) {\n            return 'Color repetido.';\n        }\n        return true;\n    }\n    const validateColor = (inputName) => {\n        form.current.validateInput(inputName);\n    }\n    const calculateTotals = () => {\n        const totals = {total: 0};\n        productSizesList.forEach((model) => {\n            template.sizes.forEach((size) => {\n                if (!totals[size]) totals[size] = 0;\n                totals[size] += parseInt(model.sizes[size]);\n                totals.total += parseInt(model.sizes[size]);\n            })\n        })\n        setSizeTotals(totals);\n    }\n\n\n    return (\n        <React.Fragment>\n            <AvForm ref={form} className=\"needs-validation\" autoComplete=\"off\"\n                    onValidSubmit={(e, v) => {\n                        handleValidSubmit(e, v)\n                    }}>\n                <Row>\n                    <Col md=\"12\">\n                        <div className={\"table-responsive\"}>\n                            <table className=\"table table-card-list table-condensed\">\n                                <thead>\n                                <tr>\n                                    <th>Color</th>\n                                    {map(template?.sizes, (size, key) => (\n                                        <th key={'th_' + key} className=\"text-center\">{size}</th>\n                                    ))}\n                                    <th>Borrar</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {map(productSizesList, (model, k1) => (\n                                    <tr key={'tr_' + k1}>\n                                        <td>\n                                            <FieldText\n                                                id={\"field_color_\" + k1}\n                                                name={\"color_\" + k1}\n                                                placeholder={'Ingrese el color'}\n                                                minLength={3}\n                                                maxLength={20}\n                                                value={model.color}\n                                                defaultValue={model.color}\n                                                onBlur={(e) => handleChangeColors(k1, e.target.value)}\n                                                validate={{myValidation: validateColorDuplicate}}\n                                                required/>\n                                        </td>\n                                        {map(template.sizes, (size, k2) => (\n                                            <td key={'td_' + k1 + '_' + k2} style={{minWidth: '30px'}} className=\"text-center\">\n                                                <select\n                                                    id={\"select_\" + k1 + '_' + k2}\n                                                    name={\"select_\" + k1 + '_' + k2}\n                                                    value={model.sizes[size]}\n                                                    // defaultValue={parseDefaultValue(model, size)}\n                                                    onChange={(e) => handleChangeSizes(k1, size, e.target.value, model)}\n                                                    className=\"form-control\"\n                                                >\n                                                    {map(selectValues, (o, k3) => (\n                                                        <option key={k3} value={o.value}>{o.label}</option>\n                                                    ))}\n                                                </select>\n                                            </td>\n                                        ))}\n                                        <th>\n                                            <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => removeColor(k1)}>\n                                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                            </button>\n                                        </th>\n                                    </tr>\n                                ))}\n                                <tr>\n                                    <th>Totales</th>\n                                    {map(template.sizes, (size, k) => (\n                                        <th key={'td_' + k} style={{minWidth: '30px'}} className=\"text-center\">\n                                            {sizeTotals[size]}\n                                        </th>\n                                    ))}\n                                    <th>{sizeTotals.total}</th>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"12\">\n                        <div className=\"text-center m-3\">\n                            <Button color=\"default\" type=\"button\" onClick={() => addColor()}>\n                                Agregar color\n                            </Button>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <ButtonSubmit loading={props.loading}/>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductSize.propTypes = {\n    product: PropTypes.object,\n    productSizes: PropTypes.array,\n    onGetProductSizes: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {productSizes, loading, meta, refresh} = state.ProductSize\n    return {productSizes, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductSizes: (productId) => {\n        const conditions = new Conditionals.Condition;\n        if (productId) {\n            conditions.add('product', productId, Conditionals.OPERATORS.EQUAL);\n        }\n        //dispatch(getProductSizes(conditions.all(), null, 0))\n    },\n    onUpdateProductSizeList: (id, data, history) => dispatch(updateProductSizeList(id, data, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductSize)\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/customer_status.js",["1493","1494"],"import React from \"react\";\n\nexport const CUSTOMER_STATUS = {\n    ACTIVE: true,\n    INACTIVE: false\n};\n\nexport const ConverterCustomerStatus = (status) => {\n    switch(status) {\n        case CUSTOMER_STATUS.ACTIVE:\n            return 'Activo';\n            break;\n        default:\n            return 'Inactivo';\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/OrderCardList.js",["1495","1496","1497","1498","1499","1500","1501","1502","1503"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {map} from \"lodash\";\nimport {getOrder, getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {DELIVERY_TYPES, ORDER_STATUS} from \"../../common/constants\";\nimport {StatusField} from \"../../components/StatusField\";\n\nconst OrderCardList = (props) => {\n\n    const {onGetOrder, onGetOrders, order, orders, productId, customerId} = props;\n    const [ordersList, setOrdersList] = useState([]);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n\n    useEffect(() => {\n        if (customerId) {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"customer\", customerId, Conditionals.OPERATORS.EQUAL);\n            onGetOrders(conditions);\n        }\n    }, [customerId]);\n\n    useEffect(() => {\n        if (orders && orders.length > 0) {\n            setOrdersList(orders);\n        }\n        //console.log('orders', orders)\n    }, [orders]);\n\n    const getDeliveryType = (delivery) => {\n        const deliveryType = delivery ? delivery.deliveryType : '';\n        let find = DELIVERY_TYPES.find(dt => dt.id === deliveryType);\n        return find ? find.label : '';\n    }\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col md={12}>\n                    <h4 className=\"card-title text-info\"><i className=\"uil-shopping-cart-alt me-2\"> </i> Pedidos recientes</h4>\n                </Col>\n                {ordersList.sort((a,b) => a.id < b.id).map((order, k) => (\n                    <div key={k} className=\"order-box\">\n                        <Row>\n                            <Col md={6} className=\"\">\n                                <div>\n                                    <Link to={`/order/${order.id}`} className=\"text-primary\">\n                                        <small className=\"font-weight-600 text-info\">Pedido #: {order.id}</small>\n                                    </Link>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Origen:</span> {order.origen}</small>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Tipo de entrega:</span> {getDeliveryType(order.orderDelivery)}</small>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Método de entrega:</span> {order.deliveryMethod.name}</small>\n                                </div>\n                            </Col>\n                            <Col md={6} className=\"text-right\">\n                                <div>\n                                    <div>\n                                        <span className=\"m-2 mb-4\">\n                                            <Tooltip placement=\"bottom\" title=\"Estado\" aria-label=\"add\">\n                                                <StatusField color={ORDER_STATUS[order.status].color}>{ORDER_STATUS[order.status].name}</StatusField>\n                                            </Tooltip>\n                                        </span>\n                                        <span className=\"m-2 mb-4\">\n                                            <Tooltip placement=\"bottom\" title=\"Fecha creación\" aria-label=\"add\">\n                                                <small className=\"badge rounded-pill bg-light p-2\">{formatDate(order.createdAt)}</small>\n                                            </Tooltip>\n                                        </span>\n                                    </div>\n                                    <div className=\"m-1\">\n                                        <Tooltip placement=\"bottom\" title=\"Cantidad de prendas\" aria-label=\"add\">\n                                             <small className=\"badge rounded-pill bg-light p-2\"><span className=\"font-weight-600\">Cant. prendas :</span> {order.quantity}</small>\n                                        </Tooltip>\n                                    </div>\n                                    <div>\n                                        <small className=\"m-2 fw-bold font-size-16\">{priceFormat(order.totalAmount)}</small>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n                ))}\n            </Row>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {products, product} = state.Product\n    const {error, car, order, orders, loading} = state.Order;\n    return {error, car, order, orders, products, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onGetOrders: (conditions) => dispatch(getOrders(conditions.all(), 5, 0)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderCardList)\n)\n\nOrderCardList.propTypes = {\n    customerId: PropTypes.number,\n    error: PropTypes.any,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductsPending.js",["1504"],"import React, {useEffect} from \"react\";\nimport {Col, Row} from \"reactstrap\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {Card} from \"@material-ui/core\";\nimport {map} from \"lodash\";\nimport {pendingProducts} from \"../../store/product/actions\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\n\nconst ProductsPendingList = ({onGetProductsPending, product, pendingProducts}) => {\n\n    useEffect(() => {\n        if(product && product.id) {\n            onGetProductsPending(product.id);\n        }\n    }, [product]);\n\n    return (\n        <React.Fragment>\n            <Card className=\"p-3\">\n                <Row>\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\">Ordenes pendientes</h4>\n                    </Col>\n                </Row>\n                <Row>\n                   <Col md={12}>\n                       <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                           <thead>\n                           <tr>\n                               <th style={{width: '25%'}} className=\"text-center\">Pedido #</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Color</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Talla</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Cantidad</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Cliente</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Estado del pedido</th>\n                           </tr>\n                           </thead>\n                           <tbody>\n                           {map(pendingProducts, (prod, key) => (\n                               <tr key={key}>\n                                   <td className=\"text-center\">\n                                       <Link to={`/order/${prod.order.id}`} className=\"text-primary\">\n                                           <small className=\"font-weight-600 text-info\">{prod.order.id}</small>\n                                       </Link>\n                                   </td>\n                                   <td className=\"text-center\">{prod.color}</td>\n                                   <td className=\"text-center\">{prod.size}</td>\n                                   <td className=\"text-center\">{prod.quantity}</td>\n                                   <td className=\"text-center\">{prod.customer.name}</td>\n                                   <td className=\"text-center\">\n                                       <StatusField color={ORDER_STATUS[prod.order.status].color} className={\"font-size-16\"}>\n                                           {ORDER_STATUS[prod.order.status].name}\n                                       </StatusField>\n                                   </td>\n                               </tr>\n                           ))}\n                           {pendingProducts.length === 0 && (\n                               <tr>\n                                   <td colSpan={8} className=\"text-center text-muted\">No hay ordenes pendientes</td>\n                               </tr>\n                           )}\n                           </tbody>\n                       </table>\n                   </Col>\n                </Row>\n            </Card>\n        </React.Fragment>\n    ) ;\n}\n\nconst mapStateToProps = state => {\n    const {error, product, custom, loading} = state.Product\n    const pendingProducts = custom.data && custom.data.pendingProducts ? custom.data.pendingProducts:[];\n    return {error, product, pendingProducts: pendingProducts, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductsPending: (id) => dispatch(pendingProducts(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductsPendingList)\n)\n\nProductsPendingList.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object,\n    product: PropTypes.object,\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-users.js",["1505","1506","1507","1508","1509","1510","1511","1512"],"import React, {useEffect, useState} from \"react\";\nimport {Card, CardBody, Table} from \"reactstrap\"\n\n//Simple bar\nimport SimpleBar from \"simplebar-react\"\n\n//Import Image\nimport avatar4 from \"../../assets/images/users/avatar-4.jpg\"\nimport avatar5 from \"../../assets/images/users/avatar-5.jpg\"\nimport avatar6 from \"../../assets/images/users/avatar-6.jpg\"\nimport avatar7 from \"../../assets/images/users/avatar-7.jpg\"\nimport avatar8 from \"../../assets/images/users/avatar-8.jpg\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\n\nconst TopUsers = (props) => {\n    const {users, meta, onGetUsers, loading, refresh} = props;\n    const [usersList, setCategoriesList] = useState([])\n\n    useEffect(() => {\n        onGetUsers()\n    }, [onGetUsers])\n\n    useEffect(() => {\n        setCategoriesList(users)\n    }, [users])\n\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <div className=\"float-end\">\n                    </div>\n                    <h4 className=\"card-title mb-4\">Usuarios</h4>\n                    <SimpleBar style={{maxHeight: \"336px\"}}>\n                        <div className=\"table-responsive\">\n                            <Table className=\"table-borderless table-centered table-nowrap\">\n                                <tbody>\n                                {usersList.map((user, k) => (\n                                    <tr key={k}>\n                                        <td style={{width: \"20px\"}}>\n                                            <i className=\"mdi mdi-account-circle m-0 font-size-20 text-primary\"></i>\n                                        </td>\n                                        <td>\n                                            <h6 className=\"font-size-15 mb-1 fw-normal\">{`${user.name} ${user.lastname}`}</h6>\n                                            <p className=\"text-muted font-size-13 mb-0\">\n                                                <i className=\"mdi mdi-mail\"> </i> {user.email}\n                                            </p>\n                                        </td>\n                                        <td className=\"text-muted fw-semibold text-end\">\n                                            {user.username}\n                                        </td>\n                                    </tr>\n                                ))}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </SimpleBar>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, 6, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TopUsers)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/latest-transaction.js",["1513","1514"],"import React from \"react\"\nimport { Card, CardBody, Table, CardTitle, Label ,Input ,Row, Col, Button} from \"reactstrap\"\nimport { Link } from \"react-router-dom\"\n\nconst LatestTransaction = () => {\n    return (\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <CardBody>\n                        <CardTitle className=\"h4 mb-4\">Pedidos Retrazados</CardTitle>\n                        <div className=\"table-responsive\">\n                            <Table className=\"table-centered table-nowrap mb-0\">\n                                <thead className=\"table-light\">\n                                <tr>\n                                    <th>ID</th>\n                                    <th>Cliente</th>\n                                    <th>Fecha</th>\n                                    <th>Monto</th>\n                                    <th>Estado</th>\n                                    <th>Metodo de Envio</th>\n                                    <th></th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2540</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $400\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2541</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $380\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                       Interrapidismo\n                                    </td>\n                                    <td>\n\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2542</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $384\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2543</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $412\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2544</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $404\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2545</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $392\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-warning font-size-12\">Impresa</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </Table>\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default LatestTransaction\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/mini-widget.js",["1515","1516","1517","1518"],"import PropTypes from 'prop-types'\nimport React from \"react\"\nimport { Col, Card, CardBody } from \"reactstrap\"\nimport CountUp from 'react-countup';\nimport ReactApexChart from \"react-apexcharts\"\nimport WidgetCard from \"../../components/Common/WidgetCard\";\n\nconst MiniWidget = props => {\n    return (\n        <React.Fragment>\n            {props.reports.map((report, key) => (\n                <Col md={6} xl={3} key={key}>\n                    <WidgetCard report={report}/>\n                </Col>\n            ))}\n        </React.Fragment>\n    )\n}\n\nexport default MiniWidget\n\nMiniWidget.propTypes = {\n    reports: PropTypes.array\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-vendors.js",[],"/Users/ramon/Repositories/lucy-moie/src/config.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/SidebarContent.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customers-list.js",["1519","1520"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport customerColumn from \"./customerColumn\"\nimport {Link} from \"react-router-dom\"\nimport {deleteCustomer, getCustomers} from \"../../../store/customer/actions\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {countCustomersByStatus, countMayoristas, statsCustomerRegistered, statsCustomerRegisteredToday} from \"../../../helpers/service\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport StatsRegisteredCard from \"../../../components/Common/StatsRegisteredCard\";\nimport CountUp from \"react-countup\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst CustomersList = props => {\n    const {customers, meta, onGetCustomers, onDeleteCustomer,  refresh, countCustomersByStatus, statsCustomerRegistered, statsCustomerRegisteredToday} = props;\n    const [customerList, setCustomerList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [countMayorista, setCountMayorista] = useState(0);\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        onGetCustomers();\n        countMayoristas().then(data => {\n            if(data[1]){\n                setCountMayorista(data[1])\n            }\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        onGetCustomers()\n    }, [onGetCustomers])\n\n    useEffect(() => {\n        setCustomerList(customers)\n    }, [customers])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetCustomers(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetCustomers(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteCustomer(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar Cliente?',\n            description: 'Usted está eliminado este cliente, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = customerColumn(onDelete);\n\n    return (\n        <>\n            <Row className=\"text-center\">\n                <Col md={4}>\n                    <StatsStatusCard title=\"Clientes\" getData={countCustomersByStatus}/>\n                </Col>\n                <Col md={4}>\n                    <StatsRegisteredCard title=\"Clientes Registrados esta semana\" getData={statsCustomerRegistered} getDataToday={statsCustomerRegisteredToday}/>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <CardBody>\n                            <div className=\"float-end mt-2\">\n                                <Tooltip placement=\"bottom\" title=\"Clientes mayoristas\" aria-label=\"add\">\n                                    <i className=\"mdi mdi-crown font-size-24 mr-1 text-warning p-3\"> </i>\n                                </Tooltip>\n                            </div>\n                           <div>\n                               <h4 className=\"mb-1 mt-2\">\n                                   <CountUp end={countMayorista} separator=\",\" decimals={0}/>\n                               </h4>\n                               <p className=\"text-muted mb-0\">{\"Clientes mayoristas\"}</p>\n                           </div>\n                            <p className=\"text-muted mb-0 mt-3\">\n                            </p>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider\n                                pagination={paginationFactory(pageOptions)}\n                            >\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={customerList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-users-alt me-2\"></i> Clientes</h4>\n                                                                {/* {!filter && (\n                                                                            <div className=\"position-relative\">\n                                                                                <SearchBar {...toolkitProps.searchProps}/>\n                                                                                <i className=\"mdi mdi-magnify search-icon\"></i>\n                                                                            </div>\n                                                                        )}*/}\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            <Tooltip\n                                                                placement=\"bottom\"\n                                                                title=\"Filtros Avanzados\" aria-label=\"add\"\n                                                            >\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i></Button>\n                                                            </Tooltip>\n                                                            <Link to={\"/customer\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo Cliente\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps}/>\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nCustomersList.propTypes = {\n    customers: PropTypes.array,\n    onGetCustomers: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {customers, loading, meta, refresh, custom} = state.Customer\n    return {customData: custom, customers, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    countCustomersByStatus,\n    countMayoristas,\n    statsCustomerRegistered,\n    statsCustomerRegisteredToday,\n    onGetCustomers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCustomers(conditional, limit, page)),\n    onDeleteCustomer: (id) => dispatch(deleteCustomer(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CustomersList)\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/NotificationDropdown.js",["1521"],"import React, { useState } from \"react\"\nimport PropTypes from 'prop-types'\nimport { Link } from \"react-router-dom\"\nimport { Dropdown, DropdownToggle, DropdownMenu, Row, Col } from \"reactstrap\"\nimport SimpleBar from \"simplebar-react\"\n\n//Import images\nimport avatar3 from \"../../../assets/images/users/avatar-3.jpg\"\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\nimport PrintBatchRequest from \"../../../pages/Orders/PrintBatchRequest\";\nimport CatalogPrintBatchRequest from \"../../../pages/Category/CatalogPrintBatchRequest\";\n\nconst NotificationDropdown = props => {\n  // Declare a new state variable, which we'll call \"menu\"\n  const [menu, setMenu] = useState(false)\n\n  return (\n    <>\n      <Dropdown\n        isOpen={menu}\n        toggle={() => setMenu(!menu)}\n        className=\"dropdown d-inline-block\"\n        tag=\"li\"\n      >\n        <DropdownToggle\n          className=\"btn header-item noti-icon waves-effect\"\n          tag=\"button\"\n          id=\"page-header-notifications-dropdown\"\n        >\n          <i className=\"uil-bell\"></i>\n          <span className=\"badge bg-danger rounded-pill\">3</span>\n        </DropdownToggle>\n\n        <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\n          <div className=\"p-3\">\n            <Row className=\"align-items-center\">\n              <Col>\n                <h6 className=\"m-0 font-size-16\"> {props.t(\"Notifications\")} </h6>\n              </Col>\n              <div className=\"col-auto\">\n                <a href=\"#!\" className=\"small\">\n                  {\" \"}\n                  {props.t(\"Mark all as read\")}\n                </a>\n              </div>\n            </Row>\n          </div>\n\n          <SimpleBar style={{ height: \"230px\" }}>\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <div className=\"avatar-xs me-3\">\n                  <span className=\"avatar-title bg-primary rounded-circle font-size-16\">\n                  <i className=\"uil-shopping-basket\"></i>\n                  </span>\n                </div>\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">\n                    Cambio de clave\n                  </h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      Se registro un cambio de clave en su cuenta\n                    </p>\n                    <p className=\"mb-0\">\n                    <i className=\"mdi mdi-clock-outline\"></i>{\" \"}\n                      {props.t(\"3 min ago\")}{\" \"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <img\n                  src={avatar3}\n                  className=\"me-3 rounded-circle avatar-xs\"\n                  alt=\"user-pic\"\n                />\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">Pedido completado</h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      Pedido completado\n                    </p>\n                    <p className=\"mb-0\">\n                      <i className=\"mdi mdi-clock-outline\"/>{\" \"}\n                      {props.t(\"3 min ago\")}{\" \"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <div className=\"avatar-xs me-3\">\n                  <span className=\"avatar-title bg-success rounded-circle font-size-16\">\n                    <i className=\"bx bx-badge-check\"/>\n                  </span>\n                </div>\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">\n                    {props.t(\"Your item is shipped\")}\n                  </h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      {props.t(\"If several languages coalesce the grammar\")}\n                    </p>\n                    <p className=\"mb-0\">\n                      <i className=\"mdi mdi-clock-outline\"/>{\" \"}\n                      {props.t(\"3 min ago\")}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <img\n                    src={avatar3}\n                    className=\"me-3 rounded-circle avatar-xs\"\n                    alt=\"user-pic\"\n                />\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">Pedido completado</h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      Pedido completado\n                    </p>\n                    <p className=\"mb-0\">\n                      <i className=\"mdi mdi-clock-outline\"/>{\" \"}\n                      {props.t(\"4 min ago\")}{\" \"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          </SimpleBar>\n          <div className=\"p-2 border-top d-grid\">\n            <Link\n              className=\"btn btn-sm btn-link font-size-14 text-center\"\n              to=\"#\"\n            ><i className=\"uil-arrow-circle-right me-1\"></i>\n              {\" \"}\n              {props.t(\"View all\")}{\" \"}\n            </Link>\n          </div>\n        </DropdownMenu>\n      </Dropdown>\n\n      <PrintBatchRequest />\n      <CatalogPrintBatchRequest />\n    </>\n  )\n}\n\nexport default withTranslation()(NotificationDropdown)\n\nNotificationDropdown.propTypes = {\n  t: PropTypes.any\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/ProfileMenu.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productSize/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/reducer.js",["1522"],"import {\n    GET_PRODUCT_IMAGE,\n    GET_PRODUCT_IMAGE_FAILED,\n    GET_PRODUCT_IMAGE_SUCCESS,\n    GET_PRODUCT_IMAGES,\n    GET_PRODUCT_IMAGES_FAILED,\n    GET_PRODUCT_IMAGES_SUCCESS,\n    REGISTER_PRODUCT_IMAGE,\n    REGISTER_PRODUCT_IMAGE_FAILED,\n    REGISTER_PRODUCT_IMAGE_SUCCESS, RESET_PRODUCT_IMAGES,\n    UPDATE_PRODUCT_IMAGE, UPDATE_PRODUCT_IMAGE_FAILED,\n    UPDATE_PRODUCT_IMAGE_SUCCESS\n} from \"./actionTypes\";\nimport {RESET_PRODUCT_SIZE} from \"../productSize/actionTypes\";\n\nconst initialState = {\n    error: \"\",\n    loading: false,\n    meta: {},\n    productImages: [],\n    productImage: {},\n    refresh: false\n}\n\nconst productImages = (state = initialState, action) => {\n    switch (action.type) {\n        case RESET_PRODUCT_IMAGES:\n            state = {\n                ...state,\n                loading: false,\n                refresh: false\n            }\n            break\n        case GET_PRODUCT_IMAGES:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PRODUCT_IMAGES_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: true,\n            }\n\n        case GET_PRODUCT_IMAGES_SUCCESS:\n            return {\n                ...state,\n                productImages: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n        case GET_PRODUCT_IMAGE:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PRODUCT_IMAGE_SUCCESS:\n            return {\n                ...state,\n                productImage: action.payload,\n                loading: false,\n            }\n        case GET_PRODUCT_IMAGE_FAILED:\n            return {\n                ...state,\n                loading: false,\n            }\n        case REGISTER_PRODUCT_IMAGE:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case REGISTER_PRODUCT_IMAGE_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case REGISTER_PRODUCT_IMAGE_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_PRODUCT_IMAGE:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case UPDATE_PRODUCT_IMAGE_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n                refresh: true\n            }\n            break\n        case UPDATE_PRODUCT_IMAGE_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        default:\n            state = { ...state }\n            break\n    }\n    return state\n}\n\nexport default productImages\n","/Users/ramon/Repositories/lucy-moie/src/store/sizes/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/reducer.js",["1523"],"import {\n    GET_PRODUCT,\n    GET_PRODUCT_FAILED,\n    GET_PRODUCT_SUCCESS,\n    GET_PRODUCTS, GET_PRODUCTS_FAILED, GET_PRODUCTS_SUCCESS, QUERY_PRODUCTS, QUERY_PRODUCTS_FAILED, QUERY_PRODUCTS_SUCCESS,\n    REGISTER_PRODUCT,\n    REGISTER_PRODUCT_FAILED,\n    REGISTER_PRODUCT_SUCCESS, RESET_PRODUCT,\n    UPDATE_PRODUCT, UPDATE_PRODUCT_FAILED,\n    UPDATE_PRODUCT_SUCCESS\n} from \"./actionTypes\";\nimport {RESET_CUSTOMERS} from \"../customer/actionTypes\";\n\nconst initialState = {\n    error: \"\",\n    loading: false,\n    meta: {},\n    products: [],\n    product: {},\n    custom: {\n        loading: false,\n        meta: {},\n        data: {}\n    },\n    refresh: false\n}\n\nconst product = (state = initialState, action) => {\n    switch (action.type) {\n        case RESET_PRODUCT:\n            return {\n                ...initialState\n            }\n        case GET_PRODUCTS:\n            return {\n                ...state,\n                loading: true,\n            }\n        case GET_PRODUCTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false,\n            }\n        case GET_PRODUCTS_SUCCESS:\n            return {\n                ...state,\n                products: action.payload,\n                meta: action.meta,\n                loading: false,\n            }\n        case QUERY_PRODUCTS:\n            return {\n                ...state,\n                custom: {\n                    ...state.custom,\n                    loading: true\n                }\n            }\n        case QUERY_PRODUCTS_FAILED:\n            return {\n                ...state,\n                custom: {\n                    ...state.custom,\n                    error: action.payload,\n                    loading: false,\n                }\n            }\n        case QUERY_PRODUCTS_SUCCESS:\n            const data = {...state.custom.data};\n            data[action.node] = action.payload;\n\n            return {\n                ...state,\n                custom: {\n                    ...state.custom,\n                    data: data,\n                    meta: action.meta,\n                    loading: false\n                }\n            }\n        case GET_PRODUCT:\n            return {\n                ...state,\n                refresh: false,\n                loading: true,\n            }\n        case GET_PRODUCT_SUCCESS:\n            return {\n                ...state,\n                product: action.payload,\n                loading: false,\n            }\n        case GET_PRODUCT_FAILED:\n            return {\n                ...state,\n                loading: false,\n            }\n        case REGISTER_PRODUCT:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case REGISTER_PRODUCT_SUCCESS:\n            state = {\n                ...state,\n                loading: false,\n                product: action.payload\n            }\n            break\n        case REGISTER_PRODUCT_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        case UPDATE_PRODUCT:\n            state = {\n                ...state,\n                loading: true,\n            }\n            break\n        case UPDATE_PRODUCT_SUCCESS:\n            state = {\n                ...state,\n                refresh: true,\n                loading: false,\n            }\n            break\n        case UPDATE_PRODUCT_FAILED:\n            state = {\n                ...state,\n                loading: false,\n            }\n            break\n        default:\n            state = {...state}\n            break\n    }\n    return state\n}\n\nexport default product\n","/Users/ramon/Repositories/lucy-moie/src/store/location/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/reducer.js",["1524"],"import {CHANGE_PROFILE_PICTURE, CHANGE_PROFILE_PICTURE_FAILED, CHANGE_PROFILE_PICTURE_SUCCESS, EDIT_PROFILE, PROFILE_ERROR, PROFILE_SUCCESS, RESET_CHANGE_PROFILE_PICTURE, RESET_PROFILE_FLAG} from \"./actionTypes\"\n\nconst initialState = {\n  error: \"\",\n  success: \"\",\n  profileImage: {\n    error: null,\n    success: null,\n    loading: null,\n    data: null,\n  }\n}\n\nconst profile = (state = initialState, action) => {\n  switch (action.type) {\n    case EDIT_PROFILE:\n      state = {...state}\n      break\n    case PROFILE_SUCCESS:\n      state = {...state, success: action.payload}\n      break\n    case PROFILE_ERROR:\n      state = {...state, error: action.payload}\n      break\n    case RESET_PROFILE_FLAG :\n      state = {...state, success: null}\n      break\n    case RESET_PROFILE_FLAG :\n      state = {...state, success: null}\n      break\n    case RESET_CHANGE_PROFILE_PICTURE:\n      state = {\n        ...state,\n        profileImage: {\n          ...state.profileImage,\n          error: null,\n          success: null,\n          loading: false,\n        }\n      }\n      break\n    case CHANGE_PROFILE_PICTURE:\n      state = {\n        ...state,\n        profileImage: {\n          ...state.profileImage,\n          error: null,\n          success: null,\n          loading: true,\n        }\n      }\n      break\n    case CHANGE_PROFILE_PICTURE_SUCCESS:\n      state = {\n        ...state,\n        profileImage: {\n          ...state.profileImage,\n          error: null,\n          success: true,\n          loading: false,\n          data: action.data,\n        }\n      }\n      break\n    case CHANGE_PROFILE_PICTURE_FAILED:\n      state = {\n        ...state,\n        profileImage: {\n          ...state.profileImage,\n          error: action.error,\n          success: false,\n          loading: false,\n        }\n      }\n      break\n    default:\n      state = {...state}\n      break\n  }\n  return state\n}\n\nexport default profile\n","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerFilter/index.js",["1525","1526","1527"],"import React, {useState} from \"react\";\nimport {Button, Card, CardBody, Col, Label, Row} from \"reactstrap\";\nimport {FieldEmail, FieldText, FieldSelect,FieldDate} from \"../../../components/Fields\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {DATE_MODES} from \"../../../components/Fields/InputDate\";\nimport PropTypes from \"prop-types\";\nimport Conditionals from \"../../../common/conditionals\";\nimport moment from 'moment';\nimport {Button as ButtonMaterial} from \"@material-ui/core\";\nimport ButtonSubmit from \"../../../components/Common/ButtonSubmit\";\n\nexport const CustomerFilter = (props) => {\n\n    const form = React.createRef();\n    const [filters, setFilters] = useState({isMayorist: null, _status: null, createdAt:null})\n\n    if(!props.isActive){\n        return false;\n    }\n    const yesNoOptions = [\n        {label: '-', value: null},\n        {label: 'Si', value: true},\n        {label: 'No', value: false}];\n\n    const ActiveInactive = [\n        {label: '-', value: null},\n        {label: 'Activo', value: true},\n        {label: 'Inactivo', value: false}];\n    /* retorna  - Conditionals.all - Array */\n    const handleValidSubmit = (event,values) => {\n        if (props.onSubmit) {\n            setFilters(values);\n            const conditions = new Conditionals.Condition;\n            const {name, email, _status, isMayorist, createdAt} = values;\n\n            if (name) {\n                conditions.add('name', name, Conditionals.OPERATORS.LIKE);\n            }\n            if (email) {\n                conditions.add('email', email, Conditionals.OPERATORS.EQUAL);\n            }\n            if (yesNoOptions.filter(o => o.value !== null).map(o => o.value).includes(isMayorist.value)) {\n                    conditions.add('isMayorist', null, isMayorist.value ? Conditionals.OPERATORS.TRUE : Conditionals.OPERATORS.FALSE);\n            }\n            if (createdAt) {\n                if(moment(createdAt[0]).isSame(moment(createdAt[1]))){\n                    conditions.add('createdAt',\n                        moment(createdAt[0]).format(\"YYYY-MM-DD[T]HH:mm:ss\"),\n                        Conditionals.OPERATORS.LESS_THAN_OR_EQUAL\n                    );\n                }\n                else {\n                    conditions.add('createdAt',\n                        moment(createdAt[0]).format(\"YYYY-MM-DD[T]HH:mm:ss\"),\n                        Conditionals.OPERATORS.BETWEEN,\n                        [moment(createdAt[1]).format(\"YYYY-MM-DD[T]HH:mm:ss\")]\n                    );\n                }\n            }\n\n            if (ActiveInactive.filter(o => o.value !== null).map(o => o.value).includes(_status.value)){\n                conditions.add('status', null,\n                    _status.value ?\n                    Conditionals.OPERATORS.TRUE :\n                    Conditionals.OPERATORS.FALSE);\n            }\n            props.onSubmit(conditions.all());\n        }\n    }\n    const cleanFilters = () => {\n        setFilters({isMayorist: null, _status: null, createdAt:null});\n        const conditions = new Conditionals.Condition;\n        props.onSubmit(conditions.all());\n        form && form.current && form.current.reset();\n    }\n    return (<div className=\"col-md-4\">\n                <Card>\n                    <CardBody>\n                        {props.onPressDisabled && (\n                            <div className={\"float-end\"}>\n                                <ButtonMaterial color=\"primary\" size=\"small\" onClick={props.onPressDisabled}>\n                                    <i className={\"mdi mdi-minus\"}></i>\n                                </ButtonMaterial>\n                            </div>\n                        )}\n                        <div className=\"mb-4\">\n                            <h5><i className={\"mdi mdi-filter-menu\"}></i> Filtros Avanzados &nbsp;</h5>\n                        </div>\n                        <AvForm className=\"needs-validation\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}\n                                ref={form}>\n                            <Row>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">Nombre</Label>\n                                        <FieldText\n                                            name={\"name\"}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">Email</Label>\n                                        <FieldEmail\n                                            name={\"email\"}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">¿Es Mayorista?</Label>\n                                        <FieldSelect\n                                            name={\"isMayorist\"}\n                                            options={yesNoOptions}\n                                            defaultValue={filters.isMayorist}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">Fecha de Creación</Label>\n                                        <FieldDate\n                                            name={\"createdAt\"}\n                                            mode={DATE_MODES.RANGE}\n                                            defaultValue={filters.createdAt}\n                                            onChange={(e)=> {\n                                                let newVar = {...filters, createdAt:e};\n                                                setFilters(newVar )\n                                            }}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"_status\">Estado</Label>\n                                        <FieldSelect\n                                            name={\"_status\"}\n                                            options={ActiveInactive}\n                                            defaultValue={filters._status}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md={\"12\"}>\n                                    <div className={\"float-end\"}>\n                                        <Button type=\"submit\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i> Buscar\n                                        </Button>\n                                    </div>\n                                    <div className={\"float-end ml-5\"}>\n                                        <Button type=\"button\"\n                                                onClick={cleanFilters.bind(this)}\n                                                color=\"default\"\n                                                className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            Limpiar\n                                        </Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </div>)\n}\n\nCustomerFilter.propTypes = {\n    isActive: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    onPressDisabled: PropTypes.func\n};\n","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customerColumn.js",["1528"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {ConverterCustomerStatus} from \"../customer_status\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {formatDate, STATUS_OPTIONS, YES_NO_OPTIONS} from \"../../../common/utils\";\n\nconst customerListColumns = (onDelete = false) => [\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        formatter: (cellContent, item) => (\n            <>\n                {!item.img ? (\n                    <div className=\"avatar-xs d-inline-block me-2\">\n                        <div className=\"avatar-title bg-soft-primary rounded-circle text-primary\">\n                            <i className=\"mdi mdi-account-circle m-0\"></i>\n                        </div>\n                    </div>\n                ) : (\n                    <img\n                        className=\"avatar-xs rounded-circle me-2\"\n                        src={item.img}\n                        alt={item.name}\n                    />\n                )}\n                <Link to={`/customer/detail/${item.id}`} className=\"text-body\">\n                    {item.name}\n                    {item.isMayorist === true && (\n                        <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                            <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                        </Tooltip>\n                    )}\n                </Link>\n            </>\n        ),\n    },\n    {\n        text: \"Email\",\n        dataField: \"email\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Télefonos\",\n        dataField: \"phone\",\n        sort: false,\n        formatter: (cellContent, item) => (\n            <>\n                <div>Cel.: {item.phone && item.phone.length > 3 ? item.phone : ''}</div>\n                <div>Res.: {item.cellphone && item.cellphone.length > 3 ? item.cellphone : ''}</div>\n            </>\n        ),\n    },\n    {\n        text: \"Fecha creación\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>\n                {formatDate(item.createdAt)}\n            </div>\n        ),\n    },\n    {\n        text: \"¿Es Mayorista?\",\n        dataField: \"isMayorist\",\n        sort: true,\n        hidden: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: YES_NO_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterCustomerStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <Link to={`/customer/${item.id}`} className=\"px-2 text-primary\"><i className=\"uil uil-pen font-size-18\"></i></Link>\n                </li>\n                {onDelete && (\n                    <li className=\"list-inline-item\">\n                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                        </button>\n                    </li>\n                )}\n            </ul>\n        ),\n    },\n]\n\nexport default customerListColumns\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/PrintBatchRequest.js",["1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Col, Row} from \"reactstrap\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CustomizedTimeline from \"../CustomerEdit/TimeLine\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {printPartOfPage, threeDots} from \"../../common/utils\";\nimport {deleteComment, getCommentsByEntity, registerComment} from \"../../store/comment/actions\";\nimport {findFieldOptionByGroup} from \"../../helpers/service\";\nimport order from \"../../store/order/reducer\";\nimport {doPrintBatchRequest, nextStatusOrder, printBatchRequest, resetBatchRequest} from \"../../store/order/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\n\nconst PrintBatchRequest = (props) => {\n\n    const {batch, conditionals, doRequest} = props;\n    const [openPrintConfirmModal, setOpenPrintConfirmModal] = useState(false);\n\n    useEffect(() => {\n        if (conditionals && doRequest) {\n            props.onPrintBatchRequest(conditionals);\n        }\n    }, [conditionals, doRequest]);\n\n    useEffect(() => {\n        if (batch && batch.body) {\n            let html = null;\n            batch.body.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printOrder(html)\n        }\n    }, [batch]);\n\n    const printOrder = (text) => {\n        printPartOfPage(text);\n        setTimeout(() => setOpenPrintConfirmModal(true), 3000);\n    }\n\n    const onConfirmPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        props.onNextStatusOrder(batch.id);\n    }\n\n    const onCancelPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        props.onResetBatchRequest();\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Confirmar impresión de la(s) orden(s)\"} showFooter={false} isOpen={openPrintConfirmModal} onClose={() => onCancelPrintOrder()}>\n                <Row>\n                    <Col md={12}>\n                        ¿Logró imprimir lo(s) pedidos(s)?\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => onCancelPrintOrder()}>NO</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onConfirmPrintOrder}>SI</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {batchRequest} = state.Order\n    const {batch, error, meta, conditionals, doRequest, loading} = batchRequest\n    return {batch, error, meta, conditionals, doRequest, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onPrintBatchRequest: (conditional) => dispatch(printBatchRequest(conditional)),\n    onNextStatusOrder: (id = []) => dispatch(nextStatusOrder({batch: id})),\n    onResetBatchRequest: (id = []) => dispatch(resetBatchRequest()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PrintBatchRequest)\n)\n\nPrintBatchRequest.propTypes = {\n    conditionals: PropTypes.array,\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/CatalogPrintBatchRequest.js",["1543","1544"],"import React, {useEffect, useState} from \"react\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {printPartOfPage} from \"../../common/utils\";\nimport {printCatalogBatchRequest, refreshCategory, resetCatalogBatchRequest} from \"../../store/category/actions\";\n\nconst CatalogPrintBatchRequest = (props) => {\n\n    const {batch, conditionals, doRequest, onPrintBatchRequest, onResetBatchRequest, onRefreshCategory} = props;\n\n    useEffect(() => {\n        if (conditionals && doRequest) {\n            onPrintBatchRequest(conditionals);\n        }\n    }, [conditionals, doRequest, onPrintBatchRequest]);\n\n\n    useEffect(() => {\n        if (batch && batch.body) {\n            let html = null;\n            batch.body.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printPartOfPage(html);\n            onResetBatchRequest();\n            onRefreshCategory();\n        }\n    }, [batch]);\n\n    return (\n        <React.Fragment>\n\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {batchRequest} = state.Category\n    const {batch, error, meta, conditionals, doRequest, loading} = batchRequest\n    return {batch, error, meta, conditionals, doRequest, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onPrintBatchRequest: (conditional) => dispatch(printCatalogBatchRequest(conditional)),\n    onResetBatchRequest: (id = []) => dispatch(resetCatalogBatchRequest()),\n    onRefreshCategory: () => dispatch(refreshCategory()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CatalogPrintBatchRequest)\n)\n\nCatalogPrintBatchRequest.propTypes = {\n    conditionals: PropTypes.array,\n}\n","/Users/ramon/Repositories/lucy-moie/src/i18n.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/languages.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigList.js",["1545"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getBillConfigs, registerBillConfig} from \"../../../store/billConfig/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport billConfigColumns from \"./billConfigColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {Link} from \"react-router-dom\";\n\nconst BillConfigList = props => {\n    const {billConfigs, onGetBillConfigs, refresh} = props; //onDeleteBillConfig,\n    const [billConfigList, setBillConfigList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n    }\n    useEffect(() => {\n        onGetBillConfigs();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetBillConfigs();\n        //getStates();\n    }, [onGetBillConfigs])\n\n    useEffect(() => {\n        setBillConfigList(billConfigs);\n    }, [billConfigs])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetBillConfigs(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetBillConfigs(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteBillConfig(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = billConfigColumns(onDelete);\n\n    return (\n        <>\n            <Row>\n\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={billConfigList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-billConfig me-2\"></i> Resoluciones </h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/billConfig\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nueva resolución\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nBillConfigList.propTypes = {\n    states: PropTypes.array,\n    onGetBillConfigs: PropTypes.func,\n    //onDeleteBillConfig: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, billConfigs, loading, meta, refresh} = state.BillConfig\n    return {states, billConfigs, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetBillConfigs: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getBillConfigs(conditional, limit, page)),\n    onCreateBillConfig: (ids) => dispatch(registerBillConfig(ids)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BillConfigList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigColumns.js",["1546"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {buildOptions} from \"../../../common/converters\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {DATE_FORMAT, formatDate, STATUS_OPTIONS} from \"../../../common/utils\";\nimport {ConverterCustomerStatus} from \"../../Customer/customer_status\";\n\n//const statusOptions = buildOptions(STATUS_OPTIONS);\n\n\nconst billConfigColumns = (onDelete = false) => [\n    {\n        text: \"#\",\n        dataField: \"id\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <Link to={`/billConfig/${item.id}`} className=\"text-body\">\n                    <b className=\"text-info\">{item.id}</b>\n                </Link>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Resolución\",\n        dataField: \"number\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Num. Inicial\",\n        dataField: \"startNumber\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Num. Final\",\n        dataField: \"finalNumber\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Prefijo\",\n        dataField: \"prefix\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Fecha de resolución\",\n        dataField: \"resolution_date\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>{formatDate(item.createdAt, DATE_FORMAT.ONLY_DATE)}</div>\n        ),\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterCustomerStatus(item.status)}\n            </StatusField>\n        ),\n    },\n]\n\nexport default billConfigColumns;\n","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actions.js",["1547"],"import {\n    BILL_CONFIG_LIST_REFRESH,\n    DELETE_BILL_CONFIG,\n    DELETE_BILL_CONFIG_FAILED,\n    DELETE_BILL_CONFIG_SUCCESS,\n    GET_BILL_CONFIG,\n    GET_BILL_CONFIG_FAILED,\n    GET_BILL_CONFIG_SUCCESS,\n    GET_BILL_CONFIGS,\n    GET_BILL_CONFIGS_FAILED,\n    GET_BILL_CONFIGS_SUCCESS,\n    QUERY_BILL_CONFIGS,\n    QUERY_BILL_CONFIGS_FAILED,\n    QUERY_BILL_CONFIGS_SUCCESS,\n    REGISTER_BILL_CONFIG,\n    REGISTER_BILL_CONFIG_FAILED,\n    REGISTER_BILL_CONFIG_SUCCESS,\n    RESET_BILL_CONFIG,\n    UPDATE_BILL_CONFIG,\n    UPDATE_BILL_CONFIG_FAILED,\n    UPDATE_BILL_CONFIG_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetBillConfig = () => ({\n    type: RESET_BILL_CONFIG,\n})\n\nexport const getBillConfigs = (conditional, limit, offset) => ({\n    type: GET_BILL_CONFIGS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getBillConfigsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getBillConfigs(conditions.all(), ids.length, offset);\n}\n\nexport const getBillConfigsSuccess = (data, meta) => ({\n    type: GET_BILL_CONFIGS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getBillConfigsFailed = error => ({\n    type: GET_BILL_CONFIGS_FAILED,\n    payload: error,\n})\n\nexport const getBillConfig = id => ({\n    type: GET_BILL_CONFIG,\n    id\n})\n\nexport const getBillConfigSuccess = data => ({\n    type: GET_BILL_CONFIG_SUCCESS,\n    payload: data,\n})\n\nexport const getBillConfigFailed = error => ({\n    type: GET_BILL_CONFIG_FAILED,\n    payload: error,\n})\n\nexport const registerBillConfig = (data, history) => {\n    return {\n        type: REGISTER_BILL_CONFIG,\n        payload: {data, history},\n    }\n}\n\nexport const registerBillConfigSuccess = data => {\n    return {\n        type: REGISTER_BILL_CONFIG_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const registerBillConfigFailed = data => {\n    return {\n        type: REGISTER_BILL_CONFIG_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateBillConfig = (id, data, history) => {\n    return {\n        type: UPDATE_BILL_CONFIG,\n        payload: {id, data, history},\n    }\n}\n\nexport const updateBillConfigSuccess = data => {\n    return {\n        type: UPDATE_BILL_CONFIG_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateBillConfigFail = error => {\n    return {\n        type: UPDATE_BILL_CONFIG_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteBillConfig = (id, history) => ({\n    type: DELETE_BILL_CONFIG,\n    payload: {id, history}\n})\n\nexport const deleteBillConfigSuccess = () => ({\n    type: DELETE_BILL_CONFIG_SUCCESS\n})\n\nexport const deleteBillConfigFailed = error => ({\n    type: DELETE_BILL_CONFIG_FAILED,\n    payload: error,\n})\n\nexport const countBillConfigByStatus = () => {\n    const params = {operation: 'id::count', group: \"status\"};\n    return queryBillConfigs(params, 'statusGroup');\n}\n\nexport const queryBillConfigs = (params, node) => ({\n    type: QUERY_BILL_CONFIGS,\n    params: params,\n    node: node,\n})\nexport const queryBillConfigsFailed = error => ({\n    type: QUERY_BILL_CONFIGS_FAILED,\n    payload: error,\n})\nexport const queryBillConfigsSuccess = (data, meta, node) => ({\n    type: QUERY_BILL_CONFIGS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const refreshList = () => {\n    return {type: BILL_CONFIG_LIST_REFRESH}\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/billConfig/saga.js",["1548","1549","1550"],"import {all, call, fork, put, takeEvery} from \"redux-saga/effects\"\n\n//Account Redux states\nimport {DELETE_BILL_CONFIG, GET_BILL_CONFIG, GET_BILL_CONFIGS, QUERY_BILL_CONFIGS, REGISTER_BILL_CONFIG, UPDATE_BILL_CONFIG} from \"./actionTypes\"\n\nimport {\n    deleteBillConfigFailed,\n    deleteBillConfigSuccess,\n    getBillConfigFailed,\n    getBillConfigsFailed,\n    getBillConfigsSuccess,\n    getBillConfigSuccess,\n    queryBillConfigsFailed,\n    queryBillConfigsSuccess,\n    refreshList,\n    registerBillConfigFailed,\n    registerBillConfigSuccess,\n    updateBillConfigFail,\n    updateBillConfigSuccess\n} from \"./actions\"\n\nimport {deleteBillConfigApi, fetchBillConfigApi, fetchBillConfigsApi, registerBillConfigApi, updateBillConfigApi} from \"../../helpers/backend_helper\"\n\nimport Conditionals from \"../../common/conditionals\";\nimport {showResponseMessage} from \"../../helpers/service\";\n\n/**\n * *  Configuración de CRUD Saga (Realizar configuración para cada uno de las replicas)\n*/\n\nconst ACTION_NAME_QUERY      =   QUERY_BILL_CONFIGS;\nconst ACTION_NAME_LIST      =    GET_BILL_CONFIGS;\nconst ACTION_NAME_GET       =    GET_BILL_CONFIG;\nconst ACTION_NAME_CREATE    =    REGISTER_BILL_CONFIG;\nconst ACTION_NAME_UPDATE    =    UPDATE_BILL_CONFIG;\nconst ACTION_NAME_DELETE    =    DELETE_BILL_CONFIG;\n\nconst LIST_API_REQUEST      =   fetchBillConfigsApi;\nconst GET_API_REQUEST       =   fetchBillConfigApi;\nconst POST_API_REQUEST      =   registerBillConfigApi;\nconst PUT_API_REQUEST = updateBillConfigApi;\n\n//actions\nconst QUERY_SUCCESS_ACTION = queryBillConfigsSuccess;\nconst QUERY_FAILED_ACTION = queryBillConfigsFailed;\nconst LIST_SUCCESS_ACTION = getBillConfigsSuccess;\nconst LIST_FAILED_ACTION = getBillConfigsFailed;\nconst GET_SUCCESS_ACTION = getBillConfigSuccess;\nconst GET_FAILED_ACTION = getBillConfigFailed;\nconst CREATE_SUCCESS_ACTION = registerBillConfigSuccess;\nconst CREATE_FAILED_ACTION = registerBillConfigFailed;\nconst UPDATE_SUCCESS_ACTION = updateBillConfigSuccess;\nconst UPDATE_FAILED_ACTION = updateBillConfigFail;\n\n\nconst LIST_URL = \"/billConfigs\";\nconst SHOW_URL = \"/billConfig\";\n\nfunction* get({id}) {\n    try {\n        const response = yield call(GET_API_REQUEST, {id});\n        yield put(GET_SUCCESS_ACTION(response))\n    } catch (error) {\n        yield put(GET_FAILED_ACTION(error))\n    }\n}\n\n\nfunction* fetch({conditional, limit, offset}) {\n    try {\n        const cond = Conditionals.getConditionalFormat(conditional);\n        const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n        const response = yield call(LIST_API_REQUEST, query)\n        yield put(LIST_SUCCESS_ACTION(response.data, response.meta));\n    } catch (error) {\n        yield put(LIST_FAILED_ACTION(error))\n    }\n}\nfunction* queryData({params ={}, node='bills'}) {\n    try {\n        const response = yield call(LIST_API_REQUEST, params)\n        yield put(QUERY_SUCCESS_ACTION(response.data, response.meta, node));\n    } catch (error) {\n        yield put(QUERY_FAILED_ACTION(error))\n    }\n}\n\nfunction* register({payload: {data, history}}) {\n    try {\n        console.log('factura', data)\n        const response = yield call(POST_API_REQUEST, data);\n        showResponseMessage(response, \"Resolución creada!\", response.error);\n        //yield put(CREATE_SUCCESS_ACTION(response));\n        //yield put(refreshList());\n        history.push(LIST_URL);\n    } catch (error) {\n        yield put(CREATE_FAILED_ACTION(error))\n        showResponseMessage({status: error.response.data.code}, \"\", error.response.data.error);\n    }\n}\n\nfunction* update({ payload: { id, data, history } }) {\n    try {\n        const response = yield call(PUT_API_REQUEST, id, data)\n        showResponseMessage(response, \"Conf. de Resolución han sido actualizada!\")\n        yield put(UPDATE_SUCCESS_ACTION(response))\n        //history.push(LIST_URL)\n    } catch (error) {\n        yield put(UPDATE_FAILED_ACTION(error))\n    }\n}\n\nfunction* billDelete({ payload: { id, history } }) {\n    try {\n        yield call(deleteBillConfigApi, id)\n        yield put(deleteBillConfigSuccess(id))\n        showResponseMessage({status:200}, \"Resolución borrada!\");\n        history.push(\"/bills\")\n\n    } catch (error) {\n        console.log(\"error\", error);\n        yield put(deleteBillConfigFailed(error))\n    }\n}\n\nexport function* watchBillConfig() {\n    yield takeEvery(ACTION_NAME_CREATE, register);\n    yield takeEvery(ACTION_NAME_UPDATE, update);\n    yield takeEvery(ACTION_NAME_LIST, fetch);\n    yield takeEvery(ACTION_NAME_GET, get);\n    yield takeEvery(ACTION_NAME_DELETE, billDelete);\n    yield takeEvery(ACTION_NAME_QUERY, queryData);\n}\n\nfunction* billSaga() {\n    yield all([fork(watchBillConfig)])\n}\n\nexport default billSaga\n","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/index.js",["1551"],"import React, {useEffect} from \"react\"\nimport {CardBody, Container} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getBillConfig} from \"../../store/billConfig/actions\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Card} from \"@material-ui/core\";\nimport BillConfigForm from \"./BillConfigForm\";\n\nconst BillConfigEdit = (props) => {\n    const {getBillConfig, billConfig} = props;\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getBillConfig) {\n            getBillConfig(props.match.params.id);\n        }\n    }, [getBillConfig]);\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/billConfigs\" title={billConfig.name} item={\"Resolución\"}/>\n                    <Card>\n                        <CardBody>\n                            <BillConfigForm billConfig={billConfig}/>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, billConfig, loading} = state.BillConfig\n    return {error, billConfig, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getBillConfig})(BillConfigEdit)\n)\n\nBillConfigEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/BillConfigForm.js",["1552","1553","1554"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getBillConfig, registerBillConfig, updateBillConfig} from \"../../store/billConfig/actions\";\nimport {getMunicipalities, getStates} from \"../../store/location/actions\";\nimport {FieldDate, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\n\nconst BillConfigForm = (props) => {\n    const {getBillConfig, billConfig, showAsModal = false, onCloseModal= false, onAcceptModal= false} = props;\n    const [billConfigData, setBillConfigData] = useState({_status: \"true\"});\n\n    //carga inicial\n    useEffect(() => {\n        if (props.match.params.id && getBillConfig) {\n            getBillConfig(props.match.params.id);\n        }\n    }, [getBillConfig]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (billConfig.id) {\n            setBillConfigData(billConfig);\n        }\n    }, [billConfig]);\n\n    const handleValidSubmit = (event, values) => {\n        console.log(\"VALUES\", values);\n        const data = filteredValues(values);\n\n        if (!billConfig.id) {\n            props.registerBillConfig(data, props.history)\n        } else {\n            props.updateBillConfig(billConfig.id, data, props.history)\n        }\n\n        if(showAsModal && onAcceptModal){\n            onAcceptModal(billConfig.id);\n        }\n    }\n\n    const filteredValues = (values) => {\n        const data = {...values};\n\n        data.status = values._status === \"true\" ? true : false;\n        delete data._status;\n        return data;\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row>\n                    <Col xl={12}>\n                        {!showAsModal && (\n                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                <div className={\"float-end\"}>\n                                    <Row>\n                                        <Col>\n                                            ¿Activo?\n                                        </Col>\n                                        <Col>\n                                            <FieldSwitch\n                                                id={\"_status\"}\n                                                defaultValue={billConfigData._status}\n                                                name={\"_status\"}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        )}\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"name\">Número Resolución<span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id={\"number\"}\n                                        name={\"number\"}\n                                        value={billConfigData.number}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"prefix\">Prefijo<span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='prefix'\n                                        name={\"prefix\"}\n                                        value={billConfigData.prefix}\n                                        required />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom02\">Numero Inicial <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='startNumber'\n                                        name={\"startNumber\"}\n                                        value={billConfigData.startNumber}\n                                        minLength={1}\n                                        maxLength={255}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"finalNumber\">Numero Final <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='finalNumber'\n                                        name={\"finalNumber\"}\n                                        value={billConfigData.finalNumber}\n                                        minLength={1}\n                                        maxLength={255}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"resolutionDate\">Fecha de Resolución</Label>\n                                    <FieldDate\n                                        name={\"resolutionDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                        defaultValue={billConfigData.createdAt}\n                                    />\n                                </div>\n                            </Col>\n\n                        </Row>\n\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {showAsModal && onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                <ButtonSubmit loading={props.loading}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.BillConfig\n    return {error,loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerBillConfig, updateBillConfig, getBillConfig})(BillConfigForm)\n)\n\nBillConfigForm.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/OfficeReportForm.js",["1555"],"import React, {useEffect} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {OFFICE_REPORT_TYPE_LIST, REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst OfficeReportForm = ({onCloseModal, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            type: values.type.value,\n            date: formatDateToServer(values.reportDate[0])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Tipo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"type\"}\n                                        name={\"type\"}\n                                        options={OFFICE_REPORT_TYPE_LIST}\n                                        defaultValue={OFFICE_REPORT_TYPE_LIST[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.OFFICE, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OfficeReportForm)\n)\n\nOfficeReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n",{"ruleId":"1556","replacedBy":"1557"},{"ruleId":"1558","replacedBy":"1559"},{"ruleId":"1560","severity":1,"message":"1561","line":6,"column":26,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":32},{"ruleId":"1560","severity":1,"message":"1564","line":11,"column":10,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1565","line":11,"column":15,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1566","line":11,"column":20,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1567","line":11,"column":30,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":44},{"ruleId":"1560","severity":1,"message":"1568","line":11,"column":46,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":58},{"ruleId":"1560","severity":1,"message":"1569","line":14,"column":8,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1570","line":23,"column":8,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1571","line":24,"column":8,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1572","line":25,"column":8,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1573","line":26,"column":8,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1574","line":27,"column":8,"nodeType":"1562","messageId":"1563","endLine":27,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1575","line":28,"column":8,"nodeType":"1562","messageId":"1563","endLine":28,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1576","line":36,"column":10,"nodeType":"1562","messageId":"1563","endLine":36,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1577","line":36,"column":21,"nodeType":"1562","messageId":"1563","endLine":36,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1578","line":13,"column":10,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1579","line":13,"column":14,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1580","line":14,"column":10,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1581","line":14,"column":15,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1582","line":15,"column":10,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1583","line":15,"column":17,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1584","line":16,"column":10,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1585","line":16,"column":21,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1586","line":17,"column":10,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1587","line":17,"column":19,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1588","line":18,"column":10,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1589","line":18,"column":21,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1590","line":19,"column":10,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1591","line":19,"column":16,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1592","line":20,"column":10,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1593","line":20,"column":17,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1594","line":21,"column":10,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1595","line":21,"column":17,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1596","line":22,"column":10,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1597","line":22,"column":16,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1598","line":23,"column":10,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1599","line":23,"column":15,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1600","line":25,"column":10,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1601","line":25,"column":19,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1564","line":5,"column":31,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":34},{"ruleId":"1560","severity":1,"message":"1565","line":5,"column":36,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":39},{"ruleId":"1560","severity":1,"message":"1569","line":13,"column":8,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1570","line":22,"column":8,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1571","line":23,"column":8,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1572","line":24,"column":8,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1573","line":25,"column":8,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1574","line":26,"column":8,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1575","line":27,"column":8,"nodeType":"1562","messageId":"1563","endLine":27,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1576","line":42,"column":10,"nodeType":"1562","messageId":"1563","endLine":42,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1577","line":42,"column":21,"nodeType":"1562","messageId":"1563","endLine":42,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1602","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":18},{"ruleId":"1603","severity":1,"message":"1604","line":24,"column":8,"nodeType":"1605","endLine":24,"endColumn":20,"suggestions":"1606"},{"ruleId":"1560","severity":1,"message":"1607","line":24,"column":9,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1608","line":24,"column":19,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1609","line":54,"column":9,"nodeType":"1562","messageId":"1563","endLine":54,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1610","line":62,"column":9,"nodeType":"1562","messageId":"1563","endLine":62,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1611","line":5,"column":9,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":23},{"ruleId":"1603","severity":1,"message":"1604","line":23,"column":8,"nodeType":"1605","endLine":23,"endColumn":29,"suggestions":"1612"},{"ruleId":"1560","severity":1,"message":"1613","line":19,"column":42,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":49},{"ruleId":"1560","severity":1,"message":"1614","line":3,"column":8,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1615","line":26,"column":12,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1616","line":26,"column":26,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":41},{"ruleId":"1603","severity":1,"message":"1604","line":34,"column":8,"nodeType":"1605","endLine":34,"endColumn":23,"suggestions":"1617"},{"ruleId":"1603","severity":1,"message":"1604","line":22,"column":8,"nodeType":"1605","endLine":22,"endColumn":28,"suggestions":"1618"},{"ruleId":"1603","severity":1,"message":"1619","line":21,"column":8,"nodeType":"1605","endLine":21,"endColumn":21,"suggestions":"1620"},{"ruleId":"1560","severity":1,"message":"1621","line":2,"column":54,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":61},{"ruleId":"1560","severity":1,"message":"1622","line":7,"column":21,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":32},{"ruleId":"1560","severity":1,"message":"1623","line":13,"column":9,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1624","line":16,"column":9,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1625","line":23,"column":8,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1626","line":25,"column":9,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1627","line":57,"column":12,"nodeType":"1562","messageId":"1563","endLine":57,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1628","line":57,"column":29,"nodeType":"1562","messageId":"1563","endLine":57,"endColumn":47},{"ruleId":"1560","severity":1,"message":"1629","line":58,"column":12,"nodeType":"1562","messageId":"1563","endLine":58,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1630","line":58,"column":25,"nodeType":"1562","messageId":"1563","endLine":58,"endColumn":39},{"ruleId":"1560","severity":1,"message":"1631","line":62,"column":12,"nodeType":"1562","messageId":"1563","endLine":62,"endColumn":24},{"ruleId":"1603","severity":1,"message":"1632","line":75,"column":8,"nodeType":"1605","endLine":75,"endColumn":22,"suggestions":"1633"},{"ruleId":"1603","severity":1,"message":"1634","line":83,"column":8,"nodeType":"1605","endLine":83,"endColumn":24,"suggestions":"1635"},{"ruleId":"1603","severity":1,"message":"1636","line":104,"column":8,"nodeType":"1605","endLine":104,"endColumn":17,"suggestions":"1637"},{"ruleId":"1603","severity":1,"message":"1638","line":125,"column":8,"nodeType":"1605","endLine":125,"endColumn":15,"suggestions":"1639"},{"ruleId":"1603","severity":1,"message":"1640","line":146,"column":8,"nodeType":"1605","endLine":146,"endColumn":29,"suggestions":"1641"},{"ruleId":"1560","severity":1,"message":"1642","line":57,"column":7,"nodeType":"1562","messageId":"1563","endLine":57,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1643","line":14,"column":65,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":76},{"ruleId":"1560","severity":1,"message":"1644","line":25,"column":9,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1642","line":72,"column":7,"nodeType":"1562","messageId":"1563","endLine":72,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1642","line":72,"column":7,"nodeType":"1562","messageId":"1563","endLine":72,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1645","line":73,"column":7,"nodeType":"1562","messageId":"1563","endLine":73,"endColumn":15},{"ruleId":"1646","severity":1,"message":"1647","line":100,"column":9,"nodeType":"1648","messageId":"1649","endLine":105,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1621","line":2,"column":47,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":54},{"ruleId":"1560","severity":1,"message":"1650","line":3,"column":17,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1623","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1651","line":5,"column":21,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":25},{"ruleId":"1603","severity":1,"message":"1652","line":29,"column":8,"nodeType":"1605","endLine":29,"endColumn":25,"suggestions":"1653"},{"ruleId":"1603","severity":1,"message":"1636","line":39,"column":8,"nodeType":"1605","endLine":39,"endColumn":22,"suggestions":"1654"},{"ruleId":"1603","severity":1,"message":"1619","line":25,"column":8,"nodeType":"1605","endLine":25,"endColumn":21,"suggestions":"1655"},{"ruleId":"1603","severity":1,"message":"1636","line":32,"column":8,"nodeType":"1605","endLine":32,"endColumn":18,"suggestions":"1656"},{"ruleId":"1560","severity":1,"message":"1621","line":2,"column":47,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":54},{"ruleId":"1560","severity":1,"message":"1650","line":3,"column":17,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1623","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1651","line":5,"column":21,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":25},{"ruleId":"1603","severity":1,"message":"1619","line":25,"column":8,"nodeType":"1605","endLine":25,"endColumn":17,"suggestions":"1657"},{"ruleId":"1603","severity":1,"message":"1636","line":31,"column":8,"nodeType":"1605","endLine":31,"endColumn":14,"suggestions":"1658"},{"ruleId":"1560","severity":1,"message":"1621","line":2,"column":47,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":54},{"ruleId":"1560","severity":1,"message":"1650","line":3,"column":17,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1623","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1651","line":5,"column":21,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":25},{"ruleId":"1603","severity":1,"message":"1619","line":25,"column":8,"nodeType":"1605","endLine":25,"endColumn":18,"suggestions":"1659"},{"ruleId":"1603","severity":1,"message":"1636","line":32,"column":8,"nodeType":"1605","endLine":32,"endColumn":16,"suggestions":"1660"},{"ruleId":"1603","severity":1,"message":"1661","line":30,"column":8,"nodeType":"1605","endLine":30,"endColumn":23,"suggestions":"1662"},{"ruleId":"1603","severity":1,"message":"1663","line":38,"column":8,"nodeType":"1605","endLine":38,"endColumn":18,"suggestions":"1664"},{"ruleId":"1603","severity":1,"message":"1665","line":50,"column":8,"nodeType":"1605","endLine":50,"endColumn":19,"suggestions":"1666"},{"ruleId":"1603","severity":1,"message":"1636","line":71,"column":8,"nodeType":"1605","endLine":71,"endColumn":16,"suggestions":"1667"},{"ruleId":"1603","severity":1,"message":"1668","line":78,"column":8,"nodeType":"1605","endLine":78,"endColumn":30,"suggestions":"1669"},{"ruleId":"1603","severity":1,"message":"1670","line":89,"column":8,"nodeType":"1605","endLine":89,"endColumn":16,"suggestions":"1671"},{"ruleId":"1672","severity":1,"message":"1673","line":127,"column":28,"nodeType":"1674","messageId":"1675","endLine":127,"endColumn":54,"fix":"1676"},{"ruleId":"1672","severity":1,"message":"1673","line":162,"column":28,"nodeType":"1674","messageId":"1675","endLine":162,"endColumn":54,"fix":"1677"},{"ruleId":"1560","severity":1,"message":"1678","line":17,"column":41,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":55},{"ruleId":"1603","severity":1,"message":"1679","line":29,"column":8,"nodeType":"1605","endLine":29,"endColumn":23,"suggestions":"1680"},{"ruleId":"1603","severity":1,"message":"1619","line":26,"column":8,"nodeType":"1605","endLine":26,"endColumn":22,"suggestions":"1681"},{"ruleId":"1603","severity":1,"message":"1636","line":32,"column":8,"nodeType":"1605","endLine":32,"endColumn":17,"suggestions":"1682"},{"ruleId":"1560","severity":1,"message":"1613","line":9,"column":12,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1683","line":11,"column":12,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":20},{"ruleId":"1672","severity":1,"message":"1673","line":50,"column":24,"nodeType":"1674","messageId":"1675","endLine":50,"endColumn":50,"fix":"1684"},{"ruleId":"1560","severity":1,"message":"1685","line":2,"column":8,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":13},{"ruleId":"1686","severity":1,"message":"1687","line":74,"column":9,"nodeType":"1688","messageId":"1689","endLine":74,"endColumn":76},{"ruleId":"1560","severity":1,"message":"1690","line":3,"column":32,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":51},{"ruleId":"1560","severity":1,"message":"1691","line":5,"column":9,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1692","line":17,"column":12,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":16},{"ruleId":"1603","severity":1,"message":"1693","line":25,"column":8,"nodeType":"1605","endLine":25,"endColumn":18,"suggestions":"1694"},{"ruleId":"1603","severity":1,"message":"1695","line":33,"column":8,"nodeType":"1605","endLine":33,"endColumn":22,"suggestions":"1696"},{"ruleId":"1672","severity":1,"message":"1673","line":9,"column":24,"nodeType":"1674","messageId":"1675","endLine":9,"endColumn":50,"fix":"1697"},{"ruleId":"1672","severity":1,"message":"1673","line":40,"column":24,"nodeType":"1674","messageId":"1675","endLine":40,"endColumn":50,"fix":"1698"},{"ruleId":"1672","severity":1,"message":"1673","line":79,"column":24,"nodeType":"1674","messageId":"1675","endLine":79,"endColumn":50,"fix":"1699"},{"ruleId":"1672","severity":1,"message":"1673","line":92,"column":24,"nodeType":"1674","messageId":"1675","endLine":92,"endColumn":50,"fix":"1700"},{"ruleId":"1672","severity":1,"message":"1673","line":98,"column":24,"nodeType":"1674","messageId":"1675","endLine":98,"endColumn":50,"fix":"1701"},{"ruleId":"1672","severity":1,"message":"1673","line":117,"column":24,"nodeType":"1674","messageId":"1675","endLine":117,"endColumn":50,"fix":"1702"},{"ruleId":"1672","severity":1,"message":"1673","line":128,"column":24,"nodeType":"1674","messageId":"1675","endLine":128,"endColumn":50,"fix":"1703"},{"ruleId":"1603","severity":1,"message":"1704","line":45,"column":8,"nodeType":"1605","endLine":45,"endColumn":17,"suggestions":"1705"},{"ruleId":"1603","severity":1,"message":"1706","line":52,"column":8,"nodeType":"1605","endLine":52,"endColumn":26,"suggestions":"1707"},{"ruleId":"1603","severity":1,"message":"1708","line":58,"column":8,"nodeType":"1605","endLine":58,"endColumn":22,"suggestions":"1709"},{"ruleId":"1603","severity":1,"message":"1710","line":65,"column":8,"nodeType":"1605","endLine":65,"endColumn":21,"suggestions":"1711"},{"ruleId":"1560","severity":1,"message":"1712","line":113,"column":11,"nodeType":"1562","messageId":"1563","endLine":113,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1713","line":2,"column":8,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1714","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1621","line":3,"column":36,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":43},{"ruleId":"1560","severity":1,"message":"1715","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1716","line":4,"column":22,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1717","line":4,"column":48,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":57},{"ruleId":"1560","severity":1,"message":"1718","line":8,"column":9,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1623","line":9,"column":9,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1719","line":15,"column":25,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":39},{"ruleId":"1603","severity":1,"message":"1720","line":21,"column":8,"nodeType":"1605","endLine":21,"endColumn":17,"suggestions":"1721"},{"ruleId":"1560","severity":1,"message":"1714","line":3,"column":15,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1621","line":3,"column":35,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":42},{"ruleId":"1560","severity":1,"message":"1623","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1722","line":21,"column":21,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":38},{"ruleId":"1560","severity":1,"message":"1723","line":21,"column":55,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":62},{"ruleId":"1560","severity":1,"message":"1724","line":22,"column":12,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1725","line":24,"column":12,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":30},{"ruleId":"1560","severity":1,"message":"1726","line":24,"column":32,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":53},{"ruleId":"1672","severity":1,"message":"1673","line":25,"column":24,"nodeType":"1674","messageId":"1675","endLine":25,"endColumn":50,"fix":"1727"},{"ruleId":"1672","severity":1,"message":"1673","line":31,"column":24,"nodeType":"1674","messageId":"1675","endLine":31,"endColumn":50,"fix":"1728"},{"ruleId":"1672","severity":1,"message":"1673","line":41,"column":24,"nodeType":"1674","messageId":"1675","endLine":41,"endColumn":50,"fix":"1729"},{"ruleId":"1560","severity":1,"message":"1730","line":15,"column":9,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":24},{"ruleId":"1672","severity":1,"message":"1673","line":31,"column":24,"nodeType":"1674","messageId":"1675","endLine":31,"endColumn":50,"fix":"1731"},{"ruleId":"1603","severity":1,"message":"1732","line":29,"column":8,"nodeType":"1605","endLine":29,"endColumn":38,"suggestions":"1733"},{"ruleId":"1560","severity":1,"message":"1621","line":2,"column":26,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1734","line":9,"column":9,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":34},{"ruleId":"1560","severity":1,"message":"1626","line":16,"column":9,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":27},{"ruleId":"1603","severity":1,"message":"1735","line":41,"column":8,"nodeType":"1605","endLine":41,"endColumn":21,"suggestions":"1736"},{"ruleId":"1603","severity":1,"message":"1737","line":51,"column":8,"nodeType":"1605","endLine":51,"endColumn":18,"suggestions":"1738"},{"ruleId":"1603","severity":1,"message":"1739","line":58,"column":8,"nodeType":"1605","endLine":58,"endColumn":38,"suggestions":"1740"},{"ruleId":"1603","severity":1,"message":"1741","line":75,"column":8,"nodeType":"1605","endLine":75,"endColumn":22,"suggestions":"1742"},{"ruleId":"1603","severity":1,"message":"1743","line":83,"column":8,"nodeType":"1605","endLine":83,"endColumn":24,"suggestions":"1744"},{"ruleId":"1603","severity":1,"message":"1745","line":90,"column":8,"nodeType":"1605","endLine":90,"endColumn":25,"suggestions":"1746"},{"ruleId":"1603","severity":1,"message":"1747","line":97,"column":8,"nodeType":"1605","endLine":97,"endColumn":23,"suggestions":"1748"},{"ruleId":"1603","severity":1,"message":"1749","line":101,"column":8,"nodeType":"1605","endLine":101,"endColumn":78,"suggestions":"1750"},{"ruleId":"1603","severity":1,"message":"1751","line":105,"column":8,"nodeType":"1605","endLine":105,"endColumn":22,"suggestions":"1752"},{"ruleId":"1603","severity":1,"message":"1753","line":124,"column":8,"nodeType":"1605","endLine":124,"endColumn":29,"suggestions":"1754"},{"ruleId":"1560","severity":1,"message":"1755","line":7,"column":9,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":21},{"ruleId":"1672","severity":1,"message":"1673","line":52,"column":24,"nodeType":"1674","messageId":"1675","endLine":52,"endColumn":50,"fix":"1756"},{"ruleId":"1560","severity":1,"message":"1757","line":77,"column":196,"nodeType":"1562","messageId":"1563","endLine":77,"endColumn":204},{"ruleId":"1560","severity":1,"message":"1758","line":3,"column":8,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1759","line":13,"column":29,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":44},{"ruleId":"1560","severity":1,"message":"1760","line":20,"column":7,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":11},{"ruleId":"1560","severity":1,"message":"1613","line":34,"column":60,"nodeType":"1562","messageId":"1563","endLine":34,"endColumn":67},{"ruleId":"1603","severity":1,"message":"1761","line":48,"column":8,"nodeType":"1605","endLine":48,"endColumn":17,"suggestions":"1762"},{"ruleId":"1560","severity":1,"message":"1763","line":72,"column":11,"nodeType":"1562","messageId":"1563","endLine":72,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1764","line":83,"column":9,"nodeType":"1562","messageId":"1563","endLine":83,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1765","line":21,"column":12,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1766","line":21,"column":29,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1767","line":21,"column":35,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":44},{"ruleId":"1560","severity":1,"message":"1613","line":21,"column":60,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":67},{"ruleId":"1560","severity":1,"message":"1768","line":31,"column":12,"nodeType":"1562","messageId":"1563","endLine":31,"endColumn":21},{"ruleId":"1603","severity":1,"message":"1769","line":35,"column":8,"nodeType":"1605","endLine":35,"endColumn":17,"suggestions":"1770"},{"ruleId":"1560","severity":1,"message":"1764","line":69,"column":9,"nodeType":"1562","messageId":"1563","endLine":69,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1765","line":22,"column":12,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1766","line":22,"column":27,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1767","line":22,"column":33,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":42},{"ruleId":"1560","severity":1,"message":"1613","line":22,"column":56,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":63},{"ruleId":"1603","severity":1,"message":"1771","line":36,"column":8,"nodeType":"1605","endLine":36,"endColumn":17,"suggestions":"1772"},{"ruleId":"1672","severity":1,"message":"1673","line":71,"column":28,"nodeType":"1674","messageId":"1675","endLine":71,"endColumn":54,"fix":"1773"},{"ruleId":"1560","severity":1,"message":"1621","line":4,"column":35,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":42},{"ruleId":"1560","severity":1,"message":"1774","line":15,"column":9,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1775","line":20,"column":8,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1766","line":23,"column":23,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1613","line":23,"column":60,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":67},{"ruleId":"1560","severity":1,"message":"1768","line":33,"column":12,"nodeType":"1562","messageId":"1563","endLine":33,"endColumn":21},{"ruleId":"1603","severity":1,"message":"1776","line":37,"column":8,"nodeType":"1605","endLine":37,"endColumn":17,"suggestions":"1777"},{"ruleId":"1560","severity":1,"message":"1764","line":71,"column":9,"nodeType":"1562","messageId":"1563","endLine":71,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1613","line":22,"column":39,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":46},{"ruleId":"1603","severity":1,"message":"1778","line":39,"column":8,"nodeType":"1605","endLine":39,"endColumn":17,"suggestions":"1779"},{"ruleId":"1603","severity":1,"message":"1780","line":46,"column":8,"nodeType":"1605","endLine":46,"endColumn":21,"suggestions":"1781"},{"ruleId":"1560","severity":1,"message":"1782","line":7,"column":51,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":73},{"ruleId":"1560","severity":1,"message":"1783","line":7,"column":75,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":96},{"ruleId":"1560","severity":1,"message":"1784","line":8,"column":17,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1716","line":10,"column":22,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":33},{"ruleId":"1603","severity":1,"message":"1785","line":55,"column":8,"nodeType":"1605","endLine":55,"endColumn":22,"suggestions":"1786"},{"ruleId":"1560","severity":1,"message":"1613","line":20,"column":51,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":58},{"ruleId":"1560","severity":1,"message":"1787","line":24,"column":12,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1788","line":24,"column":26,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":41},{"ruleId":"1560","severity":1,"message":"1789","line":25,"column":12,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1790","line":25,"column":25,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":39},{"ruleId":"1560","severity":1,"message":"1791","line":26,"column":12,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1792","line":26,"column":29,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":47},{"ruleId":"1560","severity":1,"message":"1793","line":27,"column":12,"nodeType":"1562","messageId":"1563","endLine":27,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1794","line":27,"column":37,"nodeType":"1562","messageId":"1563","endLine":27,"endColumn":63},{"ruleId":"1560","severity":1,"message":"1768","line":34,"column":12,"nodeType":"1562","messageId":"1563","endLine":34,"endColumn":21},{"ruleId":"1603","severity":1,"message":"1795","line":38,"column":8,"nodeType":"1605","endLine":38,"endColumn":17,"suggestions":"1796"},{"ruleId":"1560","severity":1,"message":"1621","line":4,"column":35,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":42},{"ruleId":"1560","severity":1,"message":"1774","line":15,"column":9,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1797","line":19,"column":31,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":46},{"ruleId":"1560","severity":1,"message":"1765","line":22,"column":12,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1766","line":22,"column":36,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":40},{"ruleId":"1560","severity":1,"message":"1613","line":22,"column":96,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":103},{"ruleId":"1560","severity":1,"message":"1768","line":32,"column":12,"nodeType":"1562","messageId":"1563","endLine":32,"endColumn":21},{"ruleId":"1603","severity":1,"message":"1798","line":36,"column":8,"nodeType":"1605","endLine":36,"endColumn":17,"suggestions":"1799"},{"ruleId":"1603","severity":1,"message":"1800","line":41,"column":8,"nodeType":"1605","endLine":41,"endColumn":29,"suggestions":"1801"},{"ruleId":"1560","severity":1,"message":"1764","line":83,"column":9,"nodeType":"1562","messageId":"1563","endLine":83,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1613","line":20,"column":54,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":61},{"ruleId":"1560","severity":1,"message":"1768","line":31,"column":12,"nodeType":"1562","messageId":"1563","endLine":31,"endColumn":21},{"ruleId":"1603","severity":1,"message":"1802","line":35,"column":8,"nodeType":"1605","endLine":35,"endColumn":17,"suggestions":"1803"},{"ruleId":"1560","severity":1,"message":"1764","line":69,"column":9,"nodeType":"1562","messageId":"1563","endLine":69,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1804","line":19,"column":8,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1805","line":20,"column":8,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1806","line":21,"column":8,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":15},{"ruleId":"1603","severity":1,"message":"1807","line":43,"column":8,"nodeType":"1605","endLine":43,"endColumn":17,"suggestions":"1808"},{"ruleId":"1603","severity":1,"message":"1809","line":48,"column":8,"nodeType":"1605","endLine":48,"endColumn":25,"suggestions":"1810"},{"ruleId":"1560","severity":1,"message":"1811","line":20,"column":7,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1812","line":22,"column":7,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1813","line":50,"column":7,"nodeType":"1562","messageId":"1563","endLine":50,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1814","line":52,"column":7,"nodeType":"1562","messageId":"1563","endLine":52,"endColumn":15},{"ruleId":"1603","severity":1,"message":"1815","line":157,"column":8,"nodeType":"1605","endLine":157,"endColumn":17,"suggestions":"1816"},{"ruleId":"1560","severity":1,"message":"1817","line":15,"column":9,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1626","line":17,"column":9,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":27},{"ruleId":"1672","severity":1,"message":"1673","line":20,"column":24,"nodeType":"1674","messageId":"1675","endLine":20,"endColumn":50,"fix":"1818"},{"ruleId":"1603","severity":1,"message":"1819","line":27,"column":8,"nodeType":"1605","endLine":27,"endColumn":25,"suggestions":"1820"},{"ruleId":"1603","severity":1,"message":"1821","line":33,"column":8,"nodeType":"1605","endLine":33,"endColumn":17,"suggestions":"1822"},{"ruleId":"1603","severity":1,"message":"1823","line":33,"column":8,"nodeType":"1605","endLine":33,"endColumn":21,"suggestions":"1824"},{"ruleId":"1672","severity":1,"message":"1673","line":79,"column":32,"nodeType":"1674","messageId":"1675","endLine":79,"endColumn":58,"fix":"1825"},{"ruleId":"1603","severity":1,"message":"1826","line":83,"column":8,"nodeType":"1605","endLine":83,"endColumn":15,"suggestions":"1827"},{"ruleId":"1560","severity":1,"message":"1828","line":7,"column":9,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":22},{"ruleId":"1603","severity":1,"message":"1819","line":27,"column":8,"nodeType":"1605","endLine":27,"endColumn":25,"suggestions":"1829"},{"ruleId":"1603","severity":1,"message":"1821","line":33,"column":8,"nodeType":"1605","endLine":33,"endColumn":17,"suggestions":"1830"},{"ruleId":"1603","severity":1,"message":"1831","line":28,"column":8,"nodeType":"1605","endLine":28,"endColumn":25,"suggestions":"1832"},{"ruleId":"1603","severity":1,"message":"1821","line":44,"column":8,"nodeType":"1605","endLine":44,"endColumn":17,"suggestions":"1833"},{"ruleId":"1603","severity":1,"message":"1834","line":31,"column":8,"nodeType":"1605","endLine":31,"endColumn":14,"suggestions":"1835"},{"ruleId":"1603","severity":1,"message":"1836","line":37,"column":8,"nodeType":"1605","endLine":37,"endColumn":25,"suggestions":"1837"},{"ruleId":"1603","severity":1,"message":"1838","line":19,"column":8,"nodeType":"1605","endLine":19,"endColumn":20,"suggestions":"1839"},{"ruleId":"1560","severity":1,"message":"1828","line":7,"column":21,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":34},{"ruleId":"1560","severity":1,"message":"1840","line":1,"column":16,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1841","line":1,"column":27,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1758","line":3,"column":8,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1842","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1843","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1844","line":6,"column":9,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1845","line":6,"column":19,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1846","line":9,"column":8,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1847","line":10,"column":9,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1848","line":47,"column":39,"nodeType":"1562","messageId":"1563","endLine":47,"endColumn":47},{"ruleId":"1560","severity":1,"message":"1840","line":1,"column":16,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1841","line":1,"column":27,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1848","line":43,"column":43,"nodeType":"1562","messageId":"1563","endLine":43,"endColumn":51},{"ruleId":"1672","severity":1,"message":"1673","line":35,"column":32,"nodeType":"1674","messageId":"1675","endLine":35,"endColumn":58,"fix":"1849"},{"ruleId":"1672","severity":1,"message":"1673","line":132,"column":28,"nodeType":"1674","messageId":"1675","endLine":132,"endColumn":54,"fix":"1850"},{"ruleId":"1560","severity":1,"message":"1713","line":2,"column":8,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1851","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1714","line":3,"column":15,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1852","line":4,"column":8,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1806","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":15},{"ruleId":"1603","severity":1,"message":"1853","line":87,"column":8,"nodeType":"1605","endLine":87,"endColumn":21,"suggestions":"1854"},{"ruleId":"1560","severity":1,"message":"1713","line":2,"column":8,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1851","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1714","line":3,"column":15,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1852","line":4,"column":8,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1806","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":15},{"ruleId":"1603","severity":1,"message":"1853","line":81,"column":8,"nodeType":"1605","endLine":81,"endColumn":20,"suggestions":"1855"},{"ruleId":"1856","severity":1,"message":"1857","line":1,"column":1,"nodeType":"1858","endLine":6,"endColumn":3},{"ruleId":"1560","severity":1,"message":"1713","line":2,"column":8,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1828","line":7,"column":9,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":22},{"ruleId":"1603","severity":1,"message":"1821","line":29,"column":8,"nodeType":"1605","endLine":29,"endColumn":17,"suggestions":"1859"},{"ruleId":"1672","severity":1,"message":"1673","line":25,"column":32,"nodeType":"1674","messageId":"1675","endLine":25,"endColumn":58,"fix":"1860"},{"ruleId":"1603","severity":1,"message":"1861","line":30,"column":8,"nodeType":"1605","endLine":30,"endColumn":17,"suggestions":"1862"},{"ruleId":"1672","severity":1,"message":"1673","line":39,"column":36,"nodeType":"1674","messageId":"1675","endLine":39,"endColumn":62,"fix":"1863"},{"ruleId":"1603","severity":1,"message":"1864","line":47,"column":8,"nodeType":"1605","endLine":47,"endColumn":16,"suggestions":"1865"},{"ruleId":"1603","severity":1,"message":"1866","line":54,"column":8,"nodeType":"1605","endLine":54,"endColumn":15,"suggestions":"1867"},{"ruleId":"1603","severity":1,"message":"1868","line":67,"column":8,"nodeType":"1605","endLine":67,"endColumn":29,"suggestions":"1869"},{"ruleId":"1870","severity":1,"message":"1871","line":72,"column":49,"nodeType":"1872","messageId":"1873","endLine":72,"endColumn":51},{"ruleId":"1672","severity":1,"message":"1673","line":88,"column":32,"nodeType":"1674","messageId":"1675","endLine":88,"endColumn":58,"fix":"1874"},{"ruleId":"1875","severity":1,"message":"1876","line":281,"column":49,"nodeType":"1877","endLine":281,"endColumn":136},{"ruleId":"1875","severity":1,"message":"1876","line":323,"column":53,"nodeType":"1877","endLine":323,"endColumn":125},{"ruleId":"1560","severity":1,"message":"1878","line":34,"column":12,"nodeType":"1562","messageId":"1563","endLine":34,"endColumn":23},{"ruleId":"1603","severity":1,"message":"1879","line":51,"column":8,"nodeType":"1605","endLine":51,"endColumn":26,"suggestions":"1880"},{"ruleId":"1603","severity":1,"message":"1881","line":108,"column":8,"nodeType":"1605","endLine":108,"endColumn":15,"suggestions":"1882"},{"ruleId":"1560","severity":1,"message":"1883","line":224,"column":11,"nodeType":"1562","messageId":"1563","endLine":224,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1714","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1621","line":3,"column":29,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":36},{"ruleId":"1560","severity":1,"message":"1884","line":14,"column":31,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":48},{"ruleId":"1560","severity":1,"message":"1885","line":14,"column":50,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":62},{"ruleId":"1560","severity":1,"message":"1723","line":14,"column":64,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":71},{"ruleId":"1603","severity":1,"message":"1886","line":28,"column":8,"nodeType":"1605","endLine":28,"endColumn":17,"suggestions":"1887"},{"ruleId":"1603","severity":1,"message":"1888","line":32,"column":8,"nodeType":"1605","endLine":32,"endColumn":26,"suggestions":"1889"},{"ruleId":"1560","severity":1,"message":"1890","line":61,"column":11,"nodeType":"1562","messageId":"1563","endLine":61,"endColumn":28},{"ruleId":"1891","severity":1,"message":"1892","line":68,"column":35,"nodeType":"1893","messageId":"1894","endLine":68,"endColumn":37},{"ruleId":"1891","severity":1,"message":"1892","line":81,"column":47,"nodeType":"1893","messageId":"1894","endLine":81,"endColumn":49},{"ruleId":"1672","severity":1,"message":"1673","line":241,"column":28,"nodeType":"1674","messageId":"1675","endLine":241,"endColumn":54,"fix":"1895"},{"ruleId":"1560","severity":1,"message":"1685","line":1,"column":8,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":13},{"ruleId":"1686","severity":1,"message":"1687","line":12,"column":13,"nodeType":"1896","messageId":"1689","endLine":12,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1897","line":7,"column":9,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1898","line":17,"column":12,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1899","line":17,"column":37,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":42},{"ruleId":"1560","severity":1,"message":"1900","line":17,"column":52,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":61},{"ruleId":"1560","severity":1,"message":"1901","line":19,"column":12,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1902","line":19,"column":31,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":51},{"ruleId":"1672","severity":1,"message":"1673","line":23,"column":32,"nodeType":"1674","messageId":"1675","endLine":23,"endColumn":58,"fix":"1903"},{"ruleId":"1603","severity":1,"message":"1861","line":27,"column":8,"nodeType":"1605","endLine":27,"endColumn":20,"suggestions":"1904"},{"ruleId":"1560","severity":1,"message":"1905","line":97,"column":22,"nodeType":"1562","messageId":"1563","endLine":97,"endColumn":29},{"ruleId":"1603","severity":1,"message":"1906","line":18,"column":8,"nodeType":"1605","endLine":18,"endColumn":17,"suggestions":"1907"},{"ruleId":"1560","severity":1,"message":"1908","line":8,"column":8,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1909","line":9,"column":8,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1910","line":10,"column":8,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1911","line":11,"column":8,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1912","line":12,"column":8,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1766","line":18,"column":19,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1613","line":18,"column":37,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":44},{"ruleId":"1560","severity":1,"message":"1723","line":18,"column":46,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":53},{"ruleId":"1560","severity":1,"message":"1913","line":2,"column":44,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":49},{"ruleId":"1560","severity":1,"message":"1914","line":2,"column":51,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":56},{"ruleId":"1560","severity":1,"message":"1851","line":3,"column":15,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1714","line":3,"column":21,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1806","line":4,"column":8,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1852","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1852","line":22,"column":8,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":22},{"ruleId":"1603","severity":1,"message":"1915","line":43,"column":8,"nodeType":"1605","endLine":43,"endColumn":17,"suggestions":"1916"},{"ruleId":"1560","severity":1,"message":"1908","line":9,"column":8,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1917","line":14,"column":9,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1918","line":12,"column":9,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":24},{"ruleId":"1919","severity":1,"message":"1920","line":28,"column":5,"nodeType":"1648","messageId":"1873","endLine":30,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1921","line":10,"column":8,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":20},{"ruleId":"1672","severity":1,"message":"1673","line":33,"column":32,"nodeType":"1674","messageId":"1675","endLine":33,"endColumn":58,"fix":"1922"},{"ruleId":"1672","severity":1,"message":"1673","line":72,"column":28,"nodeType":"1674","messageId":"1675","endLine":72,"endColumn":54,"fix":"1923"},{"ruleId":"1560","severity":1,"message":"1623","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1924","line":2,"column":9,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1851","line":4,"column":17,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1925","line":4,"column":23,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":30},{"ruleId":"1560","severity":1,"message":"1926","line":8,"column":8,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1921","line":9,"column":8,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1927","line":10,"column":9,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":32},{"ruleId":"1560","severity":1,"message":"1928","line":11,"column":26,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1929","line":12,"column":9,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1930","line":12,"column":24,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":43},{"ruleId":"1560","severity":1,"message":"1931","line":12,"column":45,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":60},{"ruleId":"1560","severity":1,"message":"1932","line":13,"column":9,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1933","line":14,"column":8,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1934","line":15,"column":9,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":28},{"ruleId":"1603","severity":1,"message":"1935","line":27,"column":8,"nodeType":"1605","endLine":27,"endColumn":33,"suggestions":"1936"},{"ruleId":"1560","severity":1,"message":"1841","line":1,"column":27,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":35},{"ruleId":"1603","severity":1,"message":"1937","line":34,"column":8,"nodeType":"1605","endLine":34,"endColumn":15,"suggestions":"1938"},{"ruleId":"1603","severity":1,"message":"1939","line":30,"column":8,"nodeType":"1605","endLine":30,"endColumn":17,"suggestions":"1940"},{"ruleId":"1560","severity":1,"message":"1941","line":4,"column":9,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":21},{"ruleId":"1672","severity":1,"message":"1673","line":37,"column":24,"nodeType":"1674","messageId":"1675","endLine":37,"endColumn":50,"fix":"1942"},{"ruleId":"1560","severity":1,"message":"1943","line":15,"column":5,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1944","line":50,"column":7,"nodeType":"1562","messageId":"1563","endLine":50,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1645","line":57,"column":7,"nodeType":"1562","messageId":"1563","endLine":57,"endColumn":15},{"ruleId":"1603","severity":1,"message":"1619","line":21,"column":8,"nodeType":"1605","endLine":21,"endColumn":23,"suggestions":"1945"},{"ruleId":"1560","severity":1,"message":"1946","line":9,"column":9,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1947","line":9,"column":28,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":37},{"ruleId":"1603","severity":1,"message":"1604","line":23,"column":8,"nodeType":"1605","endLine":23,"endColumn":23,"suggestions":"1948"},{"ruleId":"1603","severity":1,"message":"1821","line":28,"column":8,"nodeType":"1605","endLine":28,"endColumn":17,"suggestions":"1949"},"no-native-reassign",["1950"],"no-negated-in-lhs",["1951"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Dropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'LanguageDropdown' is defined but never used.","'github' is defined but never used.","'bitbucket' is defined but never used.","'dribbble' is defined but never used.","'dropbox' is defined but never used.","'mail_chimp' is defined but never used.","'slack' is defined but never used.","'socialDrp' is assigned a value but never used.","'setsocialDrp' is assigned a value but never used.","'ui' is assigned a value but never used.","'setui' is assigned a value but never used.","'app' is assigned a value but never used.","'setapp' is assigned a value but never used.","'email' is assigned a value but never used.","'setemail' is assigned a value but never used.","'ecommerce' is assigned a value but never used.","'setecommerce' is assigned a value but never used.","'contact' is assigned a value but never used.","'setcontact' is assigned a value but never used.","'component' is assigned a value but never used.","'setcomponent' is assigned a value but never used.","'form' is assigned a value but never used.","'setform' is assigned a value but never used.","'table' is assigned a value but never used.","'settable' is assigned a value but never used.","'chart' is assigned a value but never used.","'setchart' is assigned a value but never used.","'icon' is assigned a value but never used.","'seticon' is assigned a value but never used.","'map' is assigned a value but never used.","'setmap' is assigned a value but never used.","'invoice' is assigned a value but never used.","'setinvoice' is assigned a value but never used.","'TopVendors' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["1952"],"'facebook' is defined but never used.","'google' is defined but never used.","'googleResponse' is assigned a value but never used.","'facebookResponse' is assigned a value but never used.","'CustomerFilter' is defined but never used.",["1953"],"'loading' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'productChart' is assigned a value but never used.","'setProductChart' is assigned a value but never used.",["1954"],["1955"],"React Hook useEffect has missing dependencies: 'isEdit' and 'props.match.params.id'. Either include them or remove the dependency array.",["1956"],"'Spinner' is defined but never used.","'getProducts' is defined but never used.","'Button' is defined but never used.","'parseJson' is defined but never used.","'FieldOption' is defined but never used.","'DEFAULT_PAGE_LIMIT' is defined but never used.","'materialDefault' is assigned a value but never used.","'setMaterialDefault' is assigned a value but never used.","'publication' is assigned a value but never used.","'setPublication' is assigned a value but never used.","'sizeSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isEdit', 'onGetCategories', 'onGetFieldOptions', 'onGetSizes', and 'props.match.params.id'. Either include them or remove the dependency array.",["1957"],"React Hook useEffect has missing dependencies: 'onGetProduct', 'onResetProductImages', 'onResetProductSize', and 'product.id'. Either include them or remove the dependency array.",["1958"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["1959"],"React Hook useEffect has a missing dependency: 'product.size'. Either include it or remove the dependency array.",["1960"],"React Hook useEffect has a missing dependency: 'onGetFieldOptions'. Either include it or remove the dependency array.",["1961"],"'LIST_URL' is assigned a value but never used.","'getComments' is defined but never used.","'showResponseMessage' is defined but never used.","'SHOW_URL' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'AvField' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getStates', 'isEdit', and 'props.match.params.id'. Either include them or remove the dependency array.",["1962"],["1963"],["1964"],["1965"],["1966"],["1967"],["1968"],["1969"],"React Hook useEffect has missing dependencies: 'isEdit', 'onGetMentions', and 'props.match.params.id'. Either include them or remove the dependency array.",["1970"],"React Hook useEffect has missing dependencies: 'isEdit' and 'setSourceValue'. Either include them or remove the dependency array.",["1971"],"React Hook useEffect has missing dependencies: 'isEdit', 'onGetDeliveryMethods', 'onGetFieldOptions', and 'props.match.params.id'. Either include them or remove the dependency array.",["1972"],["1973"],"React Hook useEffect has missing dependencies: 'printReportData', 'props', and 'reportBody'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1974"],"React Hook useEffect has missing dependencies: 'getOrdersByConditional' and 'isEdit'. Either include them or remove the dependency array.",["1975"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"1976","text":"1977"},{"range":"1978","text":"1977"},"'DELIVERY_TYPES' is defined but never used.","React Hook useEffect has a missing dependency: 'onResetOrder'. Either include it or remove the dependency array.",["1979"],["1980"],["1981"],"'mainUser' is assigned a value but never used.",{"range":"1982","text":"1977"},"'React' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'customerOrdersStats' is defined but never used.","'ORDER_STATUS' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'entity', 'entitySuggested', 'onGetCommentSuggested', and 'onGetObservations'. Either include them or remove the dependency array.",["1983"],"React Hook useEffect has a missing dependency: 'entity'. Either include it or remove the dependency array.",["1984"],{"range":"1985","text":"1977"},{"range":"1986","text":"1977"},{"range":"1987","text":"1977"},{"range":"1988","text":"1977"},{"range":"1989","text":"1977"},{"range":"1990","text":"1977"},{"range":"1991","text":"1977"},"React Hook useEffect has missing dependencies: 'currentPage', 'getConditionals', and 'onGetOrders'. Either include them or remove the dependency array.",["1992"],"React Hook useEffect has missing dependencies: 'conditional', 'onFilterAction', and 'showAsModal'. Either include them or remove the dependency array.",["1993"],"React Hook useEffect has a missing dependency: 'conciliationView'. Either include it or remove the dependency array.",["1994"],"React Hook useEffect has missing dependencies: 'customActions' and 'getConditionals'. Either include them or remove the dependency array.",["1995"],"'showConciliationView' is assigned a value but never used.","'imageNotFound' is defined but never used.","'CardBody' is defined but never used.","'FieldNumber' is defined but never used.","'FieldSelect' is defined but never used.","'FieldText' is defined but never used.","'STATUS' is defined but never used.","'setProductData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fillValues'. Either include it or remove the dependency array.",["1996"],"'onGetProductImage' is assigned a value but never used.","'refresh' is assigned a value but never used.","'productImageList' is assigned a value but never used.","'productImageGroups' is assigned a value but never used.","'setProductImageGroups' is assigned a value but never used.",{"range":"1997","text":"1977"},{"range":"1998","text":"1977"},{"range":"1999","text":"1977"},"'getFieldOptions' is defined but never used.",{"range":"2000","text":"1977"},"React Hook useEffect has missing dependencies: 'car', 'getProductListWithTotals', and 'onUpdateCar'. Either include them or remove the dependency array.",["2001"],"'arrayToOptionsByFieldName' is defined but never used.","React Hook useEffect has missing dependencies: 'car.customer', 'car.isEdit', 'initComponent', and 'onGetCustomer'. Either include them or remove the dependency array.",["2002"],"React Hook useEffect has missing dependencies: 'car', 'hasCustomerOpenOrders', and 'onUpdateCar'. Either include them or remove the dependency array.",["2003"],"React Hook useEffect has missing dependencies: 'deliveryMethods', 'onGetDeliveryLocalities', and 'onGetDeliveryMethods'. Either include them or remove the dependency array.",["2004"],"React Hook useEffect has missing dependencies: 'deliveryMethods' and 'onChangeDeliveryOptions'. Either include them or remove the dependency array.",["2005"],"React Hook useEffect has missing dependencies: 'getQuote' and 'onChangeDeliveryOptions'. Either include them or remove the dependency array.",["2006"],"React Hook useEffect has a missing dependency: 'deliveryType'. Either include it or remove the dependency array.",["2007"],"React Hook useEffect has missing dependencies: 'deliveryMethod' and 'onChangeDeliveryOptions'. Either include them or remove the dependency array.",["2008"],"React Hook useEffect has a missing dependency: 'onChangeDeliveryOptions'. Either include it or remove the dependency array.",["2009"],"React Hook useEffect has a missing dependency: 'getQuote'. Either include it or remove the dependency array.",["2010"],"React Hook useEffect has missing dependencies: 'car.isEdit' and 'initComponent'. Either include them or remove the dependency array.",["2011"],"'GET_CUSTOMER' is defined but never used.",{"range":"2012","text":"1977"},"'disabled' is assigned a value but never used.","'Select' is defined but never used.","'DELETE_TEMPLATE' is defined but never used.","'list' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetPayments'. Either include it or remove the dependency array.",["2013"],"'onDelete' is assigned a value but never used.","'selectRowProp' is assigned a value but never used.","'states' is assigned a value but never used.","'meta' is assigned a value but never used.","'getStates' is assigned a value but never used.","'SearchBar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetOffices'. Either include it or remove the dependency array.",["2014"],"React Hook useEffect has a missing dependency: 'onGetBills'. Either include it or remove the dependency array.",["2015"],{"range":"2016","text":"1977"},"'ConfirmationModal' is defined but never used.","'Template' is defined but never used.","React Hook useEffect has a missing dependency: 'onGetTemplates'. Either include it or remove the dependency array.",["2017"],"React Hook useEffect has missing dependencies: 'conditional', 'currentPage', and 'onGetOrders'. Either include them or remove the dependency array.",["2018"],"React Hook useEffect has missing dependencies: 'conditional' and 'customActions'. Either include them or remove the dependency array.",["2019"],"'getFieldOptionByGroups' is defined but never used.","'getProductFieldOption' is defined but never used.","'NAMES' is defined but never used.","React Hook useEffect has a missing dependency: 'groupSelected'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFieldOption' needs the current value of 'groupSelected'.",["2020"],"'userSelected' is assigned a value but never used.","'setUserSelected' is assigned a value but never used.","'newPassword' is assigned a value but never used.","'setNewPassword' is assigned a value but never used.","'confirmPassword' is assigned a value but never used.","'setConfirmPassword' is assigned a value but never used.","'openChangePasswordModal' is assigned a value but never used.","'setOpenChangePasswordModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetUsers'. Either include it or remove the dependency array.",["2021"],"'statesToOptions' is defined but never used.","React Hook useEffect has a missing dependency: 'onGetMunicipalities'. Either include it or remove the dependency array.",["2022"],"React Hook useEffect has a missing dependency: 'getStates'. Either include it or remove the dependency array.",["2023"],"React Hook useEffect has a missing dependency: 'onGetStates'. Either include it or remove the dependency array.",["2024"],"'StatsStatusCard' is defined but never used.","'StatsRegisteredCard' is defined but never used.","'CountUp' is defined but never used.","React Hook useEffect has missing dependencies: 'conditional', 'currentPage', 'onGetCatalogBatchRequest', and 'onGetCategories'. Either include them or remove the dependency array.",["2025"],"React Hook useEffect has a missing dependency: 'onGetCatalogBatchRequest'. Either include it or remove the dependency array.",["2026"],"'series2' is assigned a value but never used.","'options2' is assigned a value but never used.","'series3' is assigned a value but never used.","'options3' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetProducts'. Either include it or remove the dependency array.",["2027"],"'queryCustomers' is defined but never used.",{"range":"2028","text":"1977"},"React Hook useEffect has a missing dependency: 'onGetDeliveryMethods'. Either include it or remove the dependency array. If 'onGetDeliveryMethods' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2029"],"React Hook useEffect has missing dependencies: 'error' and 'onCloseModal'. Either include them or remove the dependency array. If 'onCloseModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2030"],"React Hook useEffect has missing dependencies: 'getStates' and 'props.match.params.id'. Either include them or remove the dependency array.",["2031"],{"range":"2032","text":"1977"},"React Hook useEffect has a missing dependency: 'getMunicipalities'. Either include it or remove the dependency array.",["2033"],"'isValidOption' is defined but never used.",["2034"],["2035"],"React Hook useEffect has a missing dependency: 'onGetDeliveryMethods'. Either include it or remove the dependency array.",["2036"],["2037"],"React Hook useEffect has missing dependencies: 'resetPasswordState' and 'toggleChangePasswordModal'. Either include them or remove the dependency array. If 'resetPasswordState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2038"],"React Hook useEffect has a missing dependency: 'onCloseChangePasswordModal'. Either include it or remove the dependency array.",["2039"],"React Hook useEffect has a missing dependency: 'getDataToday'. Either include it or remove the dependency array.",["2040"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'AvBaseInput' is defined but never used.","'messages' is defined but never used.","'FormText' is defined but never used.","'FormGroup' is defined but never used.","'InputAsyncSearchField' is defined but never used.","'FieldSelectBasic' is defined but never used.","'validate' is assigned a value but never used.",{"range":"2041","text":"1977"},{"range":"2042","text":"1977"},"'Card' is defined but never used.","'ReactApexChart' is defined but never used.","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["2043"],["2044"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["2045"],{"range":"2046","text":"1977"},"React Hook useEffect has a missing dependency: 'onGetOrders'. Either include it or remove the dependency array.",["2047"],{"range":"2048","text":"1977"},"React Hook useEffect has missing dependencies: 'findOrderBy', 'onGetOrders', and 'payment.id'. Either include them or remove the dependency array.",["2049"],"React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.",["2050"],"React Hook useEffect has missing dependencies: 'conciliationError', 'onCloseModal', and 'onConfirmConciliationRestart'. Either include them or remove the dependency array. If 'onCloseModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2051"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"range":"2052","text":"1977"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'orderResume' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetOrder'. Either include it or remove the dependency array.",["2053"],"React Hook useEffect has missing dependencies: 'car', 'onPrintOrder', 'onResumeOrder', and 'onUpdateCar'. Either include them or remove the dependency array.",["2054"],"'getDeliveryAddress' is assigned a value but never used.","'onGetProductSizes' is assigned a value but never used.","'productSizes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fillSelectValues' and 'parseList'. Either include them or remove the dependency array.",["2055"],"React Hook useEffect has a missing dependency: 'calculateTotals'. Either include it or remove the dependency array.",["2056"],"'parseDefaultValue' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"range":"2057","text":"1977"},"BreakStatement","'map' is defined but never used.","'onGetOrder' is assigned a value but never used.","'order' is assigned a value but never used.","'productId' is assigned a value but never used.","'openCustomerModal' is assigned a value but never used.","'setOpenCustomerModal' is assigned a value but never used.",{"range":"2058","text":"1977"},["2059"],"'product' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetProductsPending'. Either include it or remove the dependency array. If 'onGetProductsPending' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2060"],"'avatar4' is defined but never used.","'avatar5' is defined but never used.","'avatar6' is defined but never used.","'avatar7' is defined but never used.","'avatar8' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'onGetCustomers'. Either include it or remove the dependency array.",["2061"],"'RESET_PRODUCT_SIZE' is defined but never used.","'RESET_CUSTOMERS' is defined but never used.","no-duplicate-case","Duplicate case label.","'ButtonSubmit' is defined but never used.",{"range":"2062","text":"1977"},{"range":"2063","text":"1977"},"'AvForm' is defined but never used.","'Tooltip' is defined but never used.","'CustomizedTimeline' is defined but never used.","'ConfirmationModalAction' is defined but never used.","'threeDots' is defined but never used.","'deleteComment' is defined but never used.","'getCommentsByEntity' is defined but never used.","'registerComment' is defined but never used.","'findFieldOptionByGroup' is defined but never used.","'order' is defined but never used.","'doPrintBatchRequest' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2064"],"React Hook useEffect has missing dependencies: 'onRefreshCategory' and 'onResetBatchRequest'. Either include them or remove the dependency array.",["2065"],"React Hook useEffect has a missing dependency: 'onGetBillConfigs'. Either include it or remove the dependency array.",["2066"],"'buildOptions' is defined but never used.",{"range":"2067","text":"1977"},"'refreshList' is defined but never used.","'CREATE_SUCCESS_ACTION' is assigned a value but never used.",["2068"],"'getMunicipalities' is defined but never used.","'getStates' is defined but never used.",["2069"],["2070"],"no-global-assign","no-unsafe-negation",{"desc":"2071","fix":"2072"},{"desc":"2073","fix":"2074"},{"desc":"2075","fix":"2076"},{"desc":"2077","fix":"2078"},{"desc":"2079","fix":"2080"},{"desc":"2081","fix":"2082"},{"desc":"2083","fix":"2084"},{"desc":"2085","fix":"2086"},{"desc":"2087","fix":"2088"},{"desc":"2089","fix":"2090"},{"desc":"2091","fix":"2092"},{"desc":"2093","fix":"2094"},{"desc":"2095","fix":"2096"},{"desc":"2097","fix":"2098"},{"desc":"2099","fix":"2100"},{"desc":"2101","fix":"2102"},{"desc":"2103","fix":"2104"},{"desc":"2105","fix":"2106"},{"desc":"2107","fix":"2108"},{"desc":"2109","fix":"2110"},{"desc":"2111","fix":"2112"},{"desc":"2113","fix":"2114"},{"desc":"2115","fix":"2116"},{"desc":"2117","fix":"2118"},[5329,5329],"()",[6627,6627],{"desc":"2119","fix":"2120"},{"desc":"2121","fix":"2122"},{"desc":"2123","fix":"2124"},[1173,1173],{"desc":"2125","fix":"2126"},{"desc":"2127","fix":"2128"},[461,461],[1638,1638],[2789,2789],[3353,3353],[3634,3634],[4357,4357],[4953,4953],{"desc":"2129","fix":"2130"},{"desc":"2131","fix":"2132"},{"desc":"2133","fix":"2134"},{"desc":"2135","fix":"2136"},{"desc":"2137","fix":"2138"},[799,799],[1077,1077],[1442,1442],[858,858],{"desc":"2139","fix":"2140"},{"desc":"2141","fix":"2142"},{"desc":"2143","fix":"2144"},{"desc":"2145","fix":"2146"},{"desc":"2147","fix":"2148"},{"desc":"2149","fix":"2150"},{"desc":"2151","fix":"2152"},{"desc":"2153","fix":"2154"},{"desc":"2155","fix":"2156"},{"desc":"2157","fix":"2158"},{"desc":"2159","fix":"2160"},[1214,1214],{"desc":"2161","fix":"2162"},{"desc":"2163","fix":"2164"},{"desc":"2165","fix":"2166"},[2828,2828],{"desc":"2167","fix":"2168"},{"desc":"2169","fix":"2170"},{"desc":"2171","fix":"2172"},{"desc":"2173","fix":"2174"},{"desc":"2175","fix":"2176"},{"desc":"2177","fix":"2178"},{"desc":"2179","fix":"2180"},{"desc":"2181","fix":"2182"},{"desc":"2183","fix":"2184"},{"desc":"2185","fix":"2186"},{"desc":"2187","fix":"2188"},[663,663],{"desc":"2189","fix":"2190"},{"desc":"2191","fix":"2192"},{"desc":"2193","fix":"2194"},[2792,2792],{"desc":"2195","fix":"2196"},{"desc":"2189","fix":"2197"},{"desc":"2191","fix":"2198"},{"desc":"2199","fix":"2200"},{"desc":"2191","fix":"2201"},{"desc":"2202","fix":"2203"},{"desc":"2204","fix":"2205"},{"desc":"2206","fix":"2207"},[1313,1313],[5975,5975],{"desc":"2208","fix":"2209"},{"desc":"2210","fix":"2211"},{"desc":"2191","fix":"2212"},[1124,1124],{"desc":"2213","fix":"2214"},[1644,1644],{"desc":"2215","fix":"2216"},{"desc":"2217","fix":"2218"},{"desc":"2219","fix":"2220"},[3460,3460],{"desc":"2221","fix":"2222"},{"desc":"2223","fix":"2224"},{"desc":"2225","fix":"2226"},{"desc":"2227","fix":"2228"},[10024,10024],[935,935],{"desc":"2229","fix":"2230"},{"desc":"2231","fix":"2232"},{"desc":"2233","fix":"2234"},[1295,1295],[3053,3053],{"desc":"2235","fix":"2236"},{"desc":"2237","fix":"2238"},{"desc":"2239","fix":"2240"},[993,993],{"desc":"2241","fix":"2242"},{"desc":"2243","fix":"2244"},{"desc":"2191","fix":"2245"},"Update the dependencies array to be: [getProduct, props.match.params.id]",{"range":"2246","text":"2247"},"Update the dependencies array to be: [onGetOrder, props.match.params.id, refresh]",{"range":"2248","text":"2249"},"Update the dependencies array to be: [onGetCustomer, props.match.params.id]",{"range":"2250","text":"2251"},"Update the dependencies array to be: [onGetBill, props.match.params.id, refresh]",{"range":"2252","text":"2253"},"Update the dependencies array to be: [getCustomer, isEdit, props.match.params.id]",{"range":"2254","text":"2255"},"Update the dependencies array to be: [isEdit, onGetCategories, onGetFieldOptions, onGetProduct, onGetSizes, props.match.params.id]",{"range":"2256","text":"2257"},"Update the dependencies array to be: [onGetProduct, onResetProductImages, onResetProductSize, product.id, refreshProduct]",{"range":"2258","text":"2259"},"Update the dependencies array to be: [isEdit, product]",{"range":"2260","text":"2261"},"Update the dependencies array to be: [product.size, sizes]",{"range":"2262","text":"2263"},"Update the dependencies array to be: [onGetFieldOptions, refreshFieldOptions]",{"range":"2264","text":"2265"},"Update the dependencies array to be: [getMunicipality, getStates, isEdit, props.match.params.id]",{"range":"2266","text":"2267"},"Update the dependencies array to be: [isEdit, municipality]",{"range":"2268","text":"2269"},"Update the dependencies array to be: [getCategory, isEdit, props.match.params.id]",{"range":"2270","text":"2271"},"Update the dependencies array to be: [category, isEdit]",{"range":"2272","text":"2273"},"Update the dependencies array to be: [getUser, isEdit, props.match.params.id]",{"range":"2274","text":"2275"},"Update the dependencies array to be: [isEdit, user]",{"range":"2276","text":"2277"},"Update the dependencies array to be: [getState, isEdit, props.match.params.id]",{"range":"2278","text":"2279"},"Update the dependencies array to be: [estado, isEdit]",{"range":"2280","text":"2281"},"Update the dependencies array to be: [isEdit, onGetMentions, onGetTemplate, props.match.params.id]",{"range":"2282","text":"2283"},"Update the dependencies array to be: [isEdit, setSourceValue, template]",{"range":"2284","text":"2285"},"Update the dependencies array to be: [getOffice, isEdit, onGetDeliveryMethods, onGetFieldOptions, props.match.params.id]",{"range":"2286","text":"2287"},"Update the dependencies array to be: [isEdit, orders]",{"range":"2288","text":"2289"},"Update the dependencies array to be: [printReportData, printReportData.data, props, reportBody]",{"range":"2290","text":"2291"},"Update the dependencies array to be: [getOrdersByConditional, isEdit, office]",{"range":"2292","text":"2293"},"Update the dependencies array to be: [initComponent, onResetOrder]",{"range":"2294","text":"2295"},"Update the dependencies array to be: [isEdit, onGetPayment, props.match.params.id]",{"range":"2296","text":"2297"},"Update the dependencies array to be: [isEdit, payment]",{"range":"2298","text":"2299"},"Update the dependencies array to be: [entity, entityId, entitySuggested, onGetCommentSuggested, onGetObservations]",{"range":"2300","text":"2301"},"Update the dependencies array to be: [entity, observations]",{"range":"2302","text":"2303"},"Update the dependencies array to be: [currentPage, getConditionals, onGetOrders, refresh]",{"range":"2304","text":"2305"},"Update the dependencies array to be: [conciliationView, conditional, onFilterAction, showAsModal]",{"range":"2306","text":"2307"},"Update the dependencies array to be: [conciliation, conciliationView]",{"range":"2308","text":"2309"},"Update the dependencies array to be: [customActions, getConditionals, onGetOrders]",{"range":"2310","text":"2311"},"Update the dependencies array to be: [fillValues, product]",{"range":"2312","text":"2313"},"Update the dependencies array to be: [car, car.products, getProductListWithTotals, globalDiscount, onUpdateCar]",{"range":"2314","text":"2315"},"Update the dependencies array to be: [car.customer, car.isEdit, initComponent, onGetCustomer, showAsModal]",{"range":"2316","text":"2317"},"Update the dependencies array to be: [car, customer, hasCustomerOpenOrders, onUpdateCar]",{"range":"2318","text":"2319"},"Update the dependencies array to be: [onGetFieldOptions, car.reset, deliveryMethods, onGetDeliveryMethods, onGetDeliveryLocalities]",{"range":"2320","text":"2321"},"Update the dependencies array to be: [deliveryMethods, deliveryType, onChangeDeliveryOptions]",{"range":"2322","text":"2323"},"Update the dependencies array to be: [deliveryMethod, getQuote, onChangeDeliveryOptions]",{"range":"2324","text":"2325"},"Update the dependencies array to be: [deliveryMethods, deliveryType]",{"range":"2326","text":"2327"},"Update the dependencies array to be: [deliveryMethod, deliveryQuote, onChangeDeliveryOptions]",{"range":"2328","text":"2329"},"Update the dependencies array to be: [deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, onChangeDeliveryOptions]",{"range":"2330","text":"2331"},"Update the dependencies array to be: [car.products, getQuote]",{"range":"2332","text":"2333"},"Update the dependencies array to be: [car.deliveryOptions, car.isEdit, initComponent]",{"range":"2334","text":"2335"},"Update the dependencies array to be: [onGetPayments, refresh]",{"range":"2336","text":"2337"},"Update the dependencies array to be: [onGetOffices, refresh]",{"range":"2338","text":"2339"},"Update the dependencies array to be: [onGetBills, refresh]",{"range":"2340","text":"2341"},"Update the dependencies array to be: [onGetTemplates, refresh]",{"range":"2342","text":"2343"},"Update the dependencies array to be: [conditional, currentPage, onGetOrders, refresh]",{"range":"2344","text":"2345"},"Update the dependencies array to be: [conditional, customActions, onGetOrders]",{"range":"2346","text":"2347"},"Update the dependencies array to be: [fieldOptions, groupSelected]",{"range":"2348","text":"2349"},"Update the dependencies array to be: [onGetUsers, refresh]",{"range":"2350","text":"2351"},"Update the dependencies array to be: [onGetMunicipalities, refresh]",{"range":"2352","text":"2353"},"Update the dependencies array to be: [getStates, onGetMunicipalities]",{"range":"2354","text":"2355"},"Update the dependencies array to be: [onGetStates, refresh]",{"range":"2356","text":"2357"},"Update the dependencies array to be: [conditional, currentPage, onGetCatalogBatchRequest, onGetCategories, refresh]",{"range":"2358","text":"2359"},"Update the dependencies array to be: [onGetCatalogBatchRequest, onGetCategories]",{"range":"2360","text":"2361"},"Update the dependencies array to be: [onGetProducts, refresh]",{"range":"2362","text":"2363"},"Update the dependencies array to be: [onGetDeliveryMethods, onRestartReport]",{"range":"2364","text":"2365"},"Update the dependencies array to be: [error, onCloseModal, success]",{"range":"2366","text":"2367"},"Update the dependencies array to be: [getCustomer, getStates, props.match.params.id]",{"range":"2368","text":"2369"},"Update the dependencies array to be: [getMunicipalities, state]",{"range":"2370","text":"2371"},{"range":"2372","text":"2365"},{"range":"2373","text":"2367"},"Update the dependencies array to be: [importFileReset, onGetDeliveryMethods]",{"range":"2374","text":"2375"},{"range":"2376","text":"2367"},"Update the dependencies array to be: [resetPasswordState, toggleChangePasswordModal, user]",{"range":"2377","text":"2378"},"Update the dependencies array to be: [onCloseChangePasswordModal, passwordChanged]",{"range":"2379","text":"2380"},"Update the dependencies array to be: [getDataToday, reportData]",{"range":"2381","text":"2382"},"Update the dependencies array to be: [statusGroup, title]",{"range":"2383","text":"2384"},"Update the dependencies array to be: [reportData, title]",{"range":"2385","text":"2386"},{"range":"2387","text":"2367"},"Update the dependencies array to be: [onGetOrders, payment]",{"range":"2388","text":"2389"},"Update the dependencies array to be: [findOrderBy, onGetOrders, orders, payment.id]",{"range":"2390","text":"2391"},"Update the dependencies array to be: [order, orders]",{"range":"2392","text":"2393"},"Update the dependencies array to be: [conciliationError, conciliationSuccess, onCloseModal, onConfirmConciliationRestart]",{"range":"2394","text":"2395"},"Update the dependencies array to be: [onGetOrder, orderId, refresh]",{"range":"2396","text":"2397"},"Update the dependencies array to be: [car, onPrintOrder, onResumeOrder, onUpdateCar, order]",{"range":"2398","text":"2399"},"Update the dependencies array to be: [fillSelectValues, parseList, product]",{"range":"2400","text":"2401"},"Update the dependencies array to be: [calculateTotals, productSizesList]",{"range":"2402","text":"2403"},"Update the dependencies array to be: [customerId, onGetOrders]",{"range":"2404","text":"2405"},"Update the dependencies array to be: [onGetProductsPending, product]",{"range":"2406","text":"2407"},"Update the dependencies array to be: [onGetCustomers, refresh]",{"range":"2408","text":"2409"},"Update the dependencies array to be: [conditionals, doRequest, props]",{"range":"2410","text":"2411"},"Update the dependencies array to be: [batch, onRefreshCategory, onResetBatchRequest]",{"range":"2412","text":"2413"},"Update the dependencies array to be: [onGetBillConfigs, refresh]",{"range":"2414","text":"2415"},"Update the dependencies array to be: [getBillConfig, isEdit, props.match.params.id]",{"range":"2416","text":"2417"},"Update the dependencies array to be: [getBillConfig, props.match.params.id]",{"range":"2418","text":"2419"},{"range":"2420","text":"2367"},[983,995],"[getProduct, props.match.params.id]",[923,944],"[onGetOrder, props.match.params.id, refresh]",[1687,1702],"[onGetCustomer, props.match.params.id]",[838,858],"[onGetBill, props.match.params.id, refresh]",[727,740],"[getCustomer, isEdit, props.match.params.id]",[3346,3360],"[isEdit, onGetCategories, onGetFieldOptions, onGetProduct, onGetSizes, props.match.params.id]",[3529,3545],"[onGetProduct, onResetProductImages, onResetProductSize, product.id, refreshProduct]",[4270,4279],"[isEdit, product]",[4920,4927],"[product.size, sizes]",[5643,5664],"[onGetFieldOptions, refreshFieldOptions]",[1374,1391],"[getMunicipality, getStates, isEdit, props.match.params.id]",[1728,1742],"[isEdit, municipality]",[1050,1063],"[getCategory, isEdit, props.match.params.id]",[1248,1258],"[category, isEdit]",[1068,1077],"[getUser, isEdit, props.match.params.id]",[1210,1216],"[isEdit, user]",[1059,1069],"[getState, isEdit, props.match.params.id]",[1250,1258],"[estado, isEdit]",[1421,1436],"[isEdit, onGetMentions, onGetTemplate, props.match.params.id]",[1674,1684],"[isEdit, setSourceValue, template]",[2642,2653],"[getOffice, isEdit, onGetDeliveryMethods, onGetFieldOptions, props.match.params.id]",[3165,3173],"[isEdit, orders]",[3420,3442],"[printReportData, printReportData.data, props, reportBody]",[3749,3757],"[getOrdersByConditional, isEdit, office]",[1285,1300],"[initComponent, onResetOrder]",[1331,1345],"[isEdit, onGetPayment, props.match.params.id]",[1491,1500],"[isEdit, payment]",[1299,1309],"[entity, entityId, entitySuggested, onGetCommentSuggested, onGetObservations]",[1585,1599],"[entity, observations]",[2336,2345],"[currentPage, getConditionals, onGetOrders, refresh]",[2552,2570],"[conciliationView, conditional, onFilterAction, showAsModal]",[2733,2747],"[conciliation, conciliationView]",[2892,2905],"[customActions, getConditionals, onGetOrders]",[867,876],"[fillValues, product]",[1205,1235],"[car, car.products, getProductListWithTotals, globalDiscount, onUpdateCar]",[2320,2333],"[car.customer, car.isEdit, initComponent, onGetCustomer, showAsModal]",[2699,2709],"[car, customer, hasCustomerOpenOrders, onUpdateCar]",[2936,2966],"[onGetFieldOptions, car.reset, deliveryMethods, onGetDeliveryMethods, onGetDeliveryLocalities]",[3685,3699],"[deliveryMethods, deliveryType, onChangeDeliveryOptions]",[3924,3940],"[deliveryMethod, getQuote, onChangeDeliveryOptions]",[4248,4265],"[deliveryMethods, deliveryType]",[4462,4477],"[deliveryMethod, deliveryQuote, onChangeDeliveryOptions]",[4545,4615],"[deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, onChangeDeliveryOptions]",[4668,4682],"[car.products, getQuote]",[5613,5634],"[car.deliveryOptions, car.isEdit, initComponent]",[1870,1879],"[onGetPayments, refresh]",[1550,1559],"[onGetOffices, refresh]",[1787,1796],"[onGetBills, refresh]",[1526,1535],"[onGetTemplates, refresh]",[1933,1942],"[conditional, currentPage, onGetOrders, refresh]",[2081,2094],"[conditional, customActions, onGetOrders]",[2387,2401],"[fieldOptions, groupSelected]",[1725,1734],"[onGetUsers, refresh]",[1584,1593],"[onGetMunicipalities, refresh]",[1676,1697],"[getStates, onGetMunicipalities]",[1462,1471],"[onGetStates, refresh]",[2194,2203],"[conditional, currentPage, onGetCatalogBatchRequest, onGetCategories, refresh]",[2298,2315],"[onGetCatalogBatchRequest, onGetCategories]",[3953,3962],"[onGetProducts, refresh]",[1278,1295],"[onGetDeliveryMethods, onRestartReport]",[1403,1412],"[error, onCloseModal, success]",[1469,1482],"[getCustomer, getStates, props.match.params.id]",[2904,2911],"[getMunicipalities, state]",[1293,1310],[1418,1427],[1364,1381],"[importFileReset, onGetDeliveryMethods]",[1931,1940],[1021,1027],"[resetPasswordState, toggleChangePasswordModal, user]",[1142,1159],"[onCloseChangePasswordModal, passwordChanged]",[629,641],"[getDataToday, reportData]",[2068,2081],"[statusGroup, title]",[1791,1803],"[reportData, title]",[1183,1192],[1300,1309],"[onGetOrders, payment]",[1942,1950],"[findOrderBy, onGetOrders, orders, payment.id]",[2481,2488],"[order, orders]",[2783,2804],"[conciliationError, conciliationSuccess, onCloseModal, onConfirmConciliationRestart]",[2489,2507],"[onGetOrder, orderId, refresh]",[4700,4707],"[car, onPrintOrder, onResumeOrder, onUpdateCar, order]",[1098,1107],"[fillSelectValues, parseList, product]",[1166,1184],"[calculateTotals, productSizesList]",[1073,1085],"[customerId, onGetOrders]",[648,657],"[onGetProductsPending, product]",[2089,2098],"[onGetCustomers, refresh]",[1274,1299],"[conditionals, doRequest, props]",[1110,1117],"[batch, onRefreshCategory, onResetBatchRequest]",[1420,1429],"[onGetBillConfigs, refresh]",[745,760],"[getBillConfig, isEdit, props.match.params.id]",[1086,1101],"[getBillConfig, props.match.params.id]",[1046,1055]]