[{"/Users/ramon/Repositories/lucy-moie/src/index.js":"1","/Users/ramon/Repositories/lucy-moie/src/App.js":"2","/Users/ramon/Repositories/lucy-moie/src/serviceWorker.js":"3","/Users/ramon/Repositories/lucy-moie/src/store/index.js":"4","/Users/ramon/Repositories/lucy-moie/src/routes/allRoutes.js":"5","/Users/ramon/Repositories/lucy-moie/src/routes/middleware/Authmiddleware.js":"6","/Users/ramon/Repositories/lucy-moie/src/components/NonAuthLayout.js":"7","/Users/ramon/Repositories/lucy-moie/src/components/MessageToast/ShowToastMessages.js":"8","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/index.js":"9","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/index.js":"10","/Users/ramon/Repositories/lucy-moie/src/store/sagas.js":"11","/Users/ramon/Repositories/lucy-moie/src/store/reducers.js":"12","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Header.js":"13","/Users/ramon/Repositories/lucy-moie/src/store/actions.js":"14","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Navbar.js":"15","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Footer.js":"16","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Header.js":"17","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Sidebar.js":"18","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Footer.js":"19","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/index.js":"20","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductDetail.js":"21","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Login.js":"22","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Logout.js":"23","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/index.js":"24","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderDetail.js":"25","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/ForgetPassword.js":"26","/Users/ramon/Repositories/lucy-moie/src/pages/PostSaleEdit/PostSaleDetail.js":"27","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/user-profile.js":"28","/Users/ramon/Repositories/lucy-moie/src/pages/commons/404.js":"29","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Register.js":"30","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerDetail.js":"31","/Users/ramon/Repositories/lucy-moie/src/pages/BillEdit/BillDetail.js":"32","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/Rightbar.js":"33","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actions.js":"34","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/saga.js":"35","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/index.js":"36","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/index.js":"37","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/index.js":"38","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/saga.js":"39","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/saga.js":"40","/Users/ramon/Repositories/lucy-moie/src/store/customer/saga.js":"41","/Users/ramon/Repositories/lucy-moie/src/store/category/saga.js":"42","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/saga.js":"43","/Users/ramon/Repositories/lucy-moie/src/store/sizes/saga.js":"44","/Users/ramon/Repositories/lucy-moie/src/store/product/saga.js":"45","/Users/ramon/Repositories/lucy-moie/src/store/comment/saga.js":"46","/Users/ramon/Repositories/lucy-moie/src/store/productImages/saga.js":"47","/Users/ramon/Repositories/lucy-moie/src/store/productSize/saga.js":"48","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/saga.js":"49","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/saga.js":"50","/Users/ramon/Repositories/lucy-moie/src/store/location/saga.js":"51","/Users/ramon/Repositories/lucy-moie/src/store/order/saga.js":"52","/Users/ramon/Repositories/lucy-moie/src/store/user/saga.js":"53","/Users/ramon/Repositories/lucy-moie/src/store/template/saga.js":"54","/Users/ramon/Repositories/lucy-moie/src/store/office/saga.js":"55","/Users/ramon/Repositories/lucy-moie/src/store/bill/saga.js":"56","/Users/ramon/Repositories/lucy-moie/src/store/layout/saga.js":"57","/Users/ramon/Repositories/lucy-moie/src/store/reports/saga.js":"58","/Users/ramon/Repositories/lucy-moie/src/store/payments/saga.js":"59","/Users/ramon/Repositories/lucy-moie/src/store/payments/reducer.js":"60","/Users/ramon/Repositories/lucy-moie/src/store/postSale/saga.js":"61","/Users/ramon/Repositories/lucy-moie/src/pages/Product/index.js":"62","/Users/ramon/Repositories/lucy-moie/src/pages/Category/index.js":"63","/Users/ramon/Repositories/lucy-moie/src/pages/State/index.js":"64","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/index.js":"65","/Users/ramon/Repositories/lucy-moie/src/pages/MunicipalityEdit/index.js":"66","/Users/ramon/Repositories/lucy-moie/src/pages/CategoryEdit/index.js":"67","/Users/ramon/Repositories/lucy-moie/src/pages/UserEdit/index.js":"68","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/index.js":"69","/Users/ramon/Repositories/lucy-moie/src/pages/StateEdit/index.js":"70","/Users/ramon/Repositories/lucy-moie/src/pages/User/index.js":"71","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/index.js":"72","/Users/ramon/Repositories/lucy-moie/src/pages/Template/index.js":"73","/Users/ramon/Repositories/lucy-moie/src/pages/TemplateEdit/index.js":"74","/Users/ramon/Repositories/lucy-moie/src/pages/OfficesEdit/index.js":"75","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/index.js":"76","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/index.js":"77","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/index.js":"78","/Users/ramon/Repositories/lucy-moie/src/pages/PaymentsEdit/index.js":"79","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/index.js":"80","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/index.js":"81","/Users/ramon/Repositories/lucy-moie/src/store/reports/reducer.js":"82","/Users/ramon/Repositories/lucy-moie/src/store/location/actions.js":"83","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/FooterUsers.js":"84","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/UsersSalesDropdown.js":"85","/Users/ramon/Repositories/lucy-moie/src/store/bill/actions.js":"86","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actionTypes.js":"87","/Users/ramon/Repositories/lucy-moie/src/common/constants.js":"88","/Users/ramon/Repositories/lucy-moie/src/components/Modal/ConfirmationModal.js":"89","/Users/ramon/Repositories/lucy-moie/src/common/utils.js":"90","/Users/ramon/Repositories/lucy-moie/src/components/Common/Breadcrumb.js":"91","/Users/ramon/Repositories/lucy-moie/src/components/Common/NoDataIndication.js":"92","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CategoriesPieChart.js":"93","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/OrdersPieChart.js":"94","/Users/ramon/Repositories/lucy-moie/src/components/Common/Observations.js":"95","/Users/ramon/Repositories/lucy-moie/src/helpers/service.js":"96","/Users/ramon/Repositories/lucy-moie/src/common/pagination.js":"97","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderList.js":"98","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonSubmit.js":"99","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/reducer.js":"100","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductPublish.js":"101","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductImage.js":"102","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actions.js":"103","/Users/ramon/Repositories/lucy-moie/src/store/order/actions.js":"104","/Users/ramon/Repositories/lucy-moie/src/store/payments/actions.js":"105","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderSummary.js":"106","/Users/ramon/Repositories/lucy-moie/src/store/product/actions.js":"107","/Users/ramon/Repositories/lucy-moie/src/store/customer/actions.js":"108","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCar.js":"109","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCustomer.js":"110","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderDeliveryOptions.js":"111","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderProducts.js":"112","/Users/ramon/Repositories/lucy-moie/src/helpers/backend_helper.js":"113","/Users/ramon/Repositories/lucy-moie/src/common/conditionals.js":"114","/Users/ramon/Repositories/lucy-moie/src/store/office/actions.js":"115","/Users/ramon/Repositories/lucy-moie/src/common/converters.js":"116","/Users/ramon/Repositories/lucy-moie/src/components/Modal/CommosModal.js":"117","/Users/ramon/Repositories/lucy-moie/src/components/Fields/Autocomplete.js":"118","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputDate.js":"119","/Users/ramon/Repositories/lucy-moie/src/store/reports/actionTypes.js":"120","/Users/ramon/Repositories/lucy-moie/src/store/template/actions.js":"121","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsList.js":"122","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeList.js":"123","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billList.js":"124","/Users/ramon/Repositories/lucy-moie/src/components/mentions/MultiMention.js":"125","/Users/ramon/Repositories/lucy-moie/src/components/mentions/useHookValue.js":"126","/Users/ramon/Repositories/lucy-moie/src/store/location/actionTypes.js":"127","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateList.js":"128","/Users/ramon/Repositories/lucy-moie/src/store/bill/actionTypes.js":"129","/Users/ramon/Repositories/lucy-moie/src/components/Common/PieChart.js":"130","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleList.js":"131","/Users/ramon/Repositories/lucy-moie/src/helpers/api_helper.js":"132","/Users/ramon/Repositories/lucy-moie/src/store/user/actions.js":"133","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/configsList.js":"134","/Users/ramon/Repositories/lucy-moie/src/store/category/actions.js":"135","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userList.js":"136","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actions.js":"137","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actionTypes.js":"138","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityList.js":"139","/Users/ramon/Repositories/lucy-moie/src/store/payments/actionTypes.js":"140","/Users/ramon/Repositories/lucy-moie/src/store/layout/actionTypes.js":"141","/Users/ramon/Repositories/lucy-moie/src/store/layout/actions.js":"142","/Users/ramon/Repositories/lucy-moie/src/store/reports/actions.js":"143","/Users/ramon/Repositories/lucy-moie/src/store/user/actionTypes.js":"144","/Users/ramon/Repositories/lucy-moie/src/store/template/actionTypes.js":"145","/Users/ramon/Repositories/lucy-moie/src/store/office/actionTypes.js":"146","/Users/ramon/Repositories/lucy-moie/src/store/order/actionTypes.js":"147","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesList.js":"148","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryList.js":"149","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/products-list.js":"150","/Users/ramon/Repositories/lucy-moie/src/store/comment/actions.js":"151","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/TimeLine.js":"152","/Users/ramon/Repositories/lucy-moie/src/components/Fields/index.js":"153","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actionTypes.js":"154","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actions.js":"155","/Users/ramon/Repositories/lucy-moie/src/components/StatusField/index.js":"156","/Users/ramon/Repositories/lucy-moie/src/helpers/url_helper.js":"157","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actionTypes.js":"158","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/ConciliationReportForm.js":"159","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actions.js":"160","/Users/ramon/Repositories/lucy-moie/src/components/Common/DropZoneIcon.js":"161","/Users/ramon/Repositories/lucy-moie/src/components/Common/Image.js":"162","/Users/ramon/Repositories/lucy-moie/src/store/product/actionTypes.js":"163","/Users/ramon/Repositories/lucy-moie/src/store/customer/actionTypes.js":"164","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerForm.js":"165","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeColumns.js":"166","/Users/ramon/Repositories/lucy-moie/src/store/template/reducer.js":"167","/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateColumn.js":"168","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/PostSaleReportForm.js":"169","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/PostSaleImportFileForm.js":"170","/Users/ramon/Repositories/lucy-moie/src/store/category/actionTypes.js":"171","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleColumn.js":"172","/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/accessToken.js":"173","/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/auth-token-header.js":"174","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/forgetPassword.js":"175","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userColumn.js":"176","/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityColumns.js":"177","/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsStatusCard.js":"178","/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsRegisteredCard.js":"179","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryColumn.js":"180","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/productColumn.js":"181","/Users/ramon/Repositories/lucy-moie/src/store/comment/actionTypes.js":"182","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSelectBasicField.js":"183","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputAsyncSearchField.js":"184","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputPhoneField.js":"185","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actionTypes.js":"186","/Users/ramon/Repositories/lucy-moie/src/components/TableFilter/index.js":"187","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputTextField.js":"188","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSwitchField.js":"189","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSearchField.js":"190","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard1.js":"191","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard4.js":"192","/Users/ramon/Repositories/lucy-moie/src/components/Common/HtmlTooltip.js":"193","/Users/ramon/Repositories/lucy-moie/src/components/Fields/messages.js":"194","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard.js":"195","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesColumn.js":"196","/Users/ramon/Repositories/lucy-moie/src/components/mentions/mentionStyles.js":"197","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/BillsReportForm.js":"198","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billColumns.js":"199","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/paymentOverlay.js":"200","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsColumn.js":"201","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actions.js":"202","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderConciliationsForm.js":"203","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderColumn.js":"204","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderEdit.js":"205","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actionTypes.js":"206","/Users/ramon/Repositories/lucy-moie/src/store/sizes/actions.js":"207","/Users/ramon/Repositories/lucy-moie/src/store/sizes/actionTypes.js":"208","/Users/ramon/Repositories/lucy-moie/src/helpers/fakebackend_helper.js":"209","/Users/ramon/Repositories/lucy-moie/src/helpers/firebase_helper.js":"210","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actions.js":"211","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actionTypes.js":"212","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actions.js":"213","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actionTypes.js":"214","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actions.js":"215","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actionTypes.js":"216","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductSize.js":"217","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/customer_status.js":"218","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/OrderCardList.js":"219","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductsPending.js":"220","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-users.js":"221","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/latest-transaction.js":"222","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/mini-widget.js":"223","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-vendors.js":"224","/Users/ramon/Repositories/lucy-moie/src/config.js":"225","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/SidebarContent.js":"226","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customers-list.js":"227","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/NotificationDropdown.js":"228","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/ProfileMenu.js":"229","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js":"230","/Users/ramon/Repositories/lucy-moie/src/store/bill/reducer.js":"231","/Users/ramon/Repositories/lucy-moie/src/store/office/reducer.js":"232","/Users/ramon/Repositories/lucy-moie/src/store/postSale/reducer.js":"233","/Users/ramon/Repositories/lucy-moie/src/store/user/reducer.js":"234","/Users/ramon/Repositories/lucy-moie/src/store/comment/reducer.js":"235","/Users/ramon/Repositories/lucy-moie/src/store/order/reducer.js":"236","/Users/ramon/Repositories/lucy-moie/src/store/productSize/reducer.js":"237","/Users/ramon/Repositories/lucy-moie/src/store/productImages/reducer.js":"238","/Users/ramon/Repositories/lucy-moie/src/store/sizes/reducer.js":"239","/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/reducer.js":"240","/Users/ramon/Repositories/lucy-moie/src/store/category/reducer.js":"241","/Users/ramon/Repositories/lucy-moie/src/store/product/reducer.js":"242","/Users/ramon/Repositories/lucy-moie/src/store/location/reducer.js":"243","/Users/ramon/Repositories/lucy-moie/src/store/customer/reducer.js":"244","/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/reducer.js":"245","/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/reducer.js":"246","/Users/ramon/Repositories/lucy-moie/src/store/auth/register/reducer.js":"247","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/reducer.js":"248","/Users/ramon/Repositories/lucy-moie/src/store/layout/reducer.js":"249","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerFilter/index.js":"250","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customerColumn.js":"251","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/PrintBatchRequest.js":"252","/Users/ramon/Repositories/lucy-moie/src/pages/Category/CatalogPrintBatchRequest.js":"253","/Users/ramon/Repositories/lucy-moie/src/i18n.js":"254","/Users/ramon/Repositories/lucy-moie/src/common/languages.js":"255","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/index.js":"256","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigList.js":"257","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigColumns.js":"258","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actions.js":"259","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actionTypes.js":"260","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/saga.js":"261","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/reducer.js":"262","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/index.js":"263","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/BillConfigForm.js":"264","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/OfficeReportForm.js":"265","/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/index.js":"266","/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/BatchQueriesForm.js":"267","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonCopy.js":"268","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/GeneralSearch.js":"269","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/Stats.js":"270","/Users/ramon/Repositories/lucy-moie/src/components/HasRole.js":"271","/Users/ramon/Repositories/lucy-moie/src/components/Common/HishChartsWrapper.js":"272","/Users/ramon/Repositories/lucy-moie/src/pages/Security/index.js":"273","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityManagement.js":"274","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityRoles.js":"275","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityPermissions.js":"276","/Users/ramon/Repositories/lucy-moie/src/helpers/security_rol.js":"277"},{"size":444,"mtime":1637949850510,"results":"278","hashOfConfig":"279"},{"size":2154,"mtime":1637949850293,"results":"280","hashOfConfig":"279"},{"size":5315,"mtime":1637949850555,"results":"281","hashOfConfig":"279"},{"size":452,"mtime":1637949850575,"results":"282","hashOfConfig":"279"},{"size":4748,"mtime":1647127957373,"results":"283","hashOfConfig":"279"},{"size":1328,"mtime":1637949850555,"results":"284","hashOfConfig":"279"},{"size":788,"mtime":1637949850499,"results":"285","hashOfConfig":"279"},{"size":882,"mtime":1643505688114,"results":"286","hashOfConfig":"279"},{"size":3070,"mtime":1637949850496,"results":"287","hashOfConfig":"279"},{"size":3637,"mtime":1637949850503,"results":"288","hashOfConfig":"279"},{"size":1643,"mtime":1638139339052,"results":"289","hashOfConfig":"279"},{"size":1478,"mtime":1638139358730,"results":"290","hashOfConfig":"279"},{"size":9649,"mtime":1644191324902,"results":"291","hashOfConfig":"279"},{"size":826,"mtime":1638139386386,"results":"292","hashOfConfig":"279"},{"size":11310,"mtime":1647127957364,"results":"293","hashOfConfig":"279"},{"size":679,"mtime":1637949850493,"results":"294","hashOfConfig":"279"},{"size":9466,"mtime":1637949850502,"results":"295","hashOfConfig":"279"},{"size":1580,"mtime":1637949850502,"results":"296","hashOfConfig":"279"},{"size":612,"mtime":1637949850501,"results":"297","hashOfConfig":"279"},{"size":5457,"mtime":1637949850527,"results":"298","hashOfConfig":"279"},{"size":7931,"mtime":1646362379665,"results":"299","hashOfConfig":"279"},{"size":6370,"mtime":1637949850514,"results":"300","hashOfConfig":"279"},{"size":464,"mtime":1637949850515,"results":"301","hashOfConfig":"279"},{"size":602,"mtime":1637949850523,"results":"302","hashOfConfig":"279"},{"size":1020,"mtime":1637949850539,"results":"303","hashOfConfig":"279"},{"size":4705,"mtime":1637949850514,"results":"304","hashOfConfig":"279"},{"size":9217,"mtime":1644696352900,"results":"305","hashOfConfig":"279"},{"size":7404,"mtime":1637949850515,"results":"306","hashOfConfig":"279"},{"size":352,"mtime":1644612332347,"results":"307","hashOfConfig":"279"},{"size":7214,"mtime":1637949850515,"results":"308","hashOfConfig":"279"},{"size":12497,"mtime":1637949850524,"results":"309","hashOfConfig":"279"},{"size":6368,"mtime":1638155912595,"results":"310","hashOfConfig":"279"},{"size":13370,"mtime":1637949850485,"results":"311","hashOfConfig":"279"},{"size":789,"mtime":1637949850559,"results":"312","hashOfConfig":"279"},{"size":2227,"mtime":1637949850560,"results":"313","hashOfConfig":"279"},{"size":1545,"mtime":1637949850526,"results":"314","hashOfConfig":"279"},{"size":31596,"mtime":1647122208788,"results":"315","hashOfConfig":"279"},{"size":714,"mtime":1648688515279,"results":"316","hashOfConfig":"279"},{"size":1900,"mtime":1637949850558,"results":"317","hashOfConfig":"279"},{"size":2846,"mtime":1637949850562,"results":"318","hashOfConfig":"279"},{"size":4009,"mtime":1643172085356,"results":"319","hashOfConfig":"279"},{"size":4231,"mtime":1637949850567,"results":"320","hashOfConfig":"279"},{"size":1512,"mtime":1637949850563,"results":"321","hashOfConfig":"279"},{"size":3135,"mtime":1637949850595,"results":"322","hashOfConfig":"279"},{"size":4401,"mtime":1647049140116,"results":"323","hashOfConfig":"279"},{"size":3869,"mtime":1644612332351,"results":"324","hashOfConfig":"279"},{"size":3367,"mtime":1637949850589,"results":"325","hashOfConfig":"279"},{"size":1163,"mtime":1637949850590,"results":"326","hashOfConfig":"279"},{"size":3476,"mtime":1643504716788,"results":"327","hashOfConfig":"279"},{"size":3838,"mtime":1637949850575,"results":"328","hashOfConfig":"279"},{"size":5464,"mtime":1637949850578,"results":"329","hashOfConfig":"279"},{"size":11946,"mtime":1648501436205,"results":"330","hashOfConfig":"279"},{"size":3908,"mtime":1637949850598,"results":"331","hashOfConfig":"279"},{"size":3283,"mtime":1637949850596,"results":"332","hashOfConfig":"279"},{"size":7816,"mtime":1644612332353,"results":"333","hashOfConfig":"279"},{"size":7360,"mtime":1644612332348,"results":"334","hashOfConfig":"279"},{"size":4857,"mtime":1637949850577,"results":"335","hashOfConfig":"279"},{"size":1814,"mtime":1638153849585,"results":"336","hashOfConfig":"279"},{"size":3898,"mtime":1638153849584,"results":"337","hashOfConfig":"279"},{"size":2978,"mtime":1644612332354,"results":"338","hashOfConfig":"279"},{"size":5522,"mtime":1637949850585,"results":"339","hashOfConfig":"279"},{"size":746,"mtime":1648689015303,"results":"340","hashOfConfig":"279"},{"size":743,"mtime":1648689158841,"results":"341","hashOfConfig":"279"},{"size":524,"mtime":1637949850549,"results":"342","hashOfConfig":"279"},{"size":569,"mtime":1637949850530,"results":"343","hashOfConfig":"279"},{"size":7624,"mtime":1637949850532,"results":"344","hashOfConfig":"279"},{"size":5614,"mtime":1646354436960,"results":"345","hashOfConfig":"279"},{"size":10138,"mtime":1648522663089,"results":"346","hashOfConfig":"279"},{"size":533,"mtime":1637949850530,"results":"347","hashOfConfig":"279"},{"size":6887,"mtime":1637949850550,"results":"348","hashOfConfig":"279"},{"size":516,"mtime":1637949850552,"results":"349","hashOfConfig":"279"},{"size":534,"mtime":1637949850543,"results":"350","hashOfConfig":"279"},{"size":543,"mtime":1637949850551,"results":"351","hashOfConfig":"279"},{"size":9613,"mtime":1644121808902,"results":"352","hashOfConfig":"279"},{"size":29702,"mtime":1646354437168,"results":"353","hashOfConfig":"279"},{"size":516,"mtime":1637949850516,"results":"354","hashOfConfig":"279"},{"size":529,"mtime":1637949850532,"results":"355","hashOfConfig":"279"},{"size":7353,"mtime":1648501436199,"results":"356","hashOfConfig":"279"},{"size":14689,"mtime":1646354436968,"results":"357","hashOfConfig":"279"},{"size":534,"mtime":1637949850541,"results":"358","hashOfConfig":"279"},{"size":507,"mtime":1644612332346,"results":"359","hashOfConfig":"279"},{"size":985,"mtime":1637949850592,"results":"360","hashOfConfig":"279"},{"size":4368,"mtime":1643164119453,"results":"361","hashOfConfig":"279"},{"size":2405,"mtime":1637949850494,"results":"362","hashOfConfig":"279"},{"size":7186,"mtime":1637949850487,"results":"363","hashOfConfig":"279"},{"size":4871,"mtime":1637949850564,"results":"364","hashOfConfig":"279"},{"size":270,"mtime":1637949850559,"results":"365","hashOfConfig":"279"},{"size":6628,"mtime":1647114789296,"results":"366","hashOfConfig":"279"},{"size":1624,"mtime":1637949850498,"results":"367","hashOfConfig":"279"},{"size":6929,"mtime":1648501436190,"results":"368","hashOfConfig":"279"},{"size":1113,"mtime":1637949850477,"results":"369","hashOfConfig":"279"},{"size":333,"mtime":1637949850482,"results":"370","hashOfConfig":"279"},{"size":1288,"mtime":1637949850524,"results":"371","hashOfConfig":"279"},{"size":1444,"mtime":1637949850526,"results":"372","hashOfConfig":"279"},{"size":6212,"mtime":1648688867650,"results":"373","hashOfConfig":"279"},{"size":5795,"mtime":1644191744092,"results":"374","hashOfConfig":"279"},{"size":38,"mtime":1637949850476,"results":"375","hashOfConfig":"279"},{"size":18656,"mtime":1646354436965,"results":"376","hashOfConfig":"279"},{"size":678,"mtime":1637949850477,"results":"377","hashOfConfig":"279"},{"size":3228,"mtime":1637949850574,"results":"378","hashOfConfig":"279"},{"size":3515,"mtime":1643164918623,"results":"379","hashOfConfig":"279"},{"size":7271,"mtime":1637949850547,"results":"380","hashOfConfig":"279"},{"size":3381,"mtime":1637949850574,"results":"381","hashOfConfig":"279"},{"size":7555,"mtime":1648501436204,"results":"382","hashOfConfig":"279"},{"size":2233,"mtime":1638153849583,"results":"383","hashOfConfig":"279"},{"size":4754,"mtime":1643587377865,"results":"384","hashOfConfig":"279"},{"size":3168,"mtime":1644612636128,"results":"385","hashOfConfig":"279"},{"size":3370,"mtime":1643171315365,"results":"386","hashOfConfig":"279"},{"size":9745,"mtime":1646354436963,"results":"387","hashOfConfig":"279"},{"size":17595,"mtime":1643851124902,"results":"388","hashOfConfig":"279"},{"size":14971,"mtime":1646354436965,"results":"389","hashOfConfig":"279"},{"size":15100,"mtime":1643851124905,"results":"390","hashOfConfig":"279"},{"size":12966,"mtime":1648501436196,"results":"391","hashOfConfig":"279"},{"size":3092,"mtime":1644621777647,"results":"392","hashOfConfig":"279"},{"size":5458,"mtime":1644612332353,"results":"393","hashOfConfig":"279"},{"size":2026,"mtime":1643946066151,"results":"394","hashOfConfig":"279"},{"size":1451,"mtime":1637949850498,"results":"395","hashOfConfig":"279"},{"size":5304,"mtime":1637949850487,"results":"396","hashOfConfig":"279"},{"size":3251,"mtime":1637949850488,"results":"397","hashOfConfig":"279"},{"size":242,"mtime":1637949850591,"results":"398","hashOfConfig":"279"},{"size":1897,"mtime":1643164390129,"results":"399","hashOfConfig":"279"},{"size":8776,"mtime":1646354436967,"results":"400","hashOfConfig":"279"},{"size":9171,"mtime":1643163231783,"results":"401","hashOfConfig":"279"},{"size":10579,"mtime":1646367166332,"results":"402","hashOfConfig":"279"},{"size":856,"mtime":1637949850504,"results":"403","hashOfConfig":"279"},{"size":403,"mtime":1637949850504,"results":"404","hashOfConfig":"279"},{"size":1829,"mtime":1643164098767,"results":"405","hashOfConfig":"279"},{"size":8795,"mtime":1646354436970,"results":"406","hashOfConfig":"279"},{"size":1799,"mtime":1637949850564,"results":"407","hashOfConfig":"279"},{"size":1153,"mtime":1637949850483,"results":"408","hashOfConfig":"279"},{"size":10249,"mtime":1647113764360,"results":"409","hashOfConfig":"279"},{"size":1892,"mtime":1637949850506,"results":"410","hashOfConfig":"279"},{"size":2504,"mtime":1643163927719,"results":"411","hashOfConfig":"279"},{"size":15629,"mtime":1648501436198,"results":"412","hashOfConfig":"279"},{"size":2867,"mtime":1643162553460,"results":"413","hashOfConfig":"279"},{"size":8049,"mtime":1646354436971,"results":"414","hashOfConfig":"279"},{"size":2986,"mtime":1637949850585,"results":"415","hashOfConfig":"279"},{"size":1324,"mtime":1637949850584,"results":"416","hashOfConfig":"279"},{"size":9385,"mtime":1646354436962,"results":"417","hashOfConfig":"279"},{"size":835,"mtime":1638153849583,"results":"418","hashOfConfig":"279"},{"size":549,"mtime":1637949850576,"results":"419","hashOfConfig":"279"},{"size":1130,"mtime":1637949850576,"results":"420","hashOfConfig":"279"},{"size":570,"mtime":1637949850592,"results":"421","hashOfConfig":"279"},{"size":937,"mtime":1643163896582,"results":"422","hashOfConfig":"279"},{"size":743,"mtime":1643164373059,"results":"423","hashOfConfig":"279"},{"size":2059,"mtime":1643163187516,"results":"424","hashOfConfig":"279"},{"size":3153,"mtime":1644693788817,"results":"425","hashOfConfig":"279"},{"size":8533,"mtime":1646354436969,"results":"426","hashOfConfig":"279"},{"size":15641,"mtime":1648689129345,"results":"427","hashOfConfig":"279"},{"size":11830,"mtime":1648688894896,"results":"428","hashOfConfig":"279"},{"size":2614,"mtime":1644612332350,"results":"429","hashOfConfig":"279"},{"size":3091,"mtime":1637949850526,"results":"430","hashOfConfig":"279"},{"size":1045,"mtime":1643585746354,"results":"431","hashOfConfig":"279"},{"size":991,"mtime":1637949850574,"results":"432","hashOfConfig":"279"},{"size":2237,"mtime":1643503945483,"results":"433","hashOfConfig":"279"},{"size":1130,"mtime":1647114783315,"results":"434","hashOfConfig":"279"},{"size":2570,"mtime":1648501436196,"results":"435","hashOfConfig":"279"},{"size":915,"mtime":1637949850572,"results":"436","hashOfConfig":"279"},{"size":5123,"mtime":1637949850549,"results":"437","hashOfConfig":"279"},{"size":718,"mtime":1637949850590,"results":"438","hashOfConfig":"279"},{"size":2409,"mtime":1637949850478,"results":"439","hashOfConfig":"279"},{"size":610,"mtime":1637949850479,"results":"440","hashOfConfig":"279"},{"size":950,"mtime":1637949850586,"results":"441","hashOfConfig":"279"},{"size":1340,"mtime":1643171252382,"results":"442","hashOfConfig":"279"},{"size":14456,"mtime":1643851124900,"results":"443","hashOfConfig":"279"},{"size":4657,"mtime":1644191324904,"results":"444","hashOfConfig":"279"},{"size":2569,"mtime":1643164410498,"results":"445","hashOfConfig":"279"},{"size":1910,"mtime":1637949850551,"results":"446","hashOfConfig":"279"},{"size":5985,"mtime":1644641134778,"results":"447","hashOfConfig":"279"},{"size":6169,"mtime":1637949850543,"results":"448","hashOfConfig":"279"},{"size":1195,"mtime":1643162548532,"results":"449","hashOfConfig":"279"},{"size":4657,"mtime":1637949850544,"results":"450","hashOfConfig":"279"},{"size":56,"mtime":1637949850508,"results":"451","hashOfConfig":"279"},{"size":196,"mtime":1637949850508,"results":"452","hashOfConfig":"279"},{"size":4271,"mtime":1637949850552,"results":"453","hashOfConfig":"279"},{"size":3008,"mtime":1637949850552,"results":"454","hashOfConfig":"279"},{"size":2522,"mtime":1637949850531,"results":"455","hashOfConfig":"279"},{"size":707,"mtime":1637949850483,"results":"456","hashOfConfig":"279"},{"size":776,"mtime":1643172719714,"results":"457","hashOfConfig":"279"},{"size":2728,"mtime":1648689058406,"results":"458","hashOfConfig":"279"},{"size":7659,"mtime":1648688948416,"results":"459","hashOfConfig":"279"},{"size":841,"mtime":1637949850568,"results":"460","hashOfConfig":"279"},{"size":1067,"mtime":1637949850489,"results":"461","hashOfConfig":"279"},{"size":3900,"mtime":1643568549070,"results":"462","hashOfConfig":"279"},{"size":2742,"mtime":1637949850489,"results":"463","hashOfConfig":"279"},{"size":286,"mtime":1637949850589,"results":"464","hashOfConfig":"279"},{"size":14030,"mtime":1644191324903,"results":"465","hashOfConfig":"279"},{"size":6270,"mtime":1648501436193,"results":"466","hashOfConfig":"279"},{"size":1921,"mtime":1637949850490,"results":"467","hashOfConfig":"279"},{"size":3359,"mtime":1643566510312,"results":"468","hashOfConfig":"279"},{"size":2313,"mtime":1643073987883,"results":"469","hashOfConfig":"279"},{"size":2037,"mtime":1643172346925,"results":"470","hashOfConfig":"279"},{"size":713,"mtime":1637949850479,"results":"471","hashOfConfig":"279"},{"size":313,"mtime":1643586016043,"results":"472","hashOfConfig":"279"},{"size":2118,"mtime":1637949850484,"results":"473","hashOfConfig":"279"},{"size":2439,"mtime":1637949850550,"results":"474","hashOfConfig":"279"},{"size":1269,"mtime":1637949850504,"results":"475","hashOfConfig":"279"},{"size":4172,"mtime":1637949850548,"results":"476","hashOfConfig":"279"},{"size":3676,"mtime":1637949850516,"results":"477","hashOfConfig":"279"},{"size":12704,"mtime":1647122541031,"results":"478","hashOfConfig":"279"},{"size":2581,"mtime":1643565093382,"results":"479","hashOfConfig":"279"},{"size":2084,"mtime":1637949850588,"results":"480","hashOfConfig":"279"},{"size":17790,"mtime":1640004911627,"results":"481","hashOfConfig":"279"},{"size":7674,"mtime":1644191324907,"results":"482","hashOfConfig":"279"},{"size":52159,"mtime":1648688360646,"results":"483","hashOfConfig":"279"},{"size":872,"mtime":1637949850588,"results":"484","hashOfConfig":"279"},{"size":1672,"mtime":1637949850594,"results":"485","hashOfConfig":"279"},{"size":597,"mtime":1637949850594,"results":"486","hashOfConfig":"279"},{"size":4092,"mtime":1637949850507,"results":"487","hashOfConfig":"279"},{"size":4879,"mtime":1637949850507,"results":"488","hashOfConfig":"279"},{"size":439,"mtime":1637949850563,"results":"489","hashOfConfig":"279"},{"size":172,"mtime":1637949850562,"results":"490","hashOfConfig":"279"},{"size":1082,"mtime":1637949850561,"results":"491","hashOfConfig":"279"},{"size":480,"mtime":1637949850560,"results":"492","hashOfConfig":"279"},{"size":489,"mtime":1637949850557,"results":"493","hashOfConfig":"279"},{"size":175,"mtime":1637949850557,"results":"494","hashOfConfig":"279"},{"size":10718,"mtime":1644977008905,"results":"495","hashOfConfig":"279"},{"size":308,"mtime":1643173818597,"results":"496","hashOfConfig":"279"},{"size":5316,"mtime":1637949850535,"results":"497","hashOfConfig":"279"},{"size":4169,"mtime":1637949850548,"results":"498","hashOfConfig":"279"},{"size":3057,"mtime":1637949850528,"results":"499","hashOfConfig":"279"},{"size":8510,"mtime":1637949850527,"results":"500","hashOfConfig":"279"},{"size":626,"mtime":1637949850528,"results":"501","hashOfConfig":"279"},{"size":4730,"mtime":1637949850528,"results":"502","hashOfConfig":"279"},{"size":125,"mtime":1637949850505,"results":"503","hashOfConfig":"279"},{"size":16404,"mtime":1637949850502,"results":"504","hashOfConfig":"279"},{"size":11434,"mtime":1648689278648,"results":"505","hashOfConfig":"279"},{"size":5923,"mtime":1637949850486,"results":"506","hashOfConfig":"279"},{"size":2644,"mtime":1637949850486,"results":"507","hashOfConfig":"279"},{"size":1995,"mtime":1637949850485,"results":"508","hashOfConfig":"279"},{"size":7156,"mtime":1637949850565,"results":"509","hashOfConfig":"279"},{"size":8366,"mtime":1642687306771,"results":"510","hashOfConfig":"279"},{"size":5909,"mtime":1637949850585,"results":"511","hashOfConfig":"279"},{"size":4260,"mtime":1643163943595,"results":"512","hashOfConfig":"279"},{"size":3315,"mtime":1642572141906,"results":"513","hashOfConfig":"279"},{"size":13318,"mtime":1648501436204,"results":"514","hashOfConfig":"279"},{"size":1160,"mtime":1637949850590,"results":"515","hashOfConfig":"279"},{"size":2841,"mtime":1644612332356,"results":"516","hashOfConfig":"279"},{"size":2339,"mtime":1637949850594,"results":"517","hashOfConfig":"279"},{"size":2737,"mtime":1637949850573,"results":"518","hashOfConfig":"279"},{"size":4765,"mtime":1644972154143,"results":"519","hashOfConfig":"279"},{"size":3646,"mtime":1644612332355,"results":"520","hashOfConfig":"279"},{"size":5858,"mtime":1644612332352,"results":"521","hashOfConfig":"279"},{"size":4495,"mtime":1643171439430,"results":"522","hashOfConfig":"279"},{"size":1816,"mtime":1644612332348,"results":"523","hashOfConfig":"279"},{"size":734,"mtime":1637949850558,"results":"524","hashOfConfig":"279"},{"size":903,"mtime":1637949850563,"results":"525","hashOfConfig":"279"},{"size":878,"mtime":1637949850559,"results":"526","hashOfConfig":"279"},{"size":1755,"mtime":1637949850576,"results":"527","hashOfConfig":"279"},{"size":8226,"mtime":1637949850522,"results":"528","hashOfConfig":"279"},{"size":4346,"mtime":1648689225467,"results":"529","hashOfConfig":"279"},{"size":3540,"mtime":1637949850535,"results":"530","hashOfConfig":"279"},{"size":2036,"mtime":1644167242543,"results":"531","hashOfConfig":"279"},{"size":1234,"mtime":1637949850509,"results":"532","hashOfConfig":"279"},{"size":581,"mtime":1637949850475,"results":"533","hashOfConfig":"279"},{"size":574,"mtime":1638137039676,"results":"534","hashOfConfig":"279"},{"size":8309,"mtime":1643164609120,"results":"535","hashOfConfig":"279"},{"size":2298,"mtime":1638143390434,"results":"536","hashOfConfig":"279"},{"size":3476,"mtime":1638148712111,"results":"537","hashOfConfig":"279"},{"size":1279,"mtime":1643164554780,"results":"538","hashOfConfig":"279"},{"size":4560,"mtime":1644612332349,"results":"539","hashOfConfig":"279"},{"size":4571,"mtime":1638141286505,"results":"540","hashOfConfig":"279"},{"size":1591,"mtime":1638143705323,"results":"541","hashOfConfig":"279"},{"size":7248,"mtime":1644698496421,"results":"542","hashOfConfig":"279"},{"size":4093,"mtime":1638153849582,"results":"543","hashOfConfig":"279"},{"size":555,"mtime":1643946066155,"results":"544","hashOfConfig":"279"},{"size":12458,"mtime":1646366727250,"results":"545","hashOfConfig":"279"},{"size":884,"mtime":1643946519739,"results":"546","hashOfConfig":"279"},{"size":4922,"mtime":1646354436957,"results":"547","hashOfConfig":"279"},{"size":42428,"mtime":1648688646145,"results":"548","hashOfConfig":"279"},{"size":750,"mtime":1648690824164,"results":"549","hashOfConfig":"279"},{"size":660,"mtime":1647118095762,"results":"550","hashOfConfig":"279"},{"size":551,"mtime":1647127957369,"results":"551","hashOfConfig":"279"},{"size":2556,"mtime":1648501436201,"results":"552","hashOfConfig":"279"},{"size":14214,"mtime":1648685467278,"results":"553","hashOfConfig":"279"},{"size":10045,"mtime":1648501436201,"results":"554","hashOfConfig":"279"},{"size":2643,"mtime":1648690684674,"results":"555","hashOfConfig":"279"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},"1g4yafj",{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"558"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"558"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"558"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"558"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"558"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"558"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"558"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"558"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"558"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"558"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"558"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"558"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701","usedDeprecatedRules":"558"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"704","usedDeprecatedRules":"558"},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"558"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"558"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"558"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"724","usedDeprecatedRules":"558"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"731","usedDeprecatedRules":"558"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734","usedDeprecatedRules":"558"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"558"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"750","usedDeprecatedRules":"558"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"558"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"558"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"773","usedDeprecatedRules":"558"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"778","usedDeprecatedRules":"558"},{"filePath":"779","messages":"780","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781","usedDeprecatedRules":"558"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"558"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"558"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"792","usedDeprecatedRules":"558"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"801","usedDeprecatedRules":"558"},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"558"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"558"},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"558"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"558"},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"822","usedDeprecatedRules":"558"},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"829","usedDeprecatedRules":"558"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832","usedDeprecatedRules":"558"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"839","usedDeprecatedRules":"558"},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"558"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"845","usedDeprecatedRules":"558"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"854","usedDeprecatedRules":"558"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"861","usedDeprecatedRules":"558"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"558"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873","usedDeprecatedRules":"558"},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"558"},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"899","usedDeprecatedRules":"558"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"902","usedDeprecatedRules":"558"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"558"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"908","usedDeprecatedRules":"558"},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"911","messages":"912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"915","messages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"917","messages":"918","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925","usedDeprecatedRules":"558"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"938","usedDeprecatedRules":"558"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"941","messages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"943","messages":"944","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"945","usedDeprecatedRules":"558"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948","usedDeprecatedRules":"558"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"951","usedDeprecatedRules":"558"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"960","messages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"558"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971","usedDeprecatedRules":"558"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974","usedDeprecatedRules":"558"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"979","messages":"980","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"981","usedDeprecatedRules":"558"},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"984","usedDeprecatedRules":"558"},{"filePath":"985","messages":"986","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"987","usedDeprecatedRules":"558"},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"992","usedDeprecatedRules":"558"},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"995","usedDeprecatedRules":"558"},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1002","usedDeprecatedRules":"558"},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005","usedDeprecatedRules":"558"},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010","usedDeprecatedRules":"558"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013","usedDeprecatedRules":"558"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1016","usedDeprecatedRules":"558"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021","usedDeprecatedRules":"558"},{"filePath":"1022","messages":"1023","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1024","messages":"1025","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1026","usedDeprecatedRules":"558"},{"filePath":"1027","messages":"1028","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1029","usedDeprecatedRules":"558"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1034","usedDeprecatedRules":"558"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1037","messages":"1038","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1039","usedDeprecatedRules":"558"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1042","messages":"1043","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1044","messages":"1045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1046","messages":"1047","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1048","messages":"1049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1054","messages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1058","messages":"1059","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1062","messages":"1063","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1064","usedDeprecatedRules":"558"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1067","usedDeprecatedRules":"558"},{"filePath":"1068","messages":"1069","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1070","usedDeprecatedRules":"558"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1073","usedDeprecatedRules":"558"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"558"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1079","usedDeprecatedRules":"558"},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1082","usedDeprecatedRules":"558"},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1091","usedDeprecatedRules":"558"},{"filePath":"1092","messages":"1093","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1094","usedDeprecatedRules":"558"},{"filePath":"1095","messages":"1096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1097","messages":"1098","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1099","messages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1101","messages":"1102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1103","messages":"1104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1109","messages":"1110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1111","messages":"1112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1113","messages":"1114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1117","messages":"1118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1119","messages":"1120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1121","messages":"1122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1123","messages":"1124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1125","messages":"1126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1127","messages":"1128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1129","messages":"1130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1135","messages":"1136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1137","messages":"1138","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1139","usedDeprecatedRules":"558"},{"filePath":"1140","messages":"1141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1142","usedDeprecatedRules":"558"},{"filePath":"1143","messages":"1144","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1145","usedDeprecatedRules":"558"},{"filePath":"1146","messages":"1147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1148","usedDeprecatedRules":"558"},{"filePath":"1149","messages":"1150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1153","messages":"1154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1155","messages":"1156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1157","usedDeprecatedRules":"558"},{"filePath":"1158","messages":"1159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1160","usedDeprecatedRules":"558"},{"filePath":"1161","messages":"1162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1163","usedDeprecatedRules":"558"},{"filePath":"1164","messages":"1165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1166","messages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1168","messages":"1169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1170","messages":"1171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1172","usedDeprecatedRules":"558"},{"filePath":"1173","messages":"1174","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1175","usedDeprecatedRules":"558"},{"filePath":"1176","messages":"1177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1178","usedDeprecatedRules":"558"},{"filePath":"1179","messages":"1180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1183","usedDeprecatedRules":"558"},{"filePath":"1184","messages":"1185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1186","messages":"1187","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"1188","usedDeprecatedRules":"558"},{"filePath":"1189","messages":"1190","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1191","usedDeprecatedRules":"558"},{"filePath":"1192","messages":"1193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1194","messages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1196","messages":"1197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"558"},{"filePath":"1198","messages":"1199","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1200","usedDeprecatedRules":"558"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203","usedDeprecatedRules":"558"},{"filePath":"1204","messages":"1205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206","usedDeprecatedRules":"558"},{"filePath":"1207","messages":"1208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1209","usedDeprecatedRules":"558"},"/Users/ramon/Repositories/lucy-moie/src/index.js",[],["1210","1211"],"/Users/ramon/Repositories/lucy-moie/src/App.js",[],"/Users/ramon/Repositories/lucy-moie/src/serviceWorker.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/routes/allRoutes.js",[],"/Users/ramon/Repositories/lucy-moie/src/routes/middleware/Authmiddleware.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/NonAuthLayout.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/MessageToast/ShowToastMessages.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sagas.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reducers.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Header.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Navbar.js",["1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235","1236"],"import PropTypes from \"prop-types\"\nimport React, {useEffect, useState} from \"react\"\nimport {Collapse} from \"reactstrap\"\nimport {Link, withRouter} from \"react-router-dom\"\nimport classname from \"classnames\"\n\n//i18n\nimport {withTranslation} from \"react-i18next\"\n\nimport {connect} from \"react-redux\"\n\nconst Navbar = props => {\n  const [ui, setui] = useState(false)\n  const [app, setapp] = useState(false)\n  const [email, setemail] = useState(false)\n  const [ecommerce, setecommerce] = useState(false)\n  const [contact, setcontact] = useState(false)\n  const [component, setcomponent] = useState(false)\n  const [form, setform] = useState(false)\n  const [table, settable] = useState(false)\n  const [chart, setchart] = useState(false)\n  const [icon, seticon] = useState(false)\n  const [map, setmap] = useState(false)\n  const [extra, setextra] = useState(false)\n  const [invoice, setinvoice] = useState(false)\n  const [auth, setauth] = useState(false)\n  const [utility, setutility] = useState(false)\n\n  useEffect(() => {\n    var matchingMenuItem = null\n    var ul = document.getElementById(\"navigation\")\n    var items = ul.getElementsByTagName(\"a\")\n    for (var i = 0; i < items.length; ++i) {\n      if (props.location.pathname === items[i].pathname) {\n        matchingMenuItem = items[i]\n        break\n      }\n    }\n    if (matchingMenuItem) {\n      activateParentDropdown(matchingMenuItem)\n    }\n  })\n  function activateParentDropdown(item) {\n    item.classList.add(\"active\")\n    const parent = item.parentElement\n    if (parent) {\n      parent.classList.add(\"active\") // li\n      const parent2 = parent.parentElement\n      parent2.classList.add(\"active\") // li\n      const parent3 = parent2.parentElement\n      if (parent3) {\n        parent3.classList.add(\"active\") // li\n        const parent4 = parent3.parentElement\n        if (parent4) {\n          parent4.classList.add(\"active\") // li\n          const parent5 = parent4.parentElement\n          if (parent5) {\n            parent5.classList.add(\"active\") // li\n            const parent6 = parent5.parentElement\n            if (parent6) {\n              parent6.classList.add(\"active\") // li\n            }\n          }\n        }\n      }\n    }\n    return false\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"container-fluid\">\n        <div className=\"topnav\">\n          <nav\n            className=\"navbar navbar-light navbar-expand-lg topnav-menu\"\n            id=\"navigation\"\n          >\n            <Collapse\n              isOpen={props.leftMenu}\n              className=\"navbar-collapse\"\n              id=\"topnav-menu-content\"\n            >\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <Link\n                    className=\"nav-link\"\n                    to=\"/dashboard\"\n                  >\n                    <i className=\"uil-home-alt me-2\"></i>\n                    {\" \"}{props.t(\"Dashboard\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/products\"\n                  >\n                    <i className=\"uil-box me-2\"></i>\n                    {\" \"}{props.t(\"Productos\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/categories\"\n                  >\n                    <i className=\"uil-box me-2\"></i>\n                    {\" \"}{props.t(\"Categorias\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/customers\"\n                  >\n                    <i className=\"uil-users-alt me-2\"></i>\n                    {\" \"}{props.t(\"Clientes\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/orders\"\n                  >\n                    <i className=\"uil-shopping-cart-alt me-2\"></i>\n                    {\" \"}{props.t(\"Pedidos\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item dropdown\">\n                  <Link\n                      className=\"nav-link dropdown-toggle arrow-none\"\n                      to=\"#\"\n                      onClick={e => {\n                        e.preventDefault()\n                        //setextra(!extra)\n                      }}\n                  >\n                    <i className=\"uil-cog me-2\"></i>\n                    {props.t(\"Servicios\")} <div className=\"arrow-down\"></div>\n                  </Link>\n                  <div className={classname(\"dropdown-menu\", { show: extra })}>\n                    <li className=\"nav-item\">\n                      <Link to=\"/offices\" className=\"dropdown-item\">\n                        <i className=\"uil-truck me-2\"></i>\n                        {props.t(\"Despachos\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/bills\" className=\"dropdown-item\">\n                        <i className=\"uil-bill me-2\"></i>\n                        {props.t(\"Facturación\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/postSales\" className=\"dropdown-item\">\n                        <i className=\"uil-shopping-cart-alt me-2\"></i>\n                        {props.t(\"Post Venta\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/payments\" className=\"dropdown-item\">\n                        <i className=\"uil-money-bill me-2\"></i>\n                        {props.t(\"Pagos\")}\n                      </Link>\n                    </li>\n                  </div>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link\n                      className=\"nav-link\"\n                      to=\"/reports\"\n                  >\n                    <i className=\"uil-graph-bar me-2\"></i>\n                    {\" \"}{props.t(\"Reportes\")}\n                  </Link>\n                </li>\n\n                <li className=\"nav-item dropdown\">\n                  <Link\n                      className=\"nav-link dropdown-toggle arrow-none\"\n                      to=\"#\"\n                      onClick={e => {\n                        e.preventDefault()\n                        //setextra(!extra)\n                      }}\n                  >\n                    <i className=\"uil-cog me-2\"></i>\n                    {props.t(\"Sistema\")} <div className=\"arrow-down\"></div>\n                  </Link>\n                  <div className={classname(\"dropdown-menu\", { show: extra })}>\n\n                    <div className=\"dropdown\">\n                      <Link\n                          to=\"/#\"\n                          className=\"dropdown-item dropdown-toggle arrow-none\"\n                          onClick={e => {\n                            e.preventDefault()\n                            setauth(!auth)\n                          }}\n                      >\n                        {props.t(\"Autenticación\")}{\" \"}\n                        <div className=\"arrow-down\"></div>\n                      </Link>\n                      <div\n                          className={classname(\"dropdown-menu\", {show: auth})}\n                      >\n                        <Link to=\"/users\" className=\"dropdown-item\">\n                          {props.t(\"Usuarios\")}\n                        </Link>\n                        <Link to=\"/Security\" className=\"dropdown-item\">\n                          {props.t(\"Seguridad\")}\n                        </Link>\n                      </div>\n                    </div>\n\n                    <div className=\"dropdown\">\n                      <Link\n                          className=\"dropdown-item dropdown-toggle arrow-none\"\n                          to=\"#\"\n                          onClick={e => {\n                            e.preventDefault()\n                            setutility(!utility)\n                          }}\n                      >\n                        {props.t(\"Localidades\")} <div className=\"arrow-down\"></div>\n                      </Link>\n                      <div\n                          className={classname(\"dropdown-menu\", {\n                            show: utility,\n                          })}\n                      >\n                        {/*<Link to=\"#\" className=\"dropdown-item\">\n                          {props.t(\"Localidades de entrega\")}\n                        </Link>*/}\n                        <Link to=\"/states\" className=\"dropdown-item\">\n                          {props.t(\"Estados\")}\n                        </Link>\n                        <Link to=\"/municipalities\" className=\"dropdown-item\">\n                          {props.t(\"Municipios\")}\n                        </Link>\n                      </div>\n                    </div>\n\n                    {/*<div className=\"dropdown\">\n                      <Link\n                          className=\"dropdown-item dropdown-toggle arrow-none\"\n                          to=\"#\"\n                          onClick={e => {\n                            e.preventDefault()\n                            setutility(!utility)\n                          }}\n                      >\n                        {props.t(\"Productos\")} <div className=\"arrow-down\"></div>\n                      </Link>\n                      <div\n                          className={classname(\"dropdown-menu\", {\n                            show: utility,\n                          })}\n                      >\n                        <Link to=\"/categories\" className=\"dropdown-item\">\n                          {props.t(\"Categorias\")}\n                        </Link>\n                        <Link to=\"#\" className=\"dropdown-item\">\n                          {props.t(\"Proveedores\")}\n                        </Link>\n                      </div>\n                    </div>*/}\n                    <li className=\"nav-item\">\n                      <Link to=\"/templates\" className=\"dropdown-item\">\n                          {props.t(\"Plantillas\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/billConfigs\" className=\"dropdown-item\">\n                        {props.t(\"Conf. Resoluciones\")}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to=\"/configs\" className=\"dropdown-item\">\n                          {props.t(\"Configuraciones\")}\n                      </Link>\n                    </li>\n                  </div>\n                </li>\n                </ul>\n            </Collapse>\n          </nav>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nNavbar.propTypes = {\n  leftMenu: PropTypes.any,\n  location: PropTypes.any,\n  menuOpen: PropTypes.any,\n  t: PropTypes.any,\n}\n\nconst mapStatetoProps = state => {\n  const { leftMenu } = state.Layout\n  return { leftMenu }\n}\n\nexport default withRouter(\n  connect(mapStatetoProps, {})(withTranslation()(Navbar))\n)\n","/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/Footer.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Header.js",["1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247"],"import PropTypes from 'prop-types'\nimport React, { useState } from \"react\"\n\nimport { connect } from \"react-redux\"\nimport { Form, Input, Button, Row, Col } from \"reactstrap\"\n\nimport { Link } from \"react-router-dom\"\n\n// Reactstrap\nimport { Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\"\n\n// Import menuDropdown\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\"\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\"\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\"\n\nimport logoSm from \"../../assets/images/logo-sm.png\"\nimport logoDark from \"../../assets/images/logo-dark.png\"\nimport logoLight from \"../../assets/images/logo-light.png\"\n\n// import images\nimport github from \"../../assets/images/brands/github.png\"\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\"\nimport dribbble from \"../../assets/images/brands/dribbble.png\"\nimport dropbox from \"../../assets/images/brands/dropbox.png\"\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\"\nimport slack from \"../../assets/images/brands/slack.png\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\n\n// Redux Store\nimport {\n  showRightSidebarAction,\n  toggleLeftmenu,\n  changeSidebarType,\n} from \"../../store/actions\"\nimport UsersSalesDropdown from \"../CommonForBoth/TopbarDropdown/UsersSalesDropdown\";\n\nconst Header = props => {\n  const [search, setsearch] = useState(false)\n  const [socialDrp, setsocialDrp] = useState(false)\n\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)\n\n  function toggleFullscreen() {\n    if (\n      !document.fullscreenElement &&\n      /* alternative standard method */ !document.mozFullScreenElement &&\n      !document.webkitFullscreenElement\n    ) {\n      // current working methods\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen()\n      } else if (document.documentElement.mozRequestFullScreen) {\n        document.documentElement.mozRequestFullScreen()\n      } else if (document.documentElement.webkitRequestFullscreen) {\n        document.documentElement.webkitRequestFullscreen(\n          Element.ALLOW_KEYBOARD_INPUT\n        )\n      }\n    } else {\n      if (document.cancelFullScreen) {\n        document.cancelFullScreen()\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen()\n      } else if (document.webkitCancelFullScreen) {\n        document.webkitCancelFullScreen()\n      }\n    }\n  }\n\n  function tToggle() {\n    props.toggleLeftmenu(!props.leftMenu)\n    if (props.leftSideBarType === \"default\") {\n      props.changeSidebarType(\"condensed\", isMobile)\n    } else if (props.leftSideBarType === \"condensed\") {\n      props.changeSidebarType(\"default\", isMobile)\n    }\n  }\n  return (\n    <React.Fragment>\n      <header id=\"page-topbar\">\n        <div className=\"navbar-header\">\n          <div className=\"d-flex\">\n            <div className=\"navbar-brand-box\">\n              <Link to=\"/\" className=\"logo logo-dark\">\n                <span className=\"logo-sm\">\n                  <img src={logoSm} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoDark} alt=\"\" height=\"20\" />\n                </span>\n              </Link>\n\n              <Link to=\"/\" className=\"logo logo-light\">\n                <span className=\"logo-sm\">\n                  <img src={logoSm} alt=\"\" height=\"22\" />\n                </span>\n                <span className=\"logo-lg\">\n                  <img src={logoLight} alt=\"\" height=\"20\" />\n                </span>\n              </Link>\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={() => {\n                tToggle()\n              }}\n              className=\"btn btn-sm px-3 font-size-16 header-item waves-effect vertical-menu-btn\"\n              id=\"vertical-menu-btn\"\n            >\n              <i className=\"fa fa-fw fa-bars\" />\n            </button>\n\n            <Form className=\"app-search d-none d-lg-block\">\n              <div className=\"position-relative\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder={props.t(\"Search\") + \"...\"}\n                />\n                <span className=\"uil-search\"></span>\n              </div>\n            </Form>\n          </div>\n\n          <div className=\"d-flex\">\n\n            <Dropdown\n              className=\"d-inline-block d-lg-none ms-2\"\n              onClick={() => {\n                setsearch(!search)\n              }}\n              type=\"button\"\n            >\n              <DropdownToggle\n                className=\"btn header-item noti-icon waves-effect\"\n                id=\"page-header-search-dropdown\"\n                tag=\"button\"\n              > <i className=\"uil-search\" />\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\n                <Form className=\"p-3\">\n                  <div className=\"form-group m-0\">\n                    <div className=\"input-group\">\n                      <Input type=\"text\" className=\"form-control\" placeholder=\"Search ...\" aria-label=\"Recipient's username\" />\n                      <div className=\"input-group-append\">\n                        <Button className=\"btn btn-primary\" type=\"submit\"><i className=\"mdi mdi-magnify\"></i></Button>\n                      </div>\n                    </div>\n                  </div>\n                </Form>\n              </DropdownMenu>\n            </Dropdown>\n\n{/*            <LanguageDropdown />*/}\n\n{/*            <Dropdown\n              className=\"d-none d-lg-inline-block ms-1\"\n              isOpen={socialDrp}\n              toggle={() => {\n                setsocialDrp(!socialDrp)\n              }}\n            >\n              <DropdownToggle\n                className=\"btn header-item noti-icon waves-effect\"\n                tag=\"button\"\n              >\n                <i className=\"uil-apps\"></i>\n              </DropdownToggle>\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\" right>\n                <div className=\"px-lg-2\">\n                  <Row className=\"g-0\">\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={github} alt=\"Github\" />\n                        <span>GitHub</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={bitbucket} alt=\"bitbucket\" />\n                        <span>Bitbucket</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={dribbble} alt=\"dribbble\" />\n                        <span>Dribbble</span>\n                      </Link>\n                    </Col>\n                  </Row>\n\n                  <Row className=\"g-0\">\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={dropbox} alt=\"dropbox\" />\n                        <span>Dropbox</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\n                        <span>Mail Chimp</span>\n                      </Link>\n                    </Col>\n                    <Col>\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\n                        <img src={slack} alt=\"slack\" />\n                        <span>Slack</span>\n                      </Link>\n                    </Col>\n                  </Row>\n                </div>\n              </DropdownMenu>\n            </Dropdown>*/}\n\n            <Dropdown className=\"d-none d-lg-inline-block ms-1\">\n              <button\n                type=\"button\"\n                onClick={() => {\n                  toggleFullscreen()\n                }}\n                className=\"btn header-item noti-icon waves-effect\"\n                data-toggle=\"fullscreen\"\n              >\n                <i className=\"uil-minus-path\"></i>\n              </button>\n            </Dropdown>\n\n            <UsersSalesDropdown />\n            <NotificationDropdown />\n            <ProfileMenu />\n            <div onClick={() => props.showRightSidebarAction(!props.showRightSidebar)}\n              className=\"dropdown d-inline-block\">\n              <button type=\"button\" className=\"btn header-item noti-icon right-bar-toggle waves-effect\">\n                <i className=\"uil-cog\"> </i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n    </React.Fragment>\n  )\n}\n\nHeader.propTypes = {\n  changeSidebarType: PropTypes.func,\n  leftMenu: PropTypes.any,\n  leftSideBarType: PropTypes.any,\n  showRightSidebar: PropTypes.any,\n  showRightSidebarAction: PropTypes.func,\n  t: PropTypes.any,\n  toggleLeftmenu: PropTypes.func\n}\n\nconst mapStatetoProps = state => {\n  const {\n    layoutType,\n    showRightSidebar,\n    leftMenu,\n    leftSideBarType,\n  } = state.Layout\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType }\n}\n\nexport default connect(mapStatetoProps, {\n  showRightSidebarAction,\n  toggleLeftmenu,\n  changeSidebarType,\n})(withTranslation()(Header))\n","/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Sidebar.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/Footer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/index.js",["1248"],"import React from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Breadcrumbs} from \"@material-ui/core\";\nimport MiniWidget from \"./mini-widget\";\nimport TopVendors from \"./top-vendors\";\nimport LatestTransaction from \"./latest-transaction\";\nimport TopUsers from \"./top-users\";\n\nconst series1 = [{\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54]\n}]\n\nconst options1 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: !1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst series2 = [70]\n\nconst options2 = {\n    fill: {\n        colors: ['#34c38f']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst series3 = [55]\n\nconst options3 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\n/* TODO -- hacer graficos clientes pegado a servicios */\n/* debo obtener la información de clientes registrados, ayer hoy y antier */\n/* comparar hoy, ayer y antier clientes registrados */\nconst series4 = [{\n    data: [25, 66, 200]\n}]\n\nconst options4 = {\n\n    fill: {\n        colors: ['#f1b44c']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [\"Antier\", \"Ayer\", \"Hoy\"],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: 1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst Dashboard = () => {\n    const reports = [\n        {\n            id: 1,\n            icon: \"mdi mdi-clock-five-time\",\n            title: \"Productos\",\n            value: 34152,\n            prefix: \"\",\n            suffix: \"\",\n            decimal: 0,\n            charttype: \"bar\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: \"34142\",\n            color: \"success\",\n            desc: \"disponibles\",\n            badgeValue2: \"10\",\n            color2: \"danger\",\n            desc2: \"reservado\",\n            series: series1,\n            options: options1,\n\n        },\n        {\n            id: 2,\n            icon: \"mdi mdi-arrow-up-bold\",\n            title: \"Ventas diarias\",\n            value: 5643,\n            decimal: 0,\n            charttype: \"radialBar\",\n            chartheight: 45,\n            chartwidth: 45,\n            prefix: \"$\",\n            suffix: \"\",\n            badgeValue: \"0.82%\",\n            color: \"success\",\n            desc: \"desde ayer\",\n            series: series2,\n            options: options2,\n        },\n        {\n            id: 3,\n            icon: \"mdi mdi-arrow-down-bold\",\n            title: \"Ventas semanales\",\n            value: 45254,\n            decimal: 0,\n            prefix: \"$\",\n            suffix: \"\",\n            charttype: \"radialBar\",\n            chartheight: 45,\n            chartwidth: 45,\n            badgeValue: \"6.24%\",\n            color: \"danger\",\n            desc: \"desde hace una semana\",\n            series: series3,\n            options: options3,\n        },\n        {\n            id: 4,\n            icon: \"uil-users-alt\",\n            title: \"Clientes\",\n            value: 19800,\n            decimal: 0,\n            charttype: \"line\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: \"200\",\n            color: \"success\",\n            desc: \"registrados hoy\",\n            series: series4,\n            options: options4,\n        },\n    ];\n  return (\n    <React.Fragment>\n      <div className=\"page-content\">\n        <Container fluid>\n            <Breadcrumbs title=\"Lucy Moie\" item=\"Dashboard\" />\n            <Row>\n                <MiniWidget reports={reports} />\n            </Row>\n            <Row>\n                <Col xl={4}>\n                <TopUsers/>\n                </Col>\n                <Col xl={8}>\n                    <LatestTransaction />\n                </Col>\n            </Row>\n        </Container>\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default Dashboard\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductDetail.js",["1249"],"import React, {useEffect, useState} from \"react\";\nimport {Col, Container, Row} from \"reactstrap\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct} from \"../../store/product/actions\";\nimport {Card} from \"@material-ui/core\";\nimport {STATUS} from \"../../common/constants\";\nimport Images from \"../../components/Common/Image\";\nimport {getImageByQuality, priceFormat} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {map} from \"lodash\";\nimport ProductsPendingList from \"./ProductsPending\";\n\nconst ProductDetail = (props) => {\n\n    const {getProduct, product} = props;\n    const [productData, setProductData] = useState({_status: STATUS.ACTIVE});\n    const [imgSelected, setImgSelected] = useState(0);\n\n    useEffect(() => {\n        getProduct(props.match.params.id);\n    }, [getProduct]);\n\n    useEffect(() => {\n        if (product.id) {\n            const productImage = product.productImage.length > 0 ? product.productImage : [{}];\n            setProductData({...product, _status: product.status, productImage: productImage});\n        }\n    }, [product]);\n\n    return productData.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/products\" title={productData.reference} item={\"Producto\"}/>\n\n                    <Card id={'details'} className=\"mb-3\">\n                        <Row>\n                            <Col md={4} className=\"p-3 text-center\">\n                                <div className=\"row p-2\">\n                                    <div className=\"col-3 image-left-panel\">\n                                        <div className={`nav flex-column nav-pills`} id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\n                                            {map(productData.productImage, (img, key) => (\n                                                <div key={key}\n                                                     className={`cursor-pointer nav-link ${imgSelected === key ? 'custom-active' : ''}`}\n                                                     onClick={() => (setImgSelected(key))}>\n                                                    <Images src={`${getImageByQuality(img, 'small')}`}\n                                                            alt={img.filename}\n                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col-9\">\n                                        <div className=\"tab-content position-relative\" id=\"v-pills-tabContent\">\n                                            {map(productData.productImage, (img, key) => (\n                                                <div key={key} className={`tab-pane fade ${imgSelected === key ? 'show active bg-white border-1' : ''}`} id={`product-${key}`} role=\"tabpanel\">\n                                                    <div className=\"product-img panel-bordered\">\n                                                        <Images src={`${getImageByQuality(img, 'high')}`}\n                                                                alt={img.filename}\n                                                                height={370}\n                                                                className=\"img-fluid mx-auto d-block\"\n                                                                data-zoom={`${img.path}`}/>\n                                                    </div>\n                                                    <div className=\"text-left panel-bordered p-2\">\n                                                        <div className=\"text.muted\"><b>Grupo:</b> {img.group}</div>\n                                                        <div className=\"text.muted\">{img.filename}</div>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Col>\n                            <Col md={8} className=\"p-3\">\n                                <Row>\n                                    <Col md={12}>\n                                        <h3>Código: <b className=\"text-info\">{productData.reference}</b></h3>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title\">Descripción del producto</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <li className=\"list-inline-item\">\n                                            <Link to={`/product/${productData.id}`} className=\"px-2 text-primary\">\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </Link>\n                                        </li>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <ul style={{listStyle: 'none'}}>\n                                            <li><b>Description:</b> <small>{productData.name}</small></li>\n                                            <li><b>Tipo:</b> {productData.description}</li>\n                                            <li><b>Costo:</b> {priceFormat(productData.cost, \"\", true)}</li>\n                                            <li><b>Precio:</b> {priceFormat(productData.price, \"\", true)}</li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col md={12}>\n                                        <h4 className=\"card-title\">Especificaciones</h4>\n                                    </Col>\n                                    <Col md={12}>\n                                        <ul style={{listStyle: 'none'}}>\n                                            <li><b>Tipo:</b> {productData.size?.name}</li>\n                                            <li><b>Categoria:</b> {productData.category?.name}</li>\n                                            <li><b>Material:</b> {productData.material}</li>\n                                            <li><b>Peso (g):</b> {productData.weight}</li>\n                                            <li><b>Proveedor:</b> {productData.provider}</li>\n                                        </ul>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n                    <ProductsPendingList product={productData}/>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, product, loading} = state.Product\n    return {error, product, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {getProduct})(ProductDetail)\n)\n\nProductDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Login.js",["1250","1251","1252","1253"],"import PropTypes from 'prop-types'\nimport React, {useEffect} from \"react\"\n\nimport {Alert, Card, CardBody, Col, Container, Row, Spinner} from \"reactstrap\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {Link, withRouter} from \"react-router-dom\"\n\n// availity-reactstrap-validation\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\n\n//Social Media Imports\n// import TwitterLogin from \"react-twitter-auth\"\n\n// actions\nimport {apiError, loginUser, socialLogin} from \"../../store/actions\"\n\n// import images\nimport logo from \"../../assets/images/logo-dark.png\"\nimport logolight from \"../../assets/images/logo-light.png\"\n\n//Import config\nimport {facebook, google} from \"../../config\"\n\nconst Login = (props) => {\n   // handleValidSubmit\n   const handleValidSubmit = (event, values) => {\n    props.loginUser(values, props.history)\n  }\n\n  const signIn = (res, type) => {\n    const { socialLogin } = props\n    if (type === \"google\" && res) {\n      const postData = {\n        name: res.profileObj.name,\n        email: res.profileObj.email,\n        token: res.tokenObj.access_token,\n        idToken: res.tokenId,\n      }\n      socialLogin(postData, props.history, type)\n    } else if (type === \"facebook\" && res) {\n      const postData = {\n        name: res.name,\n        email: res.email,\n        token: res.accessToken,\n        idToken: res.tokenId,\n      }\n      socialLogin(postData, props.history, type)\n    }\n  }\n\n  //handleGoogleLoginResponse\n  const googleResponse = response => {\n    signIn(response, \"google\")\n  }\n\n  //handleTwitterLoginResponse\n  // const twitterResponse = e => {}\n\n  //handleFacebookLoginResponse\n  const facebookResponse = response => {\n    signIn(response, \"facebook\")\n  }\n  const removeAttr = attr => {\n    if(document.body.hasAttribute(attr)){\n      document.body.removeAttribute(attr)\n    }\n  }\n\n  useEffect(() => {\n    document.body.className = \"authentication-bg\";\n    removeAttr('data-layout');\n    removeAttr('data-layout-size');\n\n    // remove classname when component will unmount\n    return function cleanup() {\n      document.body.className = \"\";\n    };\n  });\n\n  return (\n    <React.Fragment>\n      <div className=\"home-btn d-none d-sm-block\">\n        <Link to=\"/\" className=\"text-dark\">\n          <i className=\"mdi mdi-home-variant h2\"></i>\n        </Link>\n      </div>\n      <div className=\"account-pages my-5 pt-sm-5\">\n        <Container>\n          <Row>\n            <Col lg={12}>\n              <div className=\"text-center\">\n                <Link to=\"/\" className=\"mb-5 d-block auth-logo\">\n                  <img src={logo} alt=\"\" height=\"80\" className=\"logo logo-dark\" />\n                  <img src={logolight} alt=\"\" height=\"80\" className=\"logo logo-light\" />\n                </Link>\n              </div>\n            </Col>\n          </Row>\n          <Row className=\"align-items-center justify-content-center\">\n            <Col md={8} lg={6} xl={5}>\n              <Card>\n\n                <CardBody className=\"p-4\">\n                  <div className=\"text-center mt-2\">\n                    <h5 className=\"text-primary\">Bienvenido!</h5>\n                    <p className=\"text-muted\">Inicia sesión con Lucy Moie.</p>\n                  </div>\n                  <div className=\"p-2 mt-4\">\n                    <AvForm\n                      className=\"form-horizontal\"\n                      onValidSubmit={(e, v) => {\n                        handleValidSubmit(e, v)\n                      }}\n                    >\n                      {props.error && typeof props.error === \"string\" ? (\n                        <Alert color=\"danger\">{props.error}</Alert>\n                      ) : null}\n\n                      <div className=\"mb-3\">\n                        <AvField\n                          name=\"username\"\n                          label=\"Nombre de Usuario\"\n                          value=\"\"\n                          className=\"form-control\"\n                          placeholder=\"Login\"\n                          type=\"text\"\n                          required\n                        />\n                      </div>\n\n                      <div className=\"mb-3\">\n                      <div className=\"float-end\">\n                          <Link to=\"/forgot-password\" className=\"text-muted\">Olvidaste contraseña?</Link>\n                        </div>\n                        <AvField\n                          name=\"password\"\n                          label=\"Contraseña\"\n                          value=\"\"\n                          type=\"password\"\n                          required\n                          placeholder=\"*********\"\n                        />\n                      </div>\n\n                      <div className=\"form-check\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"form-check-input\"\n                          id=\"customControlInline\"\n                        />\n                        <label\n                          className=\"form-check-label\"\n                          htmlFor=\"customControlInline\"\n                        >\n                          Recuerdame\n                        </label>\n                      </div>\n\n                      <div className=\"mt-3\">\n                        <button\n                          className=\"btn btn-primary w-100 waves-effect waves-light\"\n                          type=\"submit\"\n                        >\n                          {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"white\"/>}\n                          Log In\n                        </button>\n                      </div>\n\n                    </AvForm>\n\n                  </div>\n                </CardBody>\n              </Card>\n              <div className=\"mt-5 text-center\">\n                <p>© {new Date().getFullYear()} Lucy Modas <i\n                  className=\"mdi mdi-heart text-danger\"></i> Moie V2.0.1\n                        </p>\n              </div>\n            </Col>\n          </Row>\n\n        </Container>\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst mapStateToProps = state => {\n  const { error, loading } = state.Login\n  return { error, loading }\n}\n\nexport default withRouter(\n  connect(mapStateToProps, { loginUser, apiError, socialLogin })(Login)\n)\n\nLogin.propTypes = {\n  error: PropTypes.any,\n  history: PropTypes.object,\n  loginUser: PropTypes.func,\n  socialLogin: PropTypes.func\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Logout.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/index.js",["1254"],"import React from \"react\"\nimport { Container } from \"reactstrap\"\nimport CustomersList from \"./CustomerList/customers-list\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {CustomerFilter} from \"./CustomerFilter\";\nconst Customer = () => {\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb path=\"/customers\" title={null} item=\"Clientes\" />\n                    <CustomersList />\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Customer\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderDetail.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/ForgetPassword.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSaleEdit/PostSaleDetail.js",["1255","1256"],"import React, {useEffect} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {COMMENT_ENTITIES, GROUPS, ORDER_STATUS} from \"../../common/constants\";\nimport Observations from \"../../components/Common/Observations\";\nimport {getOrder, refreshOrderDelivery, syncOrder, updateOrder} from \"../../store/order/actions\";\n\nconst PostSaleDetail = (props) => {\n\n    const {onGetOrder, refresh, order} = props;\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetOrder(props.match.params.id);\n        }\n    }, [onGetOrder, refresh]);\n\n    const updateDeliveryStatus = () => {\n        props.onUpdateSync(order.id, {sync: !order.orderDelivery.sync})\n    }\n\n    const refreshDeliveryStatus = () => {\n        props.onRefreshOrderDelivery(order.id);\n    }\n\n    return order.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/postSales\" title={order.name} item={`Post Venta #${order.id}`}/>\n\n                    <Row className=\"mb-2\">\n                        <Col md={12}>\n                            <div className={\"mb-3 float-md-start\"}>\n                                <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {order?.user?.name}</small>\n                            </div>\n                            <div className={\"mb-3 float-md-end\"}>\n                                <div className=\"button-items\">\n\n                                    <Tooltip placement=\"bottom\" title={order.orderDelivery.sync ? 'Desactivar' : 'Activar'} aria-label=\"add\">\n                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => updateDeliveryStatus(order)}>\n                                            <i className={`mdi mdi-${order.orderDelivery.sync ? 'delete text-danger' : 'check text-success'}`}> </i>\n                                        </button>\n                                    </Tooltip>\n                                    <Tooltip placement=\"bottom\" title=\"Refrescar\" aria-label=\"add\">\n                                        <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => refreshDeliveryStatus(order.id)}>\n                                            <i className={\"mdi mdi-refresh\"}> </i>\n                                        </button>\n                                    </Tooltip>\n\n                                </div>\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Card id={'details'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Información básica</h4>\n                                <hr/>\n                            </Col>\n                            <Col md={12}>\n                                <Row>\n                                    <Col md={6}>\n                                        <label># Pedido: </label>\n                                        <span className=\"p-1\">{order.id}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Destino: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryLocality.name}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Cliente: </label>\n                                        <span className=\"p-1\">{order.customer.name}</span>\n                                        {order.customer.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Estado del pedido: &nbsp;</label>\n                                        <StatusField color={ORDER_STATUS[order.status].color}>\n                                            {ORDER_STATUS[order.status].name}\n                                        </StatusField>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Monto del pedido: </label>\n                                        <span className=\"p-1\">{priceFormat(order.totalAmount)}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Metodo de envio: </label>\n                                        <span className=\"p-1\">{order.deliveryMethod.name}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Guia: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.tracking}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha de envío: </label>\n                                        <span className=\"p-1\">{formatDate(order.orderDelivery.deliveryDate || order.createdAt)}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Activo: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.sync ? 'SI': 'NO'}</span>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <Card id={'tracking'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Rastreo del paquete</h4>\n                                <hr/>\n                            </Col>\n                            <Col md={12}>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Estatus del envío: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryStatus || ''}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha del estatus del envío: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryStatusDate ? formatDate(order.orderDelivery.deliveryStatusDate) : null}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Ubicación estatus del envío: </label>\n                                        <span className=\"p-1\">{order.orderDelivery.deliveryCurrentLocality}</span>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <Observations\n                        entitySuggested={GROUPS.ORDER_OBSERVATIONS}\n                        entity={COMMENT_ENTITIES.ORDER}\n                        entityId={order.id}/>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, order, refresh, loading} = state.Order;\n    return {error, order, refresh, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onUpdateSync: (id, payload) => dispatch(syncOrder(id,payload)),\n    onRefreshOrderDelivery: (id) => dispatch(refreshOrderDelivery(id))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PostSaleDetail)\n)\n\nPostSaleDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/user-profile.js",["1257"],"import PropTypes from 'prop-types'\nimport React, {useEffect, useState} from \"react\"\nimport {Container,} from \"reactstrap\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router-dom\"\n\n//Import Breadcrumb\nimport Breadcrumb from \"../../components/Common/Breadcrumb\"\n// actions\nimport {changeProfilePicture, resetChangeProfilePicture} from \"../../store/actions\"\nimport {getImagePath} from \"../../common/utils\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport Images from \"../../components/Common/Image\";\nimport {Tooltip} from \"@material-ui/core\";\n\nconst UserProfile = props => {\n    const {user, onChangeProfilePicture, loading, success} = props;\n\n    const [photo, setPhoto] = useState(getImagePath(user?.photo));\n    const [changePhoto, setChangePhoto] = useState(false);\n\n    useEffect(() => {\n        if (success) {\n            setChangePhoto(false);\n        }\n    }, [success])\n\n    const changeProfilePicture = () => {\n        console.log('changeProfilePicture', photo)\n        onChangeProfilePicture({photo: photo}, props.history)\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb title=\"Mi perfil\" item={`${user.name} ${user.lastname}`}/>\n\n                    <div className=\"row mb-4\">\n                        <div className=\"col-md-offset-4 col-md-4\">\n                            <div className=\"card h-100\">\n                                <div className=\"card-body\">\n                                    <div className=\"text-center\">\n                                        <div>\n                                            <div>\n                                                <Images className=\"avatar-lg rounded-circle img-thumbnail\"\n                                                        alt={'profile image'}\n                                                        src={photo}\n                                                />\n                                            </div>\n                                            <div className=\"p-2\">\n                                                <div className=\" btn btn-primary btn-sm\">\n                                                    <DropZoneIcon\n                                                        maxFiles={1}\n                                                        mode=\"icon\"\n                                                        iconClass=\"fa fa-pencil-alt\"\n                                                        tooltip=\"Cambiar imagen\"\n                                                        onDrop={(file) => {\n                                                            setPhoto(file.base64);\n                                                            setChangePhoto(true);\n                                                        }}\n                                                    />\n                                                </div>\n\n                                                {changePhoto && (\n                                                    <Tooltip placement=\"bottom\" title=\"Guardar\" aria-label=\"add\">\n                                                        <button type={\"button\"} className=\"btn btn-primary btn-sm\" style={{marginLeft: '5px'}} onClick={() => {\n                                                            changeProfilePicture()\n                                                        }}>\n                                                            <i className=\"fa fa-save\"></i>\n                                                        </button>\n                                                    </Tooltip>\n                                                )}\n                                            </div>\n\n                                        </div>\n                                        <h5 className=\"mt-3 mb-1\">{`${user.name} ${user.lastname}`}</h5>\n                                        <p className=\"text-muted\">{user.email}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        {/*<div className=\"col-xl-8\">\n                            <div className=\"card mb-0\">\n                                <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link active\" data-bs-toggle=\"tab\" role=\"tab\">\n                                            <i className=\"uil-shopping-cart-alt me-2 font-size-20\"> </i>\n                                            <span className=\"d-none d-sm-block\">Mis Pedidos</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link\" data-bs-toggle=\"tab\" href=\"#tasks\" role=\"tab\">\n                                            <i className=\"uil uil-clipboard-notes font-size-20\"></i>\n                                            <span className=\"d-none d-sm-block\">Tasks</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className=\"nav-link\" data-bs-toggle=\"tab\" href=\"#messages\" role=\"tab\">\n                                            <i className=\"uil uil-envelope-alt font-size-20\"></i>\n                                            <span className=\"d-none d-sm-block\">Messages</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                                <div className=\"tab-content p-4\">\n                                    <div className=\"tab-pane active\" id=\"orders\" role=\"tabpanel\">\n                                        Lista de pedidos\n                                    </div>\n                                    <div className=\"tab-pane\" id=\"tasks\" role=\"tabpanel\">\n                                        <div>\n                                            task\n                                        </div>\n                                    </div>\n                                    <div className=\"tab-pane\" id=\"messages\" role=\"tabpanel\">\n                                        messages\n                                    </div>\n                                </div>\n                            </div>\n                        </div>*/}\n                    </div>\n\n                </Container>\n            </div>\n\n\n        </React.Fragment>\n    )\n}\n\nUserProfile.propTypes = {\n    editProfile: PropTypes.func,\n    error: PropTypes.any,\n    success: PropTypes.any\n}\n\nconst mapStateToProps = state => {\n\n    const {profileImage} = state.Profile\n    const {user} = state.Login\n    return {user, profileResponse: profileImage.data, error: profileImage.error, success: profileImage.success, loading: profileImage.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeProfilePicture: (data) => dispatch(changeProfilePicture(data)),\n    onResetChangeProfilePicture: () => dispatch(resetChangeProfilePicture()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(UserProfile)\n)\n","/Users/ramon/Repositories/lucy-moie/src/pages/commons/404.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Authentication/Register.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerDetail.js",["1258","1259","1260"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {getCustomer} from \"../../store/customer/actions\";\nimport OrderCardList from \"../Orders/OrderCardList\";\nimport {STATUS_COLORS, StatusField} from \"../../components/StatusField\";\nimport {ConverterCustomerStatus} from \"../Customer/customer_status\";\nimport {customerCategoryStats, customerProductStats, hasCustomerOpenOrders} from \"../../helpers/service\";\nimport {COMMENT_ENTITIES, GROUPS} from \"../../common/constants\";\nimport Observations from \"../../components/Common/Observations\";\nimport OrdersPieChart from \"./OrdersPieChart\";\nimport CategoriesPieChart from \"./CategoriesPieChart\";\n\nconst CustomerDetail = (props) => {\n\n    const {onGetCustomer, customer} = props;\n    const [customerData, setCustomerData] = useState({});\n    const [hasPendingOrders, setHasPendingOrders] = useState(false);\n    const [activeTab, setActiveTab] = useState(1);\n    const [productChart, setProductChart] = useState({series: [], labels:[]});\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetCustomer(props.match.params.id);\n            hasCustomerOpenOrders(props.match.params.id).then(resp => setHasPendingOrders(resp && resp.data && resp.data.length > 0));\n            getStats(props.match.params.id);\n        }\n    }, [onGetCustomer]);\n\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n        }\n    }, [customer]);\n\n    const getStats = (customerId) => {\n        /*customerProductStats(customerId, moment()).then(resp => {\n            const chartData = {series: [], labels:[]};\n            console.log('customerProductStats', resp)\n            if(resp){\n                resp.forEach(pc => {\n                    chartData.series.push(pc.qty);\n                    chartData.labels.push(pc.name);\n                })\n            }\n            setProductChart(chartData);\n        });*/\n    }\n\n    return customerData.id ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/customers\" title={customerData.name} item={\"Cliente\"}/>\n                    <Row className=\"mb-3\">\n                        <Col md={7}>\n                            <Card id={'details'} className=\"mb-3 p-3\">\n\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\">Descripción del cliente</h4>\n                                    </Col>\n                                    <Col md={2} className=\"text-right\">\n                                        <li className=\"list-inline-item\">\n                                            <Link to={`/customer/${customerData.id}`} className=\"px-2 text-primary\">\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </Link>\n                                        </li>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Nombre: </label>\n                                        <span className=\"p-1\">{customerData.name}</span>\n                                        {customerData.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Documento: </label>\n                                        <span className=\"p-1\">{customerData.document}</span>\n                                    </Col>\n\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12}>\n                                        <h4 className=\"card-title text-info\">Datos de contacto</h4>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Email: </label>\n                                        <span className=\"p-1\">{customerData.email}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Teléfono Celular: </label>\n                                        <span className=\"p-1\">{customerData.cellphone}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Teléfono Residencial: </label>\n                                        <span className=\"p-1\">{customerData.phone}</span>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12}>\n                                        <h4 className=\"card-title text-info\">Localidad</h4>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Departamento: </label>\n                                        <span className=\"p-1\">{customerData.state?.name}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Municipio: </label>\n                                        <span className=\"p-1\">{customerData.municipality?.name}</span>\n                                    </Col>\n                                </Row>\n                                <hr/>\n                                <Row>\n                                    <Col xs={12} className=\"footer-details\">\n                                        {customerData.hasNotification && (\n                                            <Tooltip placement=\"bottom\" title=\"Recibe notificaciones\" aria-label=\"add\">\n                                                <span className=\"badge rounded-pill bg-info font-size-12 p-2\"><i className=\"fa fa-envelope\"> </i></span>\n                                            </Tooltip>\n                                        )}\n                                        <Tooltip placement=\"bottom\" title=\"Estado\" aria-label=\"add\">\n                                            <StatusField color={customerData.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                                                {ConverterCustomerStatus(customerData.status)}\n                                            </StatusField>\n                                        </Tooltip>\n                                        <Tooltip placement=\"bottom\" title=\"Fecha creación\" aria-label=\"add\">\n                                            <small className=\"badge rounded-pill bg-light p-2\">{formatDate(customerData.createdAt)}</small>\n                                        </Tooltip>\n                                    </Col>\n                                </Row>\n                                {hasPendingOrders && (\n                                    <Row>\n                                        <Col>\n                                            <div className=\"alert alert-warning mb-0 mt-3\"><i className=\"uil uil-exclamation-triangle\"> </i> Este cliente tiene pedidos por completar.</div>\n                                        </Col>\n                                    </Row>\n                                )}\n                            </Card>\n                        </Col>\n                        <Col md={5}>\n                            <Card id={'orders'} className=\"p-3\">\n                                <OrderCardList customerId={customerData.id}/>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Card id={'order-tabs'} className=\"p-3\">\n                                <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                                    <li className=\"nav-item\">\n                                        <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                            <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                            <span className=\"d-none d-sm-block\">Historial de compras</span>\n                                        </a>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <a className={`nav-link ${activeTab === 3 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(3)}>\n                                            <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                            <span className=\"d-none d-sm-block\">Observaciones</span>\n                                        </a>\n                                    </li>\n                                </ul>\n                                <div className=\"tab-content p-3 text-muted\">\n                                    <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab1\" role=\"tabpanel\">\n                                        <Row>\n                                            <Col md={6} className=\"mb-3\">\n                                                <OrdersPieChart customerId={customerData.id}/>\n                                            </Col>\n                                            {/*<Col md={6} className=\"mb-3\">\n                                                <h4 className=\"card-title text-info\">Productos</h4>\n                                                <div style={{background: '#f6f6f6'}}>\n                                                    <PieChart data={productChart}/>\n                                                </div>\n                                            </Col>*/}\n                                            <Col md={6} className=\"mb-3\">\n                                                <CategoriesPieChart customerId={customerData.id}/>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                    <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                        <Observations\n                                            entitySuggested={GROUPS.CUSTOMER_OBSERVATIONS}\n                                            entity={COMMENT_ENTITIES.CUSTOMER}\n                                            entityId={customerData.id}/>\n                                    </div>\n                                </div>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {error, customer, loading} = state.Customer\n    const {fieldOptions} = state.FieldOption\n    return {error, customer, fieldOptions, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hasCustomerOpenOrders,\n    customerProductStats,\n    customerCategoryStats,\n    onGetCustomer: (id) => dispatch(getCustomer(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CustomerDetail)\n)\n\nCustomerDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/BillEdit/BillDetail.js",["1261"],"import React, {useEffect} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {formatDate} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {createCreditNote, getBill} from \"../../store/bill/actions\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {BILL_STATUS} from \"../../common/constants\";\n\nconst BillDetail = (props) => {\n\n    const {onGetBill, refresh, bill} = props;\n\n    useEffect(() => {\n        if (props.match.params.id) {\n            onGetBill(props.match.params.id);\n        }\n    }, [onGetBill, refresh]);\n\n    const createCreditNote = () => {\n        ConfirmationModalAction({\n            title: `¿Está seguro de generar una nota de crédito para la factura # ${bill.id}?`,\n            description: 'Esta acción no puede revertirse.',\n            id: '_creditNoteModal',\n            onConfirm: () => props.onCreateCreditNote(bill.id)\n        });\n    }\n\n    const formatLog = (_log) => {\n        if (_log) {\n            const replaceRegex = /Paso+/g;\n            _log = _log.replace(replaceRegex, \"<br /><br />Paso\");\n            return _log;\n        } else {\n            return \"No hay registros al momento\";\n\n        }\n    }\n\n    return (bill && bill.id) ? (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid className=\"pb-3\">\n                    <Breadcrumb hasBack path=\"/bills\" title={`Factura #${bill.id}`} item={`Factura #${bill.id}`}/>\n\n                    <Row className=\"mb-2\">\n                        <Col md={12}>\n                            <div className={\"mb-3 float-md-start\"}>\n\n                            </div>\n                            <div className={\"mb-3 float-md-end\"}>\n                                <div className=\"button-items\">\n                                    {!!(bill.status === BILL_STATUS.SENT && !bill.creditNote) && (\n                                        <Tooltip placement=\"bottom\" title=\"Generar nota de crédito\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => createCreditNote()}>\n                                                <i className={`uil-bill text-danger`}> </i>\n                                            </button>\n                                        </Tooltip>\n                                    )}\n                                </div>\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Card id={'details'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Información básica</h4>\n                                <hr/>\n                            </Col>\n                            <Col md={12}>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>ID: </label>\n                                        <span className=\"p-1\">{bill.id}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Número legal: </label>\n                                        <span className=\"p-1\">{bill.legalNumber}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Pedido: </label>\n                                        <span className=\"p-1\">{bill.order.id}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Estatus:</label>\n                                        <span className=\"p-1\">{bill.status}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Fecha: </label>\n                                        <span className=\"p-1\">{formatDate(bill.createdAt)}</span>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={6}>\n                                        <label>Cliente:</label>\n                                        <span className=\"p-1\">{bill.order.customer.name}</span>\n                                    </Col>\n                                    <Col md={6}>\n                                        <label>Correo: </label>\n                                        <span className=\"p-1\">{bill.order.customer.email}</span>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Card>\n\n                    <Card id={'log'} className=\"mb-3 p-3\">\n                        <Row>\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\">Bitacora Dian</h4>\n                                <hr/>\n                                <div dangerouslySetInnerHTML={{ __html: formatLog(bill.dianLog) }} />\n                            </Col>\n                        </Row>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {bill, loading, refresh, creditNote} = state.Bill\n    return {bill, refresh, loading, loadingCreditNote: creditNote.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetBill: (id) => dispatch(getBill(id)),\n    onCreateCreditNote: (id) => dispatch(createCreditNote(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BillDetail)\n)\n\nBillDetail.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/Rightbar.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/index.js",["1262"],"import React, {useEffect} from \"react\"\nimport {CardBody, Container} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCustomer} from \"../../store/customer/actions\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport CustomerForm from \"./CustomerForm\";\nimport {Card} from \"@material-ui/core\";\n\nconst CustomerEdit = (props) => {\n    const {getCustomer, customer} = props;\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getCustomer) {\n            getCustomer(props.match.params.id);\n        }\n    }, [getCustomer]);\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/customers\" title={customer.name} item={\"Cliente\"}/>\n                    <Card>\n                        <CardBody>\n                            <CustomerForm customer={customer}/>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, customer, loading} = state.Customer\n    return {error, customer, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getCustomer})(CustomerEdit)\n)\n\nCustomerEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/index.js",["1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273"],"import React, {useEffect, useState} from \"react\";\nimport {Col, Collapse, Container, Label, Media, Row} from \"reactstrap\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct, registerProduct, updateProduct} from \"../../store/product/actions\";\nimport {getFieldOptionByGroups, registerFieldOption} from \"../../store/fieldOptions/actions\";\nimport {resetProductImages} from \"../../store/productImages/actions\";\nimport {resetProductSize} from \"../../store/productSize/actions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {FieldNumber, FieldSelect, FieldSwitch, FieldText} from '../../components/Fields';\nimport {Card} from \"@material-ui/core\";\nimport {getCategories} from \"../../store/category/actions\";\nimport {getSizes} from \"../../store/sizes/actions\";\nimport {arrayToOptions} from \"../../common/converters\";\nimport {GROUPS, STATUS} from \"../../common/constants\";\nimport ProductSize from \"./ProductSize\";\nimport ProductImage from \"./ProductImage\";\nimport ProductPublish from \"./ProductPublish\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport Autocomplete from \"../../components/Fields/Autocomplete\";\n\nconst ProductEdit = (props) => {\n\n    const [isOpen, setIsOpen] = useState(true);\n    const toggle = () => setIsOpen(!isOpen);\n\n    const [isOpenDropImages, setIsOpenDropImages] = useState(false);\n    const toggleDropImages = () => setIsOpenDropImages(!isOpenDropImages);\n\n    const [isOpenWebConfig, setIsOpenWebConfig] = useState(false);\n    const toggleWebConfig = () => setIsOpenWebConfig(!isOpenWebConfig);\n\n    const [isOpenInventary, setIsOpenInventary] = useState(false);\n    const toggleInventary = () => setIsOpenInventary(!isOpenInventary);\n\n\n    const {\n        product, categories, sizes, fieldOptions, refreshProduct,\n        onGetProduct, onCreateProduct, onUpdateProduct,\n        onGetCategories, onGetSizes, onResetProductSize, onResetProductImages,\n        onGetFieldOptions, onCreateFieldOption, refreshFieldOptions\n    } = props;\n\n    const [productData, setProductData] = useState({_status: STATUS.ACTIVE, sizeModelList: []});\n\n    const [categoriesList, setCategoriesList] = useState([]);\n    const [categoryDefault, setCategoryDefault] = useState({});\n\n    const [materialsList, setMaterialsList] = useState([]);\n    const [providerList, setProviderList] = useState([]);\n    const [referenceList, setReferenceList] = useState([]);\n    const [materialDefault, setMaterialDefault] = useState({});\n    const [publication, setPublication] = useState({_status: \"true\"});\n\n    const [sizesList, setSizesList] = useState([]);\n    const [sizeDefault, setSizeDefault] = useState({});\n    const [sizeSelected, setSizeSelected] = useState(null);\n\n    const isEdit = props.match.params.id;\n    const hasOrders = false;\n\n    //Carga inicial\n    useEffect(() => {\n        if (isEdit && onGetProduct) {\n            onGetProduct(props.match.params.id);\n        }\n        onGetCategories();\n        onGetSizes();\n        onGetFieldOptions();\n    }, [onGetProduct]);\n\n    useEffect(() => {\n        if (product.id) {\n            onGetProduct(product.id);\n        }\n        onResetProductSize();\n        onResetProductImages();\n    }, [refreshProduct]);\n\n    //cargar info relacionada al prod\n    useEffect(() => {\n        if (product.id) {\n            setProductData({...product, _status: product.status});\n            setCategoryDefault(product.category?.id || null);\n            setSizeDefault(product.size?.id || null);\n            if (!isEdit) {\n                if (product.productSize.length === 0) {\n                    setIsOpen(false)\n                    setIsOpenInventary(true);\n                } else if (product.productImage.length === 0) {\n                    setIsOpen(false)\n                    setIsOpenInventary(false);\n                    setIsOpenDropImages(true);\n                }\n            }\n        }\n        //console.log('Product', product)\n    }, [product]);\n\n    useEffect(() => {\n        if (categories && categories.length > 0) {\n            setCategoriesList(arrayToOptions(categories));\n        } else {\n            setCategoriesList([]);\n        }\n    }, [categories])\n\n    useEffect(() => {\n        if (sizes && sizes.length > 0) {\n            const sizeList = arrayToOptions(sizes);\n            if (product.size && product.size.id) {\n                const defaultSize = sizeList.filter(m => m.value === product.size.id)[0];\n                setSizeDefault(defaultSize.value);\n            }\n            setSizesList(sizeList);\n        } else {\n            setSizesList([]);\n        }\n    }, [sizes])\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            setMaterialsList(filterFieldOptions(fieldOptions, GROUPS.MATERIALS).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n            setProviderList(filterFieldOptions(fieldOptions, GROUPS.PROVIDERS));\n            setReferenceList(filterFieldOptions(fieldOptions, GROUPS.REFERENCE_KEY).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n        } else {\n            setMaterialsList([]);\n            setProviderList([]);\n            setReferenceList([]);\n        }\n    }, [fieldOptions])\n\n    useEffect(() => {\n        if (refreshFieldOptions) {\n            onGetFieldOptions();\n        }\n    }, [refreshFieldOptions])\n\n    const filterFieldOptions = (arr, groups) => {\n        return arr.filter(op => (op.groups === groups)).map(op => ({name: op.name}));\n    }\n\n    const handleValidSubmit = (event, values) => {\n        const data = {\n            ...values,\n            material: values.material && values.material.value,\n            category: values.category.value,\n            size: values.size.value,\n            status: values._status,\n            weight: values.weight ? Number.parseFloat(values.weight) : 0,\n            price: Number.parseFloat(values.price),\n            providerReference: values.providerReference,\n            cost: Number.parseFloat(values.cost),\n        };\n\n        delete data._status;\n\n        if (values.referenceKey && values.referenceKey.value) {\n            data.referenceKey = values.referenceKey.value;\n        }\n\n        if (!isEdit) {\n            data.status = 1;\n            onCreateProduct(data, props.history)\n        } else {\n            onUpdateProduct(props.match.params.id, data, props.history)\n        }\n\n        if (!materialsList.some(op => op.name === data.material)) {\n            onCreateFieldOption({groups: GROUPS.MATERIALS, name: data.material, value: data.material}, props.history);\n        }\n        if (!providerList.some(op => op.name === data.provider)) {\n            onCreateFieldOption({groups: GROUPS.PROVIDERS, name: data.provider, value: data.provider}, props.history);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/products\" title={productData.reference} item={\"Producto\"}/>\n\n                    <Row>\n                        <Col md={12}>\n                            <Card id={'main-data'}>\n                                <Link to=\"#\" onClick={toggle} className=\"text-dark\">\n                                    <div className=\"p-4\">\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        01\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <Row>\n                                                    <Col md={8}>\n                                                        <h5 className=\"font-size-16 mb-1\">General</h5>\n                                                        <p className=\"text-muted text-truncate mb-0\">Datos principales del producto</p>\n                                                    </Col>\n                                                    {isEdit && (\n                                                        <Col md={4}>\n                                                            <div className=\"text-right pr-10\">\n                                                                <h5 className=\"font-size-16 mb-1\">Código</h5>\n                                                                <b className=\"font-size-18 text-info\">{productData.reference}</b>\n                                                            </div>\n                                                        </Col>\n                                                    )}\n                                                </Row>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> </i>\n                                        </Media>\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpen}>\n                                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                            onValidSubmit={(e, v) => {\n                                                handleValidSubmit(e, v)\n                                            }}>\n                                        <div className=\"p-4 border-top\">\n                                            <Row>\n                                                {!(product && product.id) && (\n                                                    <Col md={2}>\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_referenceKey\">Ref. <span className=\"text-danger\">*</span></Label>\n                                                            <FieldSelect\n                                                                id={\"field_referenceKey\"}\n                                                                name={\"referenceKey\"}\n                                                                options={referenceList}\n                                                                defaultValue={productData.referenceKey}\n                                                                required\n                                                                isSearchable\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                                <Col md={10}>\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={productData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                                {(product && product.id) && (\n                                                    <Col md={2}>\n                                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                                            <div className={\"float-end\"}>\n                                                                <Row>\n                                                                    <Col>\n                                                                        ¿Activo?\n                                                                    </Col>\n                                                                    <Col>\n                                                                        <FieldSwitch defaultValue={productData._status} name={\"_status\"}/>\n                                                                    </Col>\n                                                                </Row>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label className=\"control-label\">Categoria <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id={\"field_category\"}\n                                                            name={\"category\"}\n                                                            options={categoriesList}\n                                                            defaultValue={categoryDefault}\n                                                            required\n                                                            disabled={hasOrders}\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <div className=\"mb-0\">\n                                                        <Label className=\"control-label\">Tallas</Label>\n                                                        <FieldSelect\n                                                            id={\"field_sizes\"}\n                                                            name={\"size\"}\n                                                            options={sizesList}\n                                                            defaultValue={sizeDefault}\n                                                            onChange={(e) => {\n                                                                console.log(\"SIZE SELECTED\", sizes.find(s => s.id === e.value));\n                                                                setSizeSelected(sizes.find(s => s.id === e.value));\n                                                            }}\n                                                            disabled={hasOrders}\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                {((sizeSelected && sizeSelected.name == \"Unica\") || (!sizeSelected && sizeDefault == 9)) && (\n                                                    <Col md=\"3\">\n                                                        <div className=\"mb-0\">\n                                                            <Label className=\"control-label\">Sirve  para</Label>\n                                                            <FieldText\n                                                                id={\"size_descripcion\"}\n                                                                name={\"sizeDescription\"}\n                                                                value={productData.sizeDescription}\n                                                                minLength={1}\n                                                                maxLength={30}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                                <Col md=\"5\">\n                                                    <div className=\"mb-3\">\n                                                        <Label className=\"control-label\">Material</Label>\n                                                        <FieldSelect\n                                                            id={\"field_material\"}\n                                                            name={\"material\"}\n                                                            options={materialsList}\n                                                            defaultValue={productData.material}\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_provider\">Proveedor</Label>\n                                                        <Autocomplete\n                                                            id={\"field_provider\"}\n                                                            name={\"provider\"}\n                                                            options={providerList}\n                                                            defaultValue={productData.provider}\n                                                            onChange={(provider) => setProductData({...productData, provider: provider})}\n                                                        />\n                                                    </div>\n                                                </Col>\n\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_provider\">Referencia Proveedor</Label>\n                                                        <FieldText\n                                                            id={\"field_provider_reference\"}\n                                                            name={\"providerReference\"}\n                                                            value={productData.providerReference}\n                                                            minLength={1}\n                                                            maxLength={12}\n                                                        />\n                                                    </div>\n                                                </Col>\n\n                                                <Col md=\"4\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"weight\">Peso (g) </Label>\n                                                        <FieldNumber\n                                                            id={\"field_weight\"}\n                                                            name={\"weight\"}\n                                                            value={productData.weight}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"cost\">Costo <span className=\"text-danger\">*</span></Label>\n                                                        <FieldNumber\n                                                            id={\"field_cost\"}\n                                                            name={\"cost\"}\n                                                            value={productData.cost}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"4\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"price\">Precio <span className=\"text-danger\">*</span></Label>\n                                                        <FieldNumber\n                                                            id={\"field_price\"}\n                                                            name={\"price\"}\n                                                            value={productData.price}\n                                                            required/>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-0\">\n                                                        <Label htmlFor=\"description\">Nombre en el Catálogo</Label>\n                                                        <FieldText\n                                                            id={\"field_description\"}\n                                                            name={\"description\"}\n                                                            value={productData.description}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row className=\"pt-2\">\n                                                <Col md={12} className=\"text-right\">\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    </AvForm>\n\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12} className=\"mt-2\">\n                            <Card id={'inventory'}>\n                                <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleInventary}>\n                                    <div className=\"p-4\">\n\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        02\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <h5 className=\"font-size-16 mb-1\">Inventario</h5>\n                                                <p className=\"text-muted text-truncate mb-0\">Agregue existencia a su producto.</p>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> < /i>\n                                        </Media>\n\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpenInventary}>\n                                    <div className=\"p-4 border-top\">\n                                        {(productData.id && productData.size) ? (\n                                            <>\n                                                <h4>{productData.size ? productData.size.name : ''}</h4>\n                                                <p>Ingrese color y tallas para el producto.</p>\n                                                <ProductSize template={productData.size} product={productData}/>\n                                            </>\n                                        ) : (\n                                            <div className=\"alert alert-warning\">Debe agregar una talla al producto.</div>\n                                        )}\n                                    </div>\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12}>\n                            <Card id={'images'} className=\"mt-2 disabled\">\n                                <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleDropImages}>\n                                    <div className=\"p-4\">\n\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        03\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <h5 className=\"font-size-16 mb-1\">Imagenes</h5>\n                                                <p className=\"text-muted text-truncate mb-0\">Agrega las imagenes a su producto.</p>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"></i>\n                                        </Media>\n\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpenDropImages}>\n                                    <ProductImage product={product}/>\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={12}>\n                            <Card id={'publication'} className=\"mt-2\">\n                                <Link to=\"#\" className=\"text-dark collapsed\" onClick={toggleWebConfig}>\n                                    <div className=\"p-4\">\n\n                                        <Media className=\"d-flex align-items-center\">\n                                            <div className=\"me-3\">\n                                                <div className=\"avatar-xs\">\n                                                    <div className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\n                                                        04\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <h5 className=\"font-size-16 mb-1\">Publicación</h5>\n                                                <p className=\"text-muted text-truncate mb-0\">Configuraciones para la publicación en la Página Web.</p>\n                                            </div>\n                                            <i className=\"mdi mdi-chevron-up accor-down-icon font-size-24\"> </i>\n                                        </Media>\n\n                                    </div>\n                                </Link>\n                                <Collapse isOpen={isOpenWebConfig}>\n                                    {productData.id && (\n                                        <ProductPublish product={product}/>\n                                    )}\n                                </Collapse>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {error, product, loading} = state.Product\n    const {fieldOptions, refresh} = state.FieldOption\n    const refreshProduct = state.ProductSize.refresh || state.ProductImage.refresh || state.Product.refresh;\n    const {categories} = state.Category\n    const {sizes} = state.Sizes\n    return {error, product, categories, sizes, fieldOptions, loading, refreshProduct, refreshFieldOptions: refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetCategories: (conditional = null, limit = 100, page) => dispatch(getCategories(conditional, limit, page)),\n    onGetSizes: (conditional = null, limit = 100, page) => dispatch(getSizes(conditional, limit, page)),\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.MATERIALS, GROUPS.PROVIDERS, GROUPS.REFERENCE_KEY], limit, page)),\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onCreateProduct: (data, history) => dispatch(registerProduct(data, history)),\n    onUpdateProduct: (data, history) => dispatch(updateProduct(data, history)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n    onResetProductSize: () => dispatch(resetProductSize()),\n    onResetProductImages: () => dispatch(resetProductImages()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductEdit)\n)\n\nProductEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productSize/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Product/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Category/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/State/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/MunicipalityEdit/index.js",["1274","1275","1276","1277","1278","1279"],"import React, {useState, useEffect} from \"react\"\nimport {CardBody, Col, Container, Label, Row, Spinner} from \"reactstrap\"\nimport {AvForm, AvField} from \"availity-reactstrap-validation\"\nimport {Button, Card} from \"@material-ui/core\";\nimport {withRouter, Link} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getMunicipality, registerMunicipality, updateMunicipality, getStates} from \"../../store/location/actions\";\nimport {FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport {statesToOptions} from \"../../common/converters\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst MunicipalityEdit = (props) => {\n    const {getMunicipality,getStates, municipality, states} = props;\n    const [municipalityData, setMunicipalityData] = useState({_status: STATUS.ACTIVE});\n    const [statesOptions, setStates] = useState([]);\n    const [municipalityDefault, setMunicipalityDefault] = useState(null);\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getMunicipality) {\n            getMunicipality(props.match.params.id);\n        }\n        getStates();\n    }, [getMunicipality]);\n\n    //cargar la información del municipio\n    useEffect(() => {\n        if (municipality.id && isEdit) {\n            setMunicipalityData({...municipality, _status:municipality.status});\n\n            const defaultMunicipality = municipality.state?.id || null;\n            setMunicipalityDefault(defaultMunicipality);\n        }\n    }, [municipality]);\n\n    //cargar estados\n    useEffect(() => {\n        if (states && states.length > 0) {\n            setStates(statesToOptions(states));\n        } else {\n            setStates([]);\n        }\n    }, [states]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status, state: values.state.value};\n        delete data._status;\n        if (!isEdit) {\n            props.registerMunicipality(data, props.history)\n        } else {\n            props.updateMunicipality(props.match.params.id, data, props.history)\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/municipalities\" title={municipalityData.name} item={\"Estado\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={municipalityData._status} name={\"_status\"}/>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"state\">Estado <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        name={\"state\"}\n                                                        options={statesOptions}\n                                                        defaultValue={municipalityDefault}\n                                                        required\n                                                        isSearchable\n                                                    />\n                                                </div>\n                                            </Col>\n\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={municipalityData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"4\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Código DIAN <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_dianCode\"}\n                                                        name={\"dianCode\"}\n                                                        value={municipalityData.dianCode}\n                                                        minLength={3}\n                                                        maxLength={10}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, municipality, states, loading} = state.Location\n    return {error, municipality, states, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getStates, registerMunicipality, updateMunicipality, getMunicipality})(MunicipalityEdit)\n)\n\nMunicipalityEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/CategoryEdit/index.js",["1280","1281"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCategory, registerCategory, updateCategory} from \"../../store/category/actions\";\nimport {FieldNumber, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst CategoryEdit = (props) => {\n    const {getCategory, category} = props;\n    const [categoryData, setCategory] = useState({_status:STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getCategory) {\n            getCategory(props.match.params.id);\n        }\n    }, [getCategory]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (category.id && isEdit) {\n            setCategory({...category, _status:category.status});\n        }\n    }, [category]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status:values._status};\n        delete data._status;\n        if (!isEdit) {\n            props.registerCategory(data, props.history)\n        } else {\n            props.updateCategory(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/categories\" title={categoryData.name} item={\"Categoria\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                        <Row>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={categoryData._status} name={\"_status\"} />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={categoryData.name}\n                                                        minLength={3}\n                                                        maxLength={150}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"4\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_discount\">Descuento<span className=\"text-danger\">*</span></Label>\n                                                    <FieldNumber\n                                                        id={\"field_discount\"}\n                                                        name={\"discountPercent\"}\n                                                        value={categoryData.discountPercent}\n                                                        required/>\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, category, loading} = state.Category\n    return {error, category, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerCategory, updateCategory, getCategory})(CategoryEdit)\n)\n\nCategoryEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/UserEdit/index.js",["1282","1283","1284"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getUser, registerUser, updateUser} from \"../../store/user/actions\";\nimport {FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {fetchDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {sortList} from \"../../common/utils\";\n\nconst UserEdit = (props) => {\n    const {registerUser, updateUser, getUser, user} = props;\n    const [userData, setUserData] = useState({_status: STATUS.ACTIVE});\n    const [rolesOptions, setRolesOptions] = useState([]);\n    const [roles, setRoles] = useState([]);//group\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getUser) {\n            getRoles();\n            getUser(props.match.params.id);\n        }\n    }, [getUser]);\n\n    useEffect(() => {\n        if (user.id && isEdit) {\n            let rol = null;\n            if (user.securityRol) {\n                rol = {label: user.securityRol.name, value: user.securityRol.id}\n            }\n            setUserData({...user, _status: user.status, rol});\n        }\n    }, [user]);\n\n    const getRoles = () => {\n        fetchDataApi(url.SECURITY_ROLES).then(resp => {\n            let list = sortList(resp.data, 'name');\n            setRoles(list);\n            setRolesOptions(list.map(p => ({label: p.name, value: p.id})));\n        })\n    };\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status};\n        if (data.rol) {\n            data.securityRol = {id: data.rol.value};\n        }\n        delete data.rol;\n        delete data._status;\n        if (!isEdit) {\n            registerUser(data, props.history)\n        } else {\n            updateUser(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/users\" title={userData.name} item={\"Usuario\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                        <Row className=\"mb-5\">\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={userData._status} name={\"_status\"}/>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"name\"}\n                                                        name={\"name\"}\n                                                        value={userData.name}\n                                                        minLength={1}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"lastname\">Apellido <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"lastname\"}\n                                                        name={\"lastname\"}\n                                                        value={userData.lastname}\n                                                        minLength={1}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"email\">Correo</Label>\n                                                    <FieldText\n                                                        id={\"email\"}\n                                                        name={\"email\"}\n                                                        value={userData.email}\n                                                        maxLength={300}\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"lastname\">Usuario <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"username\"}\n                                                        name={\"username\"}\n                                                        value={userData.username}\n                                                        minLength={1}\n                                                        maxLength={45}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"rol\">Rol <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        id={\"rol\"}\n                                                        name={\"rol\"}\n                                                        options={rolesOptions}\n                                                        defaultValue={userData.rol && userData.rol.value}\n                                                        isSearchable\n                                                    />\n                                                </div>\n                                            </Col>\n                                            {!userData.id && (\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"password\">Clave</Label>\n                                                        <FieldText\n                                                            id={\"password\"}\n                                                            name={\"password\"}\n                                                            type=\"password\"\n                                                            value={userData.password}\n                                                            maxLength={50}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            )}\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading}/>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, user, loading} = state.User\n    return {error, user, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerUser, updateUser, getUser})(UserEdit)\n)\n\nUserEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/StateEdit/index.js",["1285","1286","1287","1288","1289","1290"],"import React, {useState, useEffect} from \"react\"\nimport {CardBody, Col, Container, Label, Row, Spinner} from \"reactstrap\"\nimport {AvForm, AvField} from \"availity-reactstrap-validation\"\nimport {Button, Card} from \"@material-ui/core\";\nimport {withRouter, Link} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getState, registerState, updateState} from \"../../store/location/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst StateEdit = (props) => {\n    const {getState, estado} = props;\n    const [estadoData, setEstadoData] = useState({_status:STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getState) {\n            getState(props.match.params.id);\n        }\n    }, [getState]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (estado.id && isEdit) {\n            setEstadoData({...estado, _status:estado.status});\n        }\n    }, [estado]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({},values, {status:values._status});\n        delete data._status;\n        if (!isEdit) {\n            props.registerState(data, props.history)\n        } else {\n            props.updateState(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/states\" title={estadoData.name} item={\"Estado\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"8\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={estadoData._status} name={\"_status\"} />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={estadoData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Código DIAN <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_dianCode\"}\n                                                        name={\"dianCode\"}\n                                                        value={estadoData.dianCode}\n                                                        minLength={2}\n                                                        maxLength={10}\n                                                        required\n                                                        />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Código ISO <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_isoCode\"}\n                                                        name={\"isoCode\"}\n                                                        value={estadoData.isoCode}\n                                                        minLength={3}\n                                                        maxLength={5}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading} />\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.Location\n    return {error, estado: state.Location.state, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerState, updateState, getState})(StateEdit)\n)\n\nStateEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/User/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/TemplateEdit/index.js",["1291","1292"],"import React, {useEffect, useState, useRef} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getTemplate, registersTemplate, updateTemplate} from \"../../store/template/actions\";\nimport {FieldSwitch, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {GROUPS, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport useHookValue from \"../../components/mentions/useHookValue\";\nimport MultiMention from \"../../components/mentions/MultiMention\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\nimport { Editor } from '@tinymce/tinymce-react';\n\n\nconst TemplateEdit = (props) => {\n    const {onGetTemplate, template, onGetMentions, mentions} = props;\n    const [templateData, setTemplateData] = useState({_status: STATUS.ACTIVE});\n    const [dataMentions, setDataMentions] = useState([]);\n    const isEdit = props.match.params.id;\n    const [sourceValue, onSourceChange, onSourceAdd, setSourceValue] = useHookValue('');\n\n    const editorRef = useRef(null);\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && onGetTemplate) {\n            onGetTemplate(props.match.params.id);\n            onGetMentions();\n        }\n    }, [onGetTemplate]);\n\n    //cargar la información de plantilla\n    useEffect(() => {\n        if (template.id && isEdit) {\n            setTemplateData({...template, _status: template.status});\n            setSourceValue(template.template);\n        }\n    }, [template]);\n\n    useEffect(() => {\n        if (mentions && mentions.length > 0) {\n            setDataMentions(mentions.map(m => ({id: '{{' + m.value + '}}', display: m.value,})))\n        }\n    }, [mentions]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = Object.assign({}, values, {status: values._status, template: sourceValue});\n        delete data._status;\n\n        if (!isEdit) {\n            props.onRegistersTemplate(data, props.history)\n        } else {\n            props.onUpdateTemplate(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/templates\" title={templateData.reference} item={\"Plantilla\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}>\n                        <Row>\n                            <Col xl=\"12\">\n                                <Card>\n                                    <CardBody>\n                                        <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={templateData._status} name={\"_status\"}/>\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Referencia <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_reference\"}\n                                                        name={\"reference\"}\n                                                        value={templateData.reference}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md=\"12\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_description\"}\n                                                        name={\"description\"}\n                                                        value={templateData.description}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        {!templateData.hasEditor ? (\n                                                <Row>\n                                                    <Col md=\"12\">\n                                                        <div className=\"mb-3\">\n                                                            <Label htmlFor=\"field_name\">Contenido <span\n                                                                className=\"text-danger\">*</span></Label>\n                                                            <MultiMention\n                                                                value={sourceValue}\n                                                                data={dataMentions}\n                                                                onChange={onSourceChange}\n                                                                onAdd={onSourceAdd}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                            ) :\n                                            <Row>\n                                                <Editor\n                                                    onInit={(evt, editor) => editorRef.current = editor}\n                                                    initialValue={sourceValue}\n                                                    onBlur={newContent => setSourceValue(newContent) && onSourceChange}\n                                                    init={{\n                                                        height: 500,\n                                                        menubar: false,\n                                                        plugins: \"code\",\n                                                        toolbar: 'undo redo | formatselect | code |',\n                                                        content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\n                                                        apply_source_formatting : true,\n                                                        cleanup : false,\n                                                        cleanup_on_startup : false\n                                                    }}\n                                                />\n                                            </Row>\n                                        }\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading}/>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapTemplateToProps = state => {\n    const {error, loading, template} = state.Template\n    const {fieldOptions} = state.FieldOption\n    return {error, template, loading, mentions: fieldOptions}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onRegistersTemplate: (data, history) => dispatch(registersTemplate(data, history)),\n    onUpdateTemplate: (id, data, history) => dispatch(updateTemplate(id, data, history)),\n    onGetTemplate: (id) => dispatch(getTemplate(id)),\n    onGetMentions: (conditional = null, limit = 100, page) => dispatch(getFieldOptionByGroups([GROUPS.TEMPLATE_MENTIONS], limit, page)),\n})\n\nexport default withRouter(connect(mapTemplateToProps, mapDispatchToProps)(TemplateEdit))\n\nTemplateEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/OfficesEdit/index.js",["1293","1294","1295","1296","1297","1298","1299","1300","1301"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {addOrderOffice, confirmOffice, deleteOffice, deleteOrderOffice, getOffice, printOfficeReport, registerOffice, resetPrintOfficeReport, updateOffice} from \"../../store/office/actions\";\nimport {FieldDate, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {DATE_FORMAT, formatDate, printPartOfPage} from \"../../common/utils\";\nimport {DELIVERY_METHODS, DELIVERY_TYPES, GROUPS, OFFICE_STATUS, ORDERS_ENUM, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {ConverterDeliveryType, getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods, getOrdersByOffice} from \"../../store/order/actions\";\nimport {getFieldOptionByGroups} from \"../../store/fieldOptions/actions\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderList from \"../Orders/orderList\";\nimport Conditionals from \"../../common/conditionals\";\nimport {fileOfficeTemplate, officePdfApi} from \"../../helpers/backend_helper\";\n\nconst OfficeEdit = (props) => {\n    const {getOffice, office, deliveryMethods, orders, printReportData, refresh, refreshOrders, deleteOrderOffice} = props;\n    const [officeData, setOfficeData] = useState({_status: STATUS.ACTIVE});\n    const isEdit = props.match.params.id;\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryTypes, setDeliveryTypes] = useState(null);\n    const [deliveryMethod, setDeliveryMethod] = useState(null);\n    const [deliveryType, setDeliveryType] = useState(null);\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [ordersList, setOrdersList] = useState([]);\n    const [reportBody, setReportBody] = useState(null);\n    const [editable, setEditable] = useState(isEdit ? false : true);\n\n\n    //carga inicial\n    useEffect(() => {\n        setDeliveryTypes([getEmptyOptions(), ...DELIVERY_TYPES.map(dt => ({label: dt.label, value: dt.id}))]);\n\n        if (isEdit && getOffice) {\n            getOffice(props.match.params.id);\n        }\n\n        onGetFieldOptions();\n        onGetDeliveryMethods();\n    }, [getOffice]);\n\n    useEffect(() => {\n        if (reportBody && reportBody.length > 0) {\n            let html = null;\n            reportBody.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printPartOfPage(html);\n        }\n    }, [reportBody]);\n\n    useEffect(() => {\n        if (orders && isEdit) {\n            setOrdersList(orders);\n        }\n    }, [orders]);\n\n    useEffect(() => {\n        if (!reportBody && printReportData && printReportData.data && printReportData.data.batch) {\n            setReportBody(printReportData.data.batch.body);\n            props.resetPrintOfficeReport();\n        }\n    }, [printReportData.data]);\n\n    useEffect(() => {\n        if (office.id && isEdit) {\n            setOfficeData({...office, _status: office.status});\n            setDeliveryType(office.type);\n            setDeliveryMethod(office.deliveryMethod);\n            getOrdersByConditional();\n        }\n    }, [office]);\n\n    useEffect(() => {\n        getOrdersByConditional();\n    }, [refreshOrders, refresh])\n\n    useEffect(() => {\n        console.log('deliveryMethods', deliveryMethods)\n        if (deliveryMethods) {\n\n            const list = deliveryMethods || [];\n            const ot = deliveryType + '';\n            setDeliveryMethodList([getEmptyOptions(), ...list.filter(op => (op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        }\n    }, [deliveryType, deliveryMethods]);\n\n    const handleValidSubmit = (event, values) => {\n\n        const selectedDelivery = deliveryMethods.filter(item => item.code === values?.deliveryMethod?.value)[0];\n        if(!selectedDelivery){\n            return false;\n        }\n\n        const data = {\n            ...values,\n            status: values._status,\n            deliveryMethod: selectedDelivery.id,\n            type: values.deliveryType.value,\n            batchDate: values.batchDate[0] ? formatDate(values.batchDate[0], DATE_FORMAT.ONLY_DATE) : null\n        };\n        if(values.batchDate && values.batchDate.length === 1){\n            data.batchDate= values.batchDate[0] ? formatDate(values.batchDate[0], DATE_FORMAT.ONLY_DATE) : null\n        }\n        if(values.batchDate && values.batchDate.length > 1){\n            data.batchDate= values.batchDate ? formatDate(values.batchDate, DATE_FORMAT.ONLY_DATE) : null\n        }\n        delete data._status;\n        delete data.deliveryType;\n\n        if (!isEdit) {\n            props.registerOffice(data, props.history)\n        } else {\n            props.updateOffice(props.match.params.id, data, props.history)\n        }\n    }\n\n    const getOrdersByConditional = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"office\", props.match.params.id, Conditionals.OPERATORS.EQUAL);\n        onGetOrders(conditions);\n    };\n\n    const getOrdersByConditionalAndFilter = (filter) => {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"office\", props.match.params.id, Conditionals.OPERATORS.EQUAL);\n\n            if(filter.includes(\"c:\")){\n                filter = filter.replace(\"c:\", \"\");\n                conditions.add(\"customer.name\", filter, Conditionals.OPERATORS.LIKE);\n            } else if(filter.includes(\"cc:\")) {\n                filter = filter.replace(\"cc:\", \"\");\n                conditions.add(\"customer.name\", filter, Conditionals.OPERATORS.EQUAL);\n            } else if(filter.includes(\"cemail:\")) {\n                filter = filter.replace(\"cemail:\", \"\");\n                conditions.add(\"customer.email\", filter, Conditionals.OPERATORS.EQUAL);\n            } else if(filter.includes(\"p:\")){\n                filter = filter.replace(\"p:\", \"\");\n                conditions.add(\"id\", filter, Conditionals.OPERATORS.LIKE);\n            } else if(filter.includes(\"w:\")){\n                filter = filter.replace(\"w:\", \"\");\n                conditions.add(\"totalWeight\", filter, Conditionals.OPERATORS.LIKE);\n            } else {\n                conditions.add(\"customer.name\", filter, Conditionals.OPERATORS.LIKE);\n            }\n            onGetOrders(conditions);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este Despacho?',\n            description: 'Usted está eliminado este Despacho, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id, props.history)\n        });\n    };\n\n    const onConfirm = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea confirmar el despacho?',\n            description: 'Usted está confirmando este Despacho, al confirmar no podrá modificar nuevamente.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmOffice(id, props.history)\n        });\n    };\n    const onCloseModal = () => {\n        getOrdersByConditional();\n        setOpenOrdersModal(false);\n    };\n\n    const onAcceptModal = (conditionals) => {\n        getOrdersByConditional();\n        props.addOrderOffice(officeData.id, {id: 123}, conditionals, props.history);\n        setOpenOrdersModal(false);\n    };\n\n    const addOrders = () => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"status\", ORDERS_ENUM.PRINTED, Conditionals.OPERATORS.EQUAL);//IMPRESA\n        conditions.add(\"deliveryMethod.id\", office.deliveryMethod.id, Conditionals.OPERATORS.EQUAL);\n        conditions.add(\"orderDelivery.deliveryType\", office.type, Conditionals.OPERATORS.EQUAL);\n        conditions.add('office', '', Conditionals.OPERATORS.NULL);\n        console.log('conditions', conditions);\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const deleteOrders = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el pedido?',\n            description: 'Usted está confirmando eliminar este pedido, al confirmar no podrá recuperarlo nuevamente.',\n            id: '_clienteModal',\n            onConfirm: () => deleteOrderOffice(office.id , {order: id})\n        });\n    }\n\n    const onConfirmDelete = (id, history) => props.deleteOffice(id, history);\n    const onConfirmOffice = (id, history) => props.confirmOffice(id, history);\n    const onGetDeliveryMethods = (conditional = null, limit = 50, page) => props.getDeliveryMethods(conditional, limit, page);\n    const onGetFieldOptions = (conditional = null, limit = 500, page) => props.getFieldOptionByGroups([GROUPS.ORDERS_ORIGIN], limit, page);\n    const onGetOrders = (conditions) => props.getOrdersByOffice(conditions.all(), 200, 0);\n    const handleDownloadTemplate = (id) => fileOfficeTemplate('test.xls', id);\n\n    const printReport = (id) => {\n        setReportBody(null);\n        props.printOfficeReport(id);\n    }\n\n    /** Solicitar reporte PDF */\n    const requestPdfReport = async (id) => {\n        try {\n            const response = await officePdfApi(id);\n            if(response.status === 200) {\n                printPartOfPage(response.html);\n            }\n        }catch(e){\n            console.log(\"se ha producido un error\", e);\n        }\n        //setReportBody(null);\n        //props.printPart(id);\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions}/>\n            </CustomModal>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/offices\" title={officeData.name} item={\"Despachos\"}/>\n                    {officeData.status && (\n                        <Row className=\"mb-2\">\n                            <Col md={12}>\n                                <div className={\"mb-3 float-md-start\"}>\n                                    <StatusField color={OFFICE_STATUS[officeData.status].color} className={\"font-size-14 mr-5\"}>\n                                        {OFFICE_STATUS[officeData.status].name}\n                                    </StatusField>\n                                    <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {officeData?.user?.name}</small>\n                                </div>\n                                <div className={\"mb-3 float-md-end\"}>\n                                    <div className=\"button-items\">\n\n                                        {!!([1,2].includes(officeData?.type)) &&  (\n                                        <Tooltip placement=\"bottom\" title=\"Descargar PDF para Cajas\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => requestPdfReport(officeData.id)}>\n                                                <i className={\"mdi mdi-file-pdf\"}> </i> {printReportData.loading ? 'Generando...' : ''}\n                                            </button>\n                                        </Tooltip>\n                                        )}\n\n                                        {/* <Tooltip placement=\"bottom\" title=\"Imprimir reporte\" aria-label=\"add\">\n                                            <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => printReport(officeData.id)}>\n                                                <i className={\"mdi mdi-printer\"}> </i> {printReportData.loading ? 'Generando...' : ''}\n                                            </button>\n                                        </Tooltip>*/}\n\n                                        {!!(officeData?.type === 3 && DELIVERY_METHODS.INTERRAPIDISIMO === officeData?.deliveryMethod?.code) &&  (\n                                            <Tooltip placement=\"bottom\" title=\"Descargar Plantilla Excel\" aria-label=\"add\">\n                                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => handleDownloadTemplate(officeData.id)}>\n                                                    <i className={\"mdi mdi-file-excel\"}> </i>\n                                                </button>\n                                            </Tooltip>\n                                        )}\n                                        {officeData.status === 1 && (\n                                            <>\n                                                <Tooltip placement=\"bottom\" title=\"Eliminar despacho\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => onDelete(officeData.id)}>\n                                                        <i className={\"mdi mdi-delete\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Agregar pedidos\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => addOrders()}>\n                                                        <i className={\"mdi mdi-plus\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                                <Tooltip placement=\"bottom\" title=\"Finalizar\" aria-label=\"add\">\n                                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onConfirm(officeData.id)}>\n                                                        <i className={\"mdi mdi-check\"}> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            </>\n                                        )}\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    )}\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}>\n                            <Row>\n                                {editable ? (\n                                <Col xl=\"4\" className=\"mb-2\">\n                                    <Card>\n                                        <CardBody>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                                        <FieldDate\n                                                            name={\"batchDate\"}\n                                                            mode={DATE_MODES.SINGLE}\n                                                            defaultValue={officeData.batchDate}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            id={\"field_name\"}\n                                                            name={\"name\"}\n                                                            value={officeData.name}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Tipo <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id={\"deliveryType\"}\n                                                            name={\"deliveryType\"}\n                                                            options={deliveryTypes}\n                                                            defaultValue={deliveryType}\n                                                            onChange={item => setDeliveryType(item.value)}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id={\"deliveryMethod\"}\n                                                            name={\"deliveryMethod\"}\n                                                            options={deliveryMethodList}\n                                                            defaultValue={deliveryMethod?.code}\n                                                            onChange={item => setDeliveryMethod(item.value)}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col md=\"12\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"field_name\">Descripción <span className=\"text-danger\">*</span></Label>\n                                                        <FieldText\n                                                            type={\"textarea\"}\n                                                            id={\"description\"}\n                                                            name={\"description\"}\n                                                            value={officeData.description}\n                                                            minLength={3}\n                                                            maxLength={255}\n                                                            required\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n\n                                            <Row>\n                                                <Col md={12} className=\"text-right\">\n                                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => setEditable(false)}> Cerrar </button>\n                                                    <ButtonSubmit loading={props.loading}/>\n                                                </Col>\n                                            </Row>\n                                        </CardBody>\n                                    </Card>\n                                </Col>) : (\n                                    <Col xl=\"4\" className=\"mb-2\">\n                                        <Card>\n                                            <div className=\"float-end\">\n                                            <Tooltip placement=\"bottom\" title=\"Editar despacho\" aria-label=\"add\">\n                                                <button type=\"button\"\n                                                        size=\"small\"\n                                                        className=\"btn btn-sm text-primary cursor-pointer\"\n                                                        onClick={() => {\n                                                            setEditable(true);\n                                                        }}>\n                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                </button>\n                                            </Tooltip>\n                                            </div>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col md={12}>\n                                                        <label>Fecha: </label>\n                                                        <span className=\"p-1\">{formatDate(officeData.batchDate, DATE_FORMAT.ONLY_DATE)}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Nombre: </label>\n                                                        <span className=\"p-1\">{officeData.name}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Tipo: </label>\n                                                        <span className=\"p-1\">{ConverterDeliveryType(deliveryType)}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Metodo: </label>\n                                                        <span className=\"p-1\">{deliveryMethod?.code}</span>\n                                                    </Col>\n                                                    <Col md={12}>\n                                                        <label>Descripción: </label>\n                                                        <span className=\"p-1\">{officeData.description}</span>\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                )}\n\n                                <Col xl=\"8\">\n                                    <Card>\n                                        <CardBody>\n                                            <h4 className=\"card-title text-info\"><i\n                                                className=\"uil-shopping-cart-alt me-2\"> </i> Pedidos en despacho</h4> <br/>\n                                                <Col md=\"8\">\n                                                    <div className=\"mb-3\">\n                                                    <FieldText\n                                                        id={\"searchBar\"}\n                                                        name={\"dianCode\"}\n                                                        value={\"\"}\n                                                        minLength={0}\n                                                        maxLength={200}\n                                                        placeholder=\"Buscar un pedido...\"\n                                                        onChange={item => item.target.value === \"\" ? getOrdersByConditional() : getOrdersByConditionalAndFilter(item.target.value)}\n                                                    />\n                                                    </div>\n                                                </Col>\n                                            <Row>\n                                                {ordersList.length === 0 && <p><i className=\"fa fa-box-open text-muted\"></i> Este despacho se encuentra vacio</p> }\n                                                {ordersList.sort((a, b) => a.id < b.id).map((order, k) => (\n                                                    <Col md={4} className=\"\">\n                                                        <div key={k} className=\"order-box\">\n                                                            <div>\n                                                                <Link to={`/order/${order.id}`} className=\"text-muted\">\n                                                                    <small className=\"font-weight-600\"><span className=\"text-info\">Pedido #: {order.id}</span></small>\n                                                                </Link>\n                                                                <Tooltip placement=\"bottom\" title={\"Peso\"} aria-label=\"add\">\n                                                                    <small className=\"float-end text-muted\" style={{\"cursor\": \"default\"}}>\n                                                                        <i className=\"mdi mdi-weight-pound\"></i> {order.totalWeight}\n                                                                    </small>\n                                                                </Tooltip>\n                                                                <br/>\n                                                                <small><span className=\"font-weight-600\">Cliente: </span> <small>{order.customer.name}</small></small>\n                                                                {onDelete && (\n                                                                    <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => deleteOrders(order.id)}>\n                                                                        <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                    </button>\n                                                                )}\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                ))}\n                                            </Row>\n                                            {!ordersList && (\n                                                <div className={\"m-1 pl-2\"}>No hay registros asociados</div>\n                                            )}\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {deliveryMethods, ordersByOffice, refresh: refreshOrders} = state.Order\n    const {error, office, loading, printReport, refresh} = state.Office\n    return {error, office, loading, deliveryMethods: deliveryMethods.data, orders: ordersByOffice, printReportData: printReport, refresh, refreshOrders}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {\n        apiError, registerOffice, deleteOffice, confirmOffice, updateOffice, getOffice,\n        getDeliveryMethods, getFieldOptionByGroups, addOrderOffice, deleteOrderOffice, getOrdersByOffice, printOfficeReport, resetPrintOfficeReport\n    })(OfficeEdit)\n)\n\nOfficeEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Offices/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/index.js",["1302"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Row} from \"reactstrap\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\nimport OrderCustomer from \"./orderCustomer\";\nimport OrderProducts from \"./orderProducts\";\nimport OrderCar from \"./orderCar\";\nimport OrderDeliveryOptions from \"./orderDeliveryOptions\";\nimport {resetCustomer} from \"../../../store/customer/actions\";\nimport {resetProduct} from \"../../../store/product/actions\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport OrderSummary from \"./orderSummary\";\nimport {registerOrder, resetCar} from \"../../../store/order/actions\";\nimport {CHARGE_ON_DELIVERY, DELIVERY_METHODS_PAYMENT_TYPES, PAYMENT_TYPES} from \"../../../common/constants\";\n\nconst CreateOrder = (props) => {\n    const {onResetOrder, car, onRegisterOrder, error} = props;\n    const [initComponent, setInitComponent] = useState(true);\n    const [isValidOrder, setIsValidOrder] = useState(false);\n\n    useEffect(() => {\n        if (initComponent) {\n            onResetOrder();\n            setInitComponent(false);\n        }\n    }, [initComponent]);\n\n    useEffect(() => {\n        if (car) {\n            const validCost = null != car.deliveryOptions.cost && car.deliveryOptions.cost >= 0\n            const isValidCustomer = !!car.customer.id;\n            const isValidProducts = car.products.length > 0;\n            const isValidDeliveryOptions = car.deliveryOptions && car.deliveryOptions.origin && car.deliveryOptions.type && car.deliveryOptions.method && validCost;\n            //se agrega valicacion para no permitir clientes contrapagos que esten inactivos\n            const validCustomerType = (car.customer && car.customer.status === true) || (car.customer && car.customer.status === false && car.deliveryOptions && car.deliveryOptions.type !== CHARGE_ON_DELIVERY);\n\n            console.log('YG valid card', validCost, isValidDeliveryOptions);\n            setIsValidOrder(isValidCustomer && isValidProducts && isValidDeliveryOptions && validCustomerType);\n        }\n    }, [car]);\n\n    const onCancelOrder = () => {\n        const dirty = car.customer.id || car.products.length > 0;\n\n        if (!dirty) {\n            resetOrder();\n            return;\n        }\n\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: '¿Seguro desea cancelar el pedido?',\n            id: '_OrderModal',\n            onConfirm: () => {\n                resetOrder();\n            }\n        });\n    }\n\n    const resetOrder = () => {\n        onResetOrder();\n        props.history.push(\"/orders\");\n    }\n\n    const onCreateOrder = () => {\n        //console.log('Car', car);\n        const order = {\n            customer: car.customer.id,\n            deliveryMethod: car.deliveryOptions.method,\n            deliveryCost: car.deliveryOptions.cost,\n            chargeOnDelivery: car.deliveryOptions.type === 3,\n            origen: car.deliveryOptions.origin,\n            deliveryType: parseInt(car.deliveryOptions.type),\n            otherMethod: car.deliveryOptions.otherMethod,\n            products: car.products.map(prod => ({\n                id: prod.origin.id,\n                productSize: prod.sizeId,\n                quantity: prod.quantity,\n                discountPercentage: prod.discountPercentage,\n            }))\n        };\n\n        if (DELIVERY_METHODS_PAYMENT_TYPES.includes(order.deliveryMethod)) {\n            order.piecesForChanges = parseInt(car.deliveryOptions.pieces);\n            order.paymentMode = car.deliveryOptions.paymentType === PAYMENT_TYPES.CASH ? 1 : 2;\n        } else {\n            order.deliveryLocality = car.deliveryOptions.deliveryLocality;\n        }\n\n        onRegisterOrder(order, props.history);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/orders\" title=\"Crear pedido\" item={\"Pedido\"}/>\n                    <Card className=\"mb-3\">\n                        <CardBody>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderCustomer/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderProducts/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderCar/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderDeliveryOptions/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                <Col md={12}>\n                                    <OrderSummary/>\n                                </Col>\n                            </Row>\n                            <hr/>\n                            <Row>\n                                {error && (\n                                    <Col md={12} className=\"text-center\">\n                                        <div className=\"alert alert-danger\">\n                                            {error}\n                                        </div>\n                                    </Col>\n                                )}\n\n                                <Col md={12} className=\"text-center\">\n                                    <div className=\"btn-group\">\n                                        <button type=\"button\" className=\"btn btn-light text-danger\" onClick={() => onCancelOrder()}>\n                                            Cancelar\n                                        </button>\n                                        <button type=\"button\" className=\"btn btn-primary\" disabled={!isValidOrder} onClick={() => onCreateOrder()}>\n                                            <i className=\"uil uil-shopping-cart-alt me-2\"> </i> Crear pedido\n                                        </button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {car, loading, error} = state.Order\n    return {car, loading, error}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetOrder: () => {\n        dispatch(resetCustomer());\n        dispatch(resetProduct());\n        dispatch(resetCar());\n    },\n    onRegisterOrder: (order, history) => dispatch(registerOrder(order, history))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CreateOrder)\n)\n\nCreateOrder.propTypes = {\n    onResetOrder: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/PaymentsEdit/index.js",["1303","1304","1305"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Container, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldEmail, FieldNumber, FieldPhone, FieldSelect, FieldText} from \"../../components/Fields\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {BANKS_LIST, GROUPS, PAYMENT_FORMS, PAYMENT_FORMS_LIST, STATUS} from \"../../common/constants\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {getPayment, registerPayment, updatePayment} from \"../../store/payments/actions\";\nimport {getFieldOptionByGroups, registerFieldOption} from \"../../store/fieldOptions/actions\";\n\nconst PaymentEdit = (props) => {\n    const {onGetPayment, payment, onGetFieldOptions, fieldOptions} = props;\n    const [paymentFormSelected, setPaymentFormSelected] = useState(PAYMENT_FORMS.DEPOSIT);\n    const [paymentData, setPaymentData] = useState({_status: STATUS.ACTIVE});\n    const [banks, setBankList] = useState([]);\n    const isEdit = props.match.params.id;\n\n    useEffect(() => {\n        if (isEdit && onGetPayment) {\n            onGetPayment(props.match.params.id);\n        }\n    }, [onGetPayment]);\n\n    useEffect(() => {\n        if (payment.id && isEdit) {\n            setPaymentData({...payment, _status: payment.status});\n        }\n    }, [payment]);\n\n    useEffect(() => {\n        if (onGetFieldOptions) {\n            onGetFieldOptions();\n        }\n    }, [onGetFieldOptions]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            setBankList(fieldOptions.filter(op => (op.groups === GROUPS.BANKS)).map(op => ({name: op.name})).map(op => {\n                const key = op.name ? op.name : '';\n                return {label: key, value: key};\n            }));\n        } else {\n            setBankList([]);\n        }\n    }, [fieldOptions])\n\n    const handleValidSubmit = (event, values) => {\n        const data = {...values, status: values._status};\n        if (values.type) data.type = values.type.value;\n        if (values.targetBank) data.targetBank = values.targetBank.value;\n        if (values.originBank) data.originBank = values.originBank.value;\n        delete data._status;\n        if (!isEdit) {\n            props.onCreate(data, props.history)\n        } else {\n            props.onUpdate(props.match.params.id, data, props.history)\n        }\n    }\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/payments\" title={paymentData.name} item={\"Pagos\"}/>\n\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                        <Row>\n                            <Col xl=\"12\">\n                                <Card>\n                                    <CardBody>\n                                        {/*<div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                            <div className={\"float-end\"}>\n                                                <Row>\n                                                    <Col>\n                                                        ¿Activo?\n                                                    </Col>\n                                                    <Col>\n                                                        <FieldSwitch defaultValue={paymentData._status} name={\"_status\"} />\n                                                    </Col>\n                                                </Row>\n                                            </div>\n                                        </div>*/}\n                                        <Row>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"field_name\"}\n                                                        name={\"name\"}\n                                                        value={paymentData.name}\n                                                        minLength={3}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Correo <span className=\"text-danger\">*</span></Label>\n                                                    <FieldEmail\n                                                        name={\"email\"}\n                                                        value={paymentData.email}\n                                                        required/>\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Teléfono <span className=\"text-danger\">*</span></Label>\n                                                    <FieldPhone\n                                                        id=\"phone\"\n                                                        name=\"phone\"\n                                                        value={paymentData.phone}\n                                                        placeholder=\"\"\n                                                        type=\"text\"\n                                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                                        className=\"form-control\"\n                                                        validate={{required: {value: true}}}\n                                                        onChange={(value) => setPaymentData({...paymentData, phone: value})}\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"state\">Forma de pago <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        id=\"type\"\n                                                        name={\"type\"}\n                                                        placeholder={\"Indique una forma de pago\"}\n                                                        defaultValue={paymentData.type}\n                                                        options={PAYMENT_FORMS_LIST}\n                                                        onChange={item => setPaymentFormSelected(item.value)}\n                                                        required\n                                                        isSearchable\n                                                    />\n                                                </div>\n                                            </Col>\n                                            {(PAYMENT_FORMS.BANK_TRANSFER === paymentFormSelected) && (\n                                            <>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"state\">Banco origen <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        id=\"originBank\"\n                                                        name={\"originBank\"}\n                                                        placeholder={\"Seleccione un banco\"}\n                                                        defaultValue={paymentData.originBank}\n                                                        options={BANKS_LIST}\n                                                        required\n                                                        isSearchable\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"state\">Banco destino <span className=\"text-danger\">*</span></Label>\n                                                    <FieldSelect\n                                                        id=\"targetBank\"\n                                                        name={\"targetBank\"}\n                                                        placeholder={\"Seleccione un banco\"}\n                                                        defaultValue={paymentData.targetBank}\n                                                        options={banks && banks.filter(item => item.value != \"Efecty\")}\n                                                        required\n                                                        isSearchable\n                                                    />\n                                                </div>\n                                            </Col>\n                                            </>\n                                            )}\n                                            {(PAYMENT_FORMS.DEPOSIT === paymentFormSelected) && (\n                                                <Col md=\"6\">\n                                                    <div className=\"mb-3\">\n                                                        <Label htmlFor=\"state\">Banco <span className=\"text-danger\">*</span></Label>\n                                                        <FieldSelect\n                                                            id=\"targetBank\"\n                                                            name={\"targetBank\"}\n                                                            placeholder={\"Seleccione un banco\"}\n                                                            defaultValue={paymentData.targetBank}\n                                                            options={banks}\n                                                            required\n                                                            isSearchable\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            )}\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Número de consignación o transferencia <span className=\"text-danger\">*</span></Label>\n                                                    <FieldText\n                                                        id={\"consignmentNumber\"}\n                                                        name={\"consignmentNumber\"}\n                                                        value={paymentData.consignmentNumber}\n                                                        minLength={1}\n                                                        maxLength={255}\n                                                        required\n                                                    />\n                                                </div>\n                                            </Col>\n                                            <Col md=\"6\">\n                                                <div className=\"mb-3\">\n                                                    <Label htmlFor=\"field_name\">Monto de consignación o transferencia <span className=\"text-danger\">*</span></Label>\n                                                    <FieldNumber\n                                                        id={\"consignmentAmount\"}\n                                                        name={\"consignmentAmount\"}\n                                                        value={paymentData.consignmentAmount}\n                                                        required/>\n                                                </div>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col md={12} className=\"text-right\">\n                                                <ButtonSubmit loading={props.loading}/>\n                                            </Col>\n                                        </Row>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, payment, loading} = state.Payments\n    const {fieldOptions} = state.FieldOption\n    return {error, payment, loading, fieldOptions}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.BANKS], limit, page)),\n    onGetPayment: (id) => dispatch(getPayment(id)),\n    onCreate: (data, history) => dispatch(registerPayment(data, history)),\n    onUpdate: (data, history) => dispatch(updatePayment(data, history)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PaymentEdit)\n)\n\nPaymentEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/HorizontalLayout/FooterUsers.js",["1306","1307"],"import React, {useEffect, useState} from \"react\"\nimport {countUsersOrders} from \"../../helpers/service\";\nimport {connect} from \"react-redux\";\nimport {priceFormat} from \"../../common/utils\";\nimport avatar3 from \"../../assets/images/users/avatar-3.jpg\";\n\nconst FooterUsers = ({data}) => {\n\n    const [loading, setLoading] = useState(false)\n    const [users, setUsers] = useState([])\n    const [mainUser, setMainUser] = useState({})\n\n    useEffect(() => {\n        findData();\n    }, [data])\n\n    const findData = () => {\n        setLoading(true);\n        countUsersOrders().then(resp => {\n            setLoading(false);\n            if (resp && resp.data && resp.data.length > 0) {\n                let u = [];\n                resp.data.filter(o => o.user && o.user.id).forEach(o => u.push({name: o.user.name, sales: o.origen, amount: priceFormat(o.totalAmount), image: avatar3}));\n\n                //TO TEST\n                [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach(item => {\n                    const user = {...u[0]};\n                    user.image = \"https://picsum.photos/200/300?random=\" + item;\n                    user.sales = item;\n                    u.push(user);\n                });\n\n                u = u.sort((a, b) => a.sales === b.sales ? 0 : (a.sales > b.sales) ? 1 : -1);\n\n                if (u.length > 6) {\n                    u.splice(6);\n                }\n                setUsers(u);\n                if (u.length > 0) setMainUser(u[u.length - 1]);\n            }\n        });\n    }\n    return (\n        <React.Fragment>\n            {users.map((user, k) => (\n                <div key={k} style={{display: 'flex', alignItems: 'center', margin: '0 5px'}}>\n                    <img src={user.image} className=\"rounded-circle header-profile-user\" alt=\"user-pic\"/>\n                    <div className=\"flex-1\">\n                        <small className=\"mt-0 mb-1\">{k === (users.length - 1) && <i className={\"mdi mdi-crown mr-1 text-warning\"}> </i>}{user.name} </small>\n                        <br/>\n                        <small><small className=\"m-0\">Pedidos: <b>{user.sales}</b></small></small>\n                    </div>\n                </div>\n            ))}\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\nconst mapDispatchToProps = dispatch => ({\n    countUsersOrders,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(FooterUsers)\n\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/UsersSalesDropdown.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/actions.js",["1308"],"import {\n    ADD_ORDER_BILL,\n    ADD_ORDER_BILL_FAILED,\n    ADD_ORDER_BILL_SUCCESS,\n    BILL_LIST_REFRESH,\n    CONFIRM_BILL,\n    CONFIRM_BILL_FAILED,\n    CONFIRM_BILL_SUCCESS,\n    DELETE_BILL,\n    DELETE_BILL_FAILED,\n    DELETE_BILL_SUCCESS,\n    GENERATE_CREDIT_NOTE,\n    GENERATE_CREDIT_NOTE_FAILED,\n    GENERATE_CREDIT_NOTE_SUCCESS,\n    GENERATE_REPORT_FAILED,\n    GENERATE_REPORT_REQUEST,\n    GENERATE_REPORT_RESTART,\n    GENERATE_REPORT_SUCCESS,\n    GET_BILL,\n    GET_BILL_FAILED,\n    GET_BILL_SUCCESS,\n    GET_BILLS,\n    GET_BILLS_FAILED,\n    GET_BILLS_SUCCESS,\n    QUERY_BILLS,\n    QUERY_BILLS_FAILED,\n    QUERY_BILLS_SUCCESS,\n    REGISTER_BILL,\n    REGISTER_BILL_FAILED,\n    REGISTER_BILL_SUCCESS,\n    RESET_BILL,\n    UPDATE_BILL,\n    UPDATE_BILL_FAILED,\n    UPDATE_BILL_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetBill = () => ({\n    type: RESET_BILL,\n})\n\nexport const getBills = (conditional, limit, offset) => ({\n    type: GET_BILLS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getBillsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getBills(conditions.all(), ids.length, offset);\n}\n\nexport const getBillsSuccess = (data, meta) => ({\n    type: GET_BILLS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getBillsFailed = error => ({\n    type: GET_BILLS_FAILED,\n    payload: error,\n})\n\nexport const getBill = id => ({\n    type: GET_BILL,\n    id\n})\n\nexport const getBillSuccess = data => ({\n    type: GET_BILL_SUCCESS,\n    payload: data,\n})\n\nexport const getBillFailed = error => ({\n    type: GET_BILL_FAILED,\n    payload: error,\n})\n\nexport const registerBill = (data) => {\n    return {\n        type: REGISTER_BILL,\n        payload: {data},\n    }\n}\n\nexport const registerBillSuccess = data => {\n    return {\n        type: REGISTER_BILL_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const registerBillFailed = data => {\n    return {\n        type: REGISTER_BILL_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateBill = (id, data, history) => {\n    return {\n        type: UPDATE_BILL,\n        payload: {id, data, history},\n    }\n}\n\nexport const updateBillSuccess = data => {\n    return {\n        type: UPDATE_BILL_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateBillFail = error => {\n    return {\n        type: UPDATE_BILL_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteBill = (id, history) => ({\n    type: DELETE_BILL,\n    payload: {id, history}\n})\n\nexport const deleteBillSuccess = () => ({\n    type: DELETE_BILL_SUCCESS\n})\n\nexport const deleteBillFailed = error => ({\n    type: DELETE_BILL_FAILED,\n    payload: error,\n})\n\nexport const confirmBill = (id, history) => ({\n    type: CONFIRM_BILL,\n    payload: {id, history}\n})\n\nexport const confirmBillSuccess = () => ({\n    type: CONFIRM_BILL_SUCCESS\n})\n\nexport const confirmBillFailed = error => ({\n    type: CONFIRM_BILL_FAILED,\n    payload: error,\n})\n\n\nexport const countBillByStatus = () => {\n    const params = {operation: 'id::count', group: \"status\"};\n    return queryBills(params, 'statusGroup');\n}\n\nexport const queryBills = (params, node) => ({\n    type: QUERY_BILLS,\n    params: params,\n    node: node,\n})\nexport const queryBillsFailed = error => ({\n    type: QUERY_BILLS_FAILED,\n    payload: error,\n})\nexport const queryBillsSuccess = (data, meta, node) => ({\n    type: QUERY_BILLS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const addOrderBill = (id, data, conditional, history) => {\n    return {\n        type: ADD_ORDER_BILL,\n        payload: {id, data, conditional, history},\n    }\n}\n\nexport const addOrderBillSuccess = data => {\n    return {\n        type: ADD_ORDER_BILL_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const addOrderBillFailed = data => {\n    return {\n        type: ADD_ORDER_BILL_FAILED,\n        payload: data,\n    }\n}\n\nexport const refreshList = () => {\n    return {type: BILL_LIST_REFRESH}\n}\n\nexport const createCreditNote = id => ({\n    type: GENERATE_CREDIT_NOTE,\n    id\n})\nexport const createCreditNoteSuccess = () => {\n    return {\n        type: GENERATE_CREDIT_NOTE_SUCCESS\n    }\n}\nexport const createCreditNoteFailed = () => {\n    return {\n        type: GENERATE_CREDIT_NOTE_FAILED\n    }\n}\n\n\nexport const generateReportRestart = () => {\n    return {\n        type: GENERATE_REPORT_RESTART\n    }\n}\nexport const generateReport = (data) => {\n    return {\n        type: GENERATE_REPORT_REQUEST,\n        data\n    }\n}\nexport const generateReportSuccess = (data) => {\n    return {\n        type: GENERATE_REPORT_SUCCESS,\n        data\n    }\n}\nexport const generateReportFailed = (error) => {\n    return {\n        type: GENERATE_REPORT_FAILED,\n        error\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/auth/login/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/constants.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Modal/ConfirmationModal.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/utils.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/Breadcrumb.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/NoDataIndication.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CategoriesPieChart.js",["1309","1310"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {customerCategoryStats, customerOrdersStats} from \"../../helpers/service\";\nimport moment from \"moment\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport PieChart from \"../../components/Common/PieChart\";\n\nconst CategoriesPieChart = ({customerId}) => {\n\n    const [categoryChart, setCategoryChart] = useState({series: [], labels:[]});\n\n    useEffect(() => {\n        if (customerId) {\n            customerCategoryStats(customerId, moment()).then(resp => {\n                const chartData = {series: [], labels:[]};\n                if(resp){\n                    resp.forEach(pc => {\n                        chartData.series.push(pc.qty);\n                        chartData.labels.push(pc.name);\n                    })\n                }\n                setCategoryChart(chartData);\n            });\n        }\n    }, [customerId]);\n\n    return (\n        <>\n            <h4 className=\"card-title text-info\">Categorias</h4>\n            <div style={{background: '#f6f6f6', height: '100%'}}>\n                <PieChart data={categoryChart}/>\n            </div>\n        </>\n    );\n}\n\nCategoriesPieChart.propTypes = {\n    customerId: PropTypes.number.isRequired\n}\n\nexport default CategoriesPieChart;\n","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/OrdersPieChart.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/Observations.js",["1311","1312","1313","1314"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Col, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CustomizedTimeline from \"../../pages/CustomerEdit/TimeLine\";\nimport ButtonSubmit from \"./ButtonSubmit\";\nimport {ConfirmationModalAction} from \"../Modal/ConfirmationModal\";\nimport {threeDots} from \"../../common/utils\";\nimport {deleteComment, getCommentsByEntity, registerComment} from \"../../store/comment/actions\";\nimport {findFieldOptionByGroup} from \"../../helpers/service\";\nimport HasRole from \"../HasRole\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\n\nconst Observations = (props) => {\n\n    const {user, observations, onGetObservations, onCreateObservation, onDeleteObservation, onGetCommentSuggested, entitySuggested, entity, entityId} = props;\n    const [observation, setObservation] = useState(undefined);\n    const [observationsSuggested, setObservationsSuggested] = useState([]);\n    const [observationList, setObservationList] = useState([]);\n\n    useEffect(() => {\n        onGetObservations(entity, entityId);\n        if(entitySuggested) onGetCommentSuggested(entitySuggested).then(data => setObservationsSuggested(data.map(item => item.value)));\n    }, [entityId]);\n\n    useEffect(() => {\n        if (observations[entity] && observations[entity].length > 0) {\n            if(observations[entity].some(o => o.entity === entity)) setObservationList(observations[entity].filter(o => o.entity === entity));\n        }else{\n            setObservationList([]);\n        }\n    }, [observations[entity]]);\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este registro?',\n            description: 'Usted está eliminado este registro, una vez eliminado no podrá ser recuperado.',\n            id: '_observationsModal',\n            onConfirm: () => {\n                const item = observationList.find(cl => cl.id === id);\n                if(onDeleteObservation) onDeleteObservation(item);\n            }\n        });\n    }\n\n    const onAdd = (comment) => {\n        if(onCreateObservation) onCreateObservation(entityId, {entity: entity, comment: comment});\n    }\n\n    const handleValidSubmit = (event) => {\n        if (!observation || observation === '') return;\n        setObservation(undefined);\n        event.target.reset();\n        onAdd(observation);\n    }\n\n    return (\n        <React.Fragment>\n            <Card id={''} className=\"p-3\">\n                {(observationsSuggested && observationsSuggested.length > 0) && (\n                    <Row>\n                        <Col md={12}>\n                            <h4 className=\"card-title text-info\">Observaciones sugeridas</h4>\n                        </Col>\n                        <Col md={12}>\n                            {observationsSuggested.map((suggest, k) => (\n                               <span key={k}>\n                                   <Tooltip placement=\"bottom\" title={suggest} aria-label=\"add\">\n                                       <button className=\"btn bg-light m-1\" onClick={() => onAdd(suggest)}>\n                                        <span className=\"font-sm m-0\"><i className={\"uil uil-star\"}> </i> &nbsp;\n                                            {threeDots(suggest, 30)}\n                                        </span>\n                                       </button>\n                                   </Tooltip>\n                               </span>\n                            ))}\n                        </Col>\n                        <hr/>\n                    </Row>\n                )}\n                <Row>\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\">Agregar observación</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12}>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col md={10}>\n                                    <input id={\"observation\"} name={\"observation\"} className=\"form-control\" value={observation} onChange={(e) => setObservation(e.target.value)} required/>\n                                </Col>\n                                <Col md={2}>\n                                    <HasRole role={PERMISSIONS.COMMENT_CREATE}>\n                                        <ButtonSubmit loading={props.loading} disabled={!observation}/>\n                                    </HasRole>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </Col>\n                    <Col md={12}>\n                        <hr/>\n                        <h4 className=\"card-title text-info\">Observaciones</h4>\n                    </Col>\n                    <HasRole role={PERMISSIONS.COMMENT_EDIT}>\n                    <Col md={12} style={{maxHeight: '500px', overflowY: 'auto'}}>\n                        {observationList.length > 0 ? (<CustomizedTimeline data={observationList} onDelete={onDelete}/>) : \"No hay observaciones\"}\n                    </Col>\n                    </HasRole>\n                </Row>\n            </Card>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {user} = state.Login\n    const {comments} = state.Comment\n    return {user, observations: comments}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetObservations: (entity, idRelated) => dispatch(getCommentsByEntity(entity, idRelated)),\n    onCreateObservation: (entityId, comment) => dispatch(registerComment(entityId, comment)),\n    onDeleteObservation: (comment) => dispatch(deleteComment(comment)),\n    onGetCommentSuggested: findFieldOptionByGroup,\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Observations)\n)\n\nObservations.propTypes = {\n    entitySuggested: PropTypes.string,\n    entity: PropTypes.string.isRequired,\n    entityId: PropTypes.number.isRequired,\n}\n","/Users/ramon/Repositories/lucy-moie/src/helpers/service.js",["1315","1316","1317","1318","1319","1320","1321"],"import {fetchDataApi} from \"./backend_helper\";\nimport Conditionals from \"../common/conditionals\";\nimport {showMessage} from \"../components/MessageToast/ShowToastMessages\";\nimport {DEFAULT_PAGE_LIMIT} from \"../common/pagination\";\nimport * as url from \"./url_helper\";\nimport {formatDateToServer, getMoment} from \"../common/utils\";\n\nexport const getData = (urlStr, name, conditionalOptions, defaultConditions) => {\n    const conditions = new Conditionals.Condition;\n    if (defaultConditions) {\n        defaultConditions.forEach(dc => conditions.add(dc.field, dc.value, dc.operator));\n    }\n    if (name) {\n        if (conditionalOptions) {\n            conditions.add(conditionalOptions.fieldName, name, conditionalOptions.operator);\n        } else {\n            conditions.add('name', name, Conditionals.OPERATORS.LIKE);\n        }\n    }\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, DEFAULT_PAGE_LIMIT, 0);\n    return fetchDataApi(urlStr, query);\n}\n\nexport const findOrders = (conditions, limit = null, offset = null) => {\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n    return fetchDataApi(url.ORDERS, query);\n}\n\nexport const showResponseMessage = (response, message, errorMessage) => {\n    if (response.status === 200 || response.code === 200) {\n        showMessage.success(message);\n    } else {\n        showMessage.error(errorMessage || message);\n    }\n}\n\nexport const hasCustomerOpenOrders = (customerId) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('status', '1::4', Conditionals.OPERATORS.BETWEEN);\n    conditions.add('customer', customerId, Conditionals.OPERATORS.EQUAL);\n    return findOrders(conditions, 1);\n}\n\nexport const countCustomersByStatus = () => {\n    return countByStatus(url.CUSTOMER);\n}\n\nexport const countProductsByStatus = () => {\n    return countByStatus(url.PRODUCT);\n}\n\nconst countByStatus = (urlString) => {\n    const query = {};\n    query.operation = 'id::count';\n    query.group = 'status'\n\n    return fetchDataApi(urlString, Conditionals.urlSearchParams(query)).then(resp => {\n        const group = {};\n        resp.data.forEach(item => group[!!item.status ? 1 : 0] = item.id);\n        return group;\n    });\n}\n\nexport const countMayoristas = () => {\n    const query = {};\n    query.operation = 'id::count';\n    query.group = 'isMayorist'\n\n    return fetchDataApi(url.CUSTOMER, Conditionals.urlSearchParams(query)).then(resp => {\n        const group = {};\n        resp.data.forEach(item => group[item.isMayorist ? 1 : 0] = item.id);\n        return group;\n    });\n}\n\nexport const countUsersOrders = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('status', '1::5', Conditionals.OPERATORS.BETWEEN);\n    // conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n\n    const query = {};\n    query.conditional = Conditionals.getConditionalFormat(conditions.all());\n    query.operation = 'origen::count,totalAmount::sum';\n    query.group = 'user_id'\n\n    return fetchDataApi(url.ORDERS, Conditionals.urlSearchParams(query));\n}\n\nexport const statsCustomerRegisteredToday = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    return statsRegistered(url.CUSTOMER, conditions);\n}\n\nexport const statsCustomerRegistered = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt',formatDateToServer(getMoment().isoWeekday(1)), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    return statsRegistered(url.CUSTOMER, conditions);\n}\n\nexport const statsRegistered = (urlString, conditions) => {\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = {conditional: cond, operation: 'id::count'};\n\n    return fetchDataApi(urlString, Conditionals.urlSearchParams(query)).then(resp => {\n        const data = {count: 0};\n        if(resp.data && resp.data.length > 0){\n            data.count = resp.data[0].id;\n        }\n        return data;\n    });\n}\n\nexport const getCatalogBatchRequest = () => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('createdAt', formatDateToServer(getMoment().startOf('day')), Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL)\n    conditions.add('type', [2,3].join(\"::\"), Conditionals.OPERATORS.IN);\n    conditions.add('status', 2, Conditionals.OPERATORS.EQUAL);\n\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, 15);\n    return fetchDataApi(url.BATCH_REQUEST, Conditionals.urlSearchParams(query));\n}\n\nexport const findFieldOptionByGroup = (group, limit = null, offset = null) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('groups', group, Conditionals.OPERATORS.EQUAL);\n    const cond = Conditionals.getConditionalFormat(conditions.all());\n    const query = Conditionals.buildHttpGetQuery(cond, limit, offset);\n    return fetchDataApi(url.FIELD_OPTIONS, query).then(resp => (resp.data || []));\n}\n\nexport const customerOrdersStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/order_stats?beforeDate=${date.format(\"YYYY-MM-DD\")}`, {});\n}\nexport const customerProductStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/stats?beforeDate=${date.format(\"YYYY-MM-DD\")}`, {});\n}\nexport const customerCategoryStats = (customerId, date) => {\n    return fetchDataApi(`${url.CUSTOMER}/${customerId}/stats?beforeDate=${date.format(\"YYYY-MM-DD\")}&categoryMode=true`, {});\n}\n","/Users/ramon/Repositories/lucy-moie/src/common/pagination.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderList.js",["1322","1323","1324","1325","1326"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {TableFilter} from \"../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../common/converters\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport orderColumns from \"./orderColumn\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {doConciliation, doPrintBatchRequest, getOrders, resetOrder} from \"../../store/order/actions\";\nimport OrderEdit from \"./orderEdit\";\nimport Conditionals from \"../../common/conditionals\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderConciliationForm from \"./orderConciliationsForm\";\nimport ConciliationReportForm from \"../Reports/ConciliationReportForm\";\n\nconst OrderList = props => {\n    const {orders, meta, onGetOrders, onResetOrders, refresh, customActions, conditionals, showAsModal, conciliation} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [orderSelected, setOrderSelected] = useState(null);\n    const [ordersSelected, setOrdersSelected] = useState([]);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [filterable, setFilterable] = useState(true);\n    const [conciliationView, setConciliationView] = useState(null);\n    const [openConfirmConciliationModal, setOpenConfirmConciliationModal] = useState(false);\n    const [openReportConciliationModal, setOpenReportConciliationModal] = useState(false);\n    const [columns, setColumns] = useState(orderColumns(setOrderSelected, showAsModal, false));\n    const [selectAll, setSelectAll] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        if (null !== refresh) onGetOrders(getConditionals(), DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }, [refresh])\n\n    useEffect(() => {\n        if (null !== conciliationView) {\n            onFilterAction(conditional);\n        }\n        setColumns(orderColumns(setOrderSelected, showAsModal, conciliationView));\n    }, [conciliationView])\n\n    useEffect(() => {\n        if (conciliationView && !conciliation.loading && conciliation.success) {\n            setConciliationView(false);\n        }\n    }, [conciliation])\n\n    useEffect(() => {\n        onResetOrders();\n        onGetOrders(getConditionals());\n        if (customActions) {\n            setFilterable(false);\n        }\n    }, [onGetOrders])\n\n    useEffect(() => {\n        setStatesList(orders)\n        console.log('orders', orders)\n    }, [orders])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetOrders(getConditionals(), DEFAULT_PAGE_LIMIT, p * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        let conditionals = condition || [];\n        handleConciliateStatus(conditionals);\n        setConditional(conditionals);\n        onGetOrders(conditionals, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const printOrders = () => {\n        let conditionals = conditional || [];\n\n        if (ordersSelected && ordersSelected.length === 1) {\n            conditionals.push({field: 'id', value: ordersSelected[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if (ordersSelected && ordersSelected.length > 1) {\n            conditionals.push({field: 'id', value: ordersSelected.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n\n        props.onPrintBatchRequest(conditionals);\n    }\n\n    const handleConciliateStatus = (conditionals) => {\n        let statusFiltered = conditionals.find(c => c.field === 'status');\n        let statusToConciliate = 4;//Enviada --> 4\n        if (conciliationView) {\n            if (statusFiltered) {\n                statusFiltered.value = statusToConciliate;\n            } else {\n                conditionals.push({field: 'status', value: statusToConciliate, operator: Conditionals.OPERATORS.EQUAL});\n            }\n        } else if (statusFiltered && statusFiltered.value === statusToConciliate) {\n            conditionals.splice(conditionals.indexOf(statusFiltered), 1);\n        }\n    }\n\n    const showConciliationView = () => {\n        setOrdersSelected([]);\n        setConciliationView(true);\n    }\n    const hideConciliationView = () => {\n        setOrdersSelected([]);\n        setConciliationView(false);\n    }\n\n    const sendToConciliation = () => {\n        props.onConciliation(ordersSelected, props.history);\n    }\n\n    const getConditionals = () => {\n        const cond = conditional || [];\n        const extConditions = conditionals || [];\n        return [...cond, ...extConditions];\n    }\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        onSelect: (row) => {\n            let list = [...ordersSelected]\n\n            const index = list.indexOf(row.id);\n            if (index >= 0) {\n                list.splice(index, 1);\n            } else {\n                list.push(row.id);\n            }\n            setOrdersSelected(list);\n        },\n        onSelectAll: (selected, rows) => {\n            if (selected) {\n                setOrdersSelected(rows.map(r => r.id));\n            } else {\n                setOrdersSelected([]);\n            }\n            setSelectAll(selected);\n        }\n    };\n\n    const onPressAction = () => {\n        let conditionals = conditional || [];\n\n        if (ordersSelected && ordersSelected.length === 1) {\n            conditionals.push({field: 'id', value: ordersSelected[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if (ordersSelected && ordersSelected.length > 1) {\n            conditionals.push({field: 'id', value: ordersSelected.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n\n        /** TODO -- envio la condicion para procesar en orden superior */\n        props.customActions(conditionals);\n    };\n\n    return (\n        <Row>\n            <CustomModal title={\"Confirmar Conciliados\"} size=\"lg\" showFooter={false} isOpen={openConfirmConciliationModal} onClose={() => setOpenConfirmConciliationModal(false)}>\n                <OrderConciliationForm onCloseModal={() => setOpenConfirmConciliationModal(false)}/>\n            </CustomModal>\n            <CustomModal title={\"Generar reporte conciliados\"} showFooter={false} isOpen={openReportConciliationModal} onClose={() => setOpenReportConciliationModal(false)}>\n                <ConciliationReportForm onCloseModal={() => setOpenReportConciliationModal(false)}/>\n            </CustomModal>\n\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter && filterable}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter && filterable ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={4}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\">\n                                                                <i className=\"uil-shopping-cart-alt me-2\"></i>\n                                                                {conciliationView ? `Conciliar pedidos (${ordersSelected.length})` : 'Pedidos'}\n                                                            </h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                {customActions ? <Col md={8}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                            <Button onClick={() => onPressAction()} color=\"success\" disabled={(ordersSelected.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                <i className={\"mdi mdi-check\"}> </i> &nbsp; Aceptar\n                                                            </Button>\n                                                        </Tooltip>\n                                                    </div>\n                                                </Col> : (\n                                                    <Col md={8}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            {!conciliationView && (\n                                                                <>\n                                                                    <Tooltip placement=\"bottom\" title=\"Impresión multiple\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => printOrders()}\n                                                                                disabled={(ordersSelected.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                            <i className=\"mdi mdi-printer\"> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                  {/*  <Tooltip placement=\"bottom\" title=\"Conciliar pedidos\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => showConciliationView()}>\n                                                                            <i className=\"mdi mdi-list-status\"> </i>\n                                                                        </Button>\n                                                                    </Tooltip>*/}\n                                                                    <Tooltip placement=\"bottom\" title=\"Confirmar Conciliados\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => setOpenConfirmConciliationModal(true)}>\n                                                                            <i className=\"mdi mdi-check\"> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                    <Tooltip placement=\"bottom\" title=\"Generar reporte conciliados\" aria-label=\"add\">\n                                                                        <Button onClick={() => setOpenReportConciliationModal(true)}>\n                                                                            <i className={\"mdi mdi-file\"}> </i>\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                    <Link to={\"/orders/create\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                        <i className=\"mdi mdi-plus\"> </i> Crear pedido\n                                                                    </Link>\n                                                                </>\n                                                            )}\n\n                                                            {conciliationView && (\n                                                                <>\n                                                                    <Tooltip placement=\"bottom\" title=\"Aceptar\" aria-label=\"add\">\n                                                                        <Button color=\"primary\" onClick={() => sendToConciliation()} disabled={ordersSelected.length === 0}>\n                                                                            {!conciliation.loading && <i className=\"mdi mdi-check\"> </i>}\n                                                                            {conciliation.loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                                                            Aceptar\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                    <Tooltip placement=\"bottom\" title=\"Cancelar\" aria-label=\"add\">\n                                                                        <Button color=\"default\" onClick={() => hideConciliationView(false)}>\n                                                                            Cancelar\n                                                                        </Button>\n                                                                    </Tooltip>\n                                                                </>\n                                                            )}\n                                                        </div>\n                                                    </Col>\n                                                )}\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            selectRow={selectRowProp}\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n            {orderSelected && (<OrderEdit orderId={orderSelected} showOrderOverlay={true} onCloseOverlay={() => setOrderSelected(null)}/>)}\n        </Row>\n    )\n}\n\nOrderList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh, conciliation} = state.Order\n    return {\n        orders,\n        loading,\n        meta,\n        refresh,\n        conciliation\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetOrders: () => {\n        dispatch(resetOrder());\n    },\n    onGetOrders: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getOrders(conditional, limit, page)),\n    onPrintBatchRequest: (conditional) => dispatch(doPrintBatchRequest(conditional)),\n    onConciliation: (ordersSelected) => dispatch(doConciliation(ordersSelected)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OrderList)\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonSubmit.js",["1327"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Spinner} from \"reactstrap\";\nimport {Button} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonSubmit = props => {\n  return (\n      <Button color=\"primary\" type=\"submit\" disabled={props.loading || props.disabled}>\n          {props.loading && <Spinner size=\"sm\" className=\"m-1\" color=\"primary\"/>}\n          {props.name? props.name:'Guardar'}\n      </Button>\n  )\n}\n\nButtonSubmit.propTypes = {\n    name: PropTypes.string,\n    iconClass: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool\n}\n\nexport default ButtonSubmit\n","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductPublish.js",["1328","1329","1330","1331","1332","1333","1334","1335","1336"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {CardBody, Col, Label, Row, Spinner} from \"reactstrap\"\nimport {FieldNumber, FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport {connect} from \"react-redux\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {updateProduct} from \"../../store/product/actions\";\nimport {STATUS} from \"../../common/constants\";\nimport {Button} from \"@material-ui/core\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {map} from \"lodash\";\n\nconst ProductPublish = props => {\n    const {product, updateProduct} = props\n    const [productData, setProductData] = useState(product);\n    const [discount, setDiscount] = useState(0);\n    const [selectValues, setSelectValues] = useState([]);\n\n    useEffect(() => {\n        fillValues();\n    }, [product])\n\n    const handleValidSubmit = (event, values) => {\n        const data = {\n            published: values.published === true,\n            discount: Number.parseFloat(discount)\n        };\n        updateProduct(product.id, data, props.history);\n    }\n\n    const fillValues = () => {\n        if (selectValues.length === 0) {\n            const valueList = [];\n            for (let i = 0; i <= 100;) {\n                valueList.push({label: i, value: i});\n                i += 5;\n            }\n            setSelectValues(valueList);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <div className=\"p-4 border-top\">\n                    <Row>\n                        <Col lg={6}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"productpublished\">Publicación Activa</Label>\n                                <FieldSwitch name={\"published\"} defaultValue={productData.published}/>\n                            </div>\n                        </Col>\n                        <Col lg={6}>\n                            <div className=\"mb-3\">\n                                <Label htmlFor=\"field_discount\">Descuento especial</Label>\n                                <select\n                                    id={\"field_discount\"}\n                                    name={\"discount\"}\n                                    value={discount}\n                                    onChange={(e) => setDiscount(e.target.value)}\n                                    className=\"form-control\"\n                                >\n                                    {map(selectValues, (o, k3) => (\n                                        <option key={k3} value={o.value}>{o.label}</option>\n                                    ))}\n                                </select>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={12} className=\"text-right\">\n                            <ButtonSubmit loading={props.loading}/>\n                        </Col>\n                    </Row>\n                </div>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductPublish.propTypes = {\n    product: PropTypes.object,\n    onGetProductSizes: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {product, loading, meta, refresh} = state.Product\n    return {product, loading, meta, refresh}\n}\n\n\nexport default connect(mapStateToProps, {updateProduct})(ProductPublish)\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductImage.js",["1337","1338","1339","1340","1341","1342","1343","1344"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Card, CardBody, Col, Row, Spinner} from \"reactstrap\"\nimport {Button} from \"@material-ui/core\";\nimport {getProductImage, updateProductImage} from \"../../store/productImages/actions\";\nimport {connect} from \"react-redux\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport Images from \"../../components/Common/Image\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport {getImageByQuality} from \"../../common/utils\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\n\nconst groups = [\n    {group: 'Izquierda', groupId: 1},\n    {group: 'Centro', groupId: 2},\n    {group: 'Derecha', groupId: 3}\n];\n\nconst ProductImage = props => {\n    const {product, onGetProductImage, productImages, refresh} = props\n    const [productImageList, setProductImageList] = useState(false);\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [productImageGroups, setProductImageGroups] = useState(groups);\n    const form = React.createRef();\n\n    useEffect(() => {\n        //onGetProductImage(product.id);\n        const files = groups.map(g => ({...g, file: {name: '', preview: ''}}));\n        if (product.productImage && product.productImage.length > 0) {\n            files.forEach((f, i) => {\n                if (product.productImage.length > i) {\n                    const imgData = product.productImage[i];\n                    if (imgData) {\n                        // f.groupId = imgData.group;\n                        f.file.preview = `${getImageByQuality(imgData, 'high')}`\n                        f.file.name = imgData.filename;\n                    }\n                }\n            })\n        }\n\n        setSelectedFiles(files);\n    }, [product])\n\n    useEffect(() => {\n        if (productImages && productImages.length > 0) {\n            setProductImageList(productImages);\n        } else {\n            setProductImageList([]);\n        }\n    }, [productImages])\n\n    function handleAcceptedFiles(groupId, file) {\n        const filesSelected = [...selectedFiles];\n        let group = filesSelected.find(f => f.groupId === groupId);\n        group.file = {\n            ...file,\n            preview: URL.createObjectURL(file.f),\n            formattedSize: formatBytes(file.f.size)\n        }\n        setSelectedFiles(filesSelected);\n\n    }\n\n    function formatBytes(bytes, decimals = 2) {\n        if (bytes === 0) return \"0 Bytes\"\n        const k = 1024\n        const dm = decimals < 0 ? 0 : decimals\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i]\n    }\n\n    const handleValidSubmit = (event, values) => {\n        const files = selectedFiles.filter(selectedFile => selectedFile.groupId && selectedFile.file.base64).map(f => ({group: f.groupId, file: f.file.base64}));\n        if (files.length > 0) {\n            props.onUpdateProductImage(product.id, files, props.history);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm ref={form} className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row className=\"p-4 border-top\">\n                    {selectedFiles.map((f, i) => (\n                        <Col md={4} key={i + \"-file\"}>\n                            <Card className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\">\n                                <div className=\"p-2\">\n                                    <Row className=\"align-items-center\" style={{borderBottom: '1px solid #f5f6f8'}}>\n                                        <Col md={12} className=\"text-center p-2\" style={{height: '400px'}}>\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"block\"\n                                                hasImage={f.file && f.file.preview}\n                                                onDrop={(files) => {\n                                                    handleAcceptedFiles(f.groupId, files);\n                                                }}>\n                                                <Images className=\"img-fluid mx-auto d-block tab-img rounded\"\n                                                        height={370}\n                                                        alt={f.file?.f?.name}\n                                                        src={f.file?.preview}\n                                                />\n                                            </DropZoneIcon>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"p-2\">\n                                        <Col md={8}>\n                                            <>\n                                                <div className=\"text.muted\"><strong>Grupo:</strong> {f.groupId}</div>\n                                                {(f.file && f.file.f) && (\n                                                    <>\n                                                        <div className=\"text.muted\">{f.file.f.path}</div>\n                                                        <div className=\"text.muted\">{f.file.formattedSize}</div>\n                                                    </>\n                                                )}\n                                            </>\n                                        </Col>\n                                        <Col md={4} className=\"text-right\">\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"icon\"\n                                                onDrop={(files) => {\n                                                    handleAcceptedFiles(f.groupId, files);\n                                                }}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n                <Row className=\"p-4\">\n                    <Col md={12} className=\"text-right\">\n                        <ButtonSubmit loading={props.loading}/>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductImage.propTypes = {\n    product: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n    const {productImages, loading, meta, refresh} = state.ProductImage\n    return {productImages, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductImage: (productId) => {\n        if (productId) dispatch(getProductImage(productId, null, 0));\n    },\n    onUpdateProductImage: (id, data, history) => dispatch(updateProductImage(id, data, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductImage)\n\n","/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actions.js",["1345","1346","1347"],"import {\n    GET_FIELD_OPTIONS,\n    GET_FIELD_OPTIONS_SUCCESS,\n    GET_FIELD_OPTIONS_FAILED,\n    GET_FIELD_OPTION,\n    GET_FIELD_OPTION_SUCCESS,\n    GET_FIELD_OPTION_FAILED,\n    REGISTER_FIELD_OPTION,\n    REGISTER_FIELD_OPTION_SUCCESS,\n    REGISTER_FIELD_OPTION_FAILED,\n    UPDATE_FIELD_OPTION,\n    UPDATE_FIELD_OPTION_SUCCESS,\n    UPDATE_FIELD_OPTION_FAILED, DELETE_FIELD_OPTION, DELETE_FIELD_OPTION_SUCCESS, DELETE_FIELD_OPTION_FAILED,\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const getFieldOptions = (conditional, limit, offset) => ({\n    type: GET_FIELD_OPTIONS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getFieldOptionByGroups = (groups, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(groups.length > 0) conditions.add(\"groups\", groups.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getFieldOptionByGroup = (group, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add(\"groups\", group, Conditionals.OPERATORS.EQUAL);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getProductFieldOption = (limit, offset) => {\n    return getFieldOptionByName(\"PRODUCT\", limit, offset);\n}\n\nexport const getFieldOptionByName = (name, limit, offset) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add(\"name\", name, Conditionals.OPERATORS.EQUAL);\n    return getFieldOptions(conditions.all(), limit, offset);\n}\n\nexport const getFieldOptionsSuccess = (data, meta) => ({\n    type: GET_FIELD_OPTIONS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getFieldOptionsFailed = error => ({\n    type: GET_FIELD_OPTIONS_FAILED,\n    payload: error,\n})\n\nexport const getFieldOption = id => ({\n    type: GET_FIELD_OPTION,\n    id\n})\n\nexport const getFieldOptionSuccess = data => ({\n    type: GET_FIELD_OPTION_SUCCESS,\n    payload: data,\n})\n\nexport const getFieldOptionFailed = error => ({\n    type: GET_FIELD_OPTION_FAILED,\n    payload: error,\n})\n\nexport const registerFieldOption = (data, history) => {\n    return {\n        type: REGISTER_FIELD_OPTION,\n        payload: { data, history },\n    }\n}\n\nexport const registerFieldOptionSuccess = data => {\n    return {\n        type: REGISTER_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const registerFieldOptionFailed = data => {\n    return {\n        type: REGISTER_FIELD_OPTION_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateFieldOption = (id, data, history) => {\n    return {\n        type: UPDATE_FIELD_OPTION,\n        payload: { id, data, history },\n    }\n}\nexport const updateFieldOptionSuccess = data => {\n    return {\n        type: UPDATE_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateFieldOptionFail = error => {\n    return {\n        type: UPDATE_FIELD_OPTION_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteFieldOption = (id, history) => {\n    return {\n        type: DELETE_FIELD_OPTION,\n        payload: { id, history },\n    }\n}\nexport const deleteFieldOptionSuccess = data => {\n    return {\n        type: DELETE_FIELD_OPTION_SUCCESS,\n        payload: data,\n    }\n}\nexport const deleteFieldOptionFail = error => {\n    return {\n        type: DELETE_FIELD_OPTION_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/order/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/payments/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderSummary.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/actions.js",["1348","1349"],"import {\n    GET_PRODUCT,\n    GET_PRODUCT_FAILED,\n    GET_PRODUCT_SUCCESS,\n    GET_PRODUCTS,\n    GET_PRODUCTS_FAILED,\n    GET_PRODUCTS_SUCCESS,\n    QUERY_PENDING_PRODUCTS,\n    QUERY_PRODUCTS,\n    QUERY_PRODUCTS_FAILED,\n    QUERY_PRODUCTS_SUCCESS,\n    REGISTER_PRODUCT,\n    REGISTER_PRODUCT_FAILED,\n    REGISTER_PRODUCT_SUCCESS,\n    RESET_PRODUCT,\n    UPDATE_PRODUCT,\n    UPDATE_PRODUCT_FAILED,\n    UPDATE_PRODUCT_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetProduct = () => ({\n    type: RESET_PRODUCT,\n})\n\nexport const getProducts = (conditional, limit, offset) => ({\n    type: GET_PRODUCTS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\n\nexport const getProductsByRefs = (refs, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (refs.length > 0) conditions.add(\"reference\", refs.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getProducts(conditions.all(), refs.length, offset);\n}\nexport const getProductsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getProducts(conditions.all(), ids.length, offset);\n}\n\nexport const getProductsSuccess = (data, meta) => ({\n    type: GET_PRODUCTS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getProductsFailed = error => ({\n    type: GET_PRODUCTS_FAILED,\n    payload: error,\n})\n\nexport const getProduct = id => ({\n    type: GET_PRODUCT,\n    id\n})\n\nexport const getProductSuccess = data => ({\n    type: GET_PRODUCT_SUCCESS,\n    payload: data,\n})\n\nexport const getProductFailed = error => ({\n    type: GET_PRODUCT_FAILED,\n    payload: error,\n})\n\nexport const registerProduct = (data, history) => {\n    return {\n        type: REGISTER_PRODUCT,\n        payload: { data, history },\n    }\n}\n\nexport const registerProductSuccess = data => {\n    return {\n        type: REGISTER_PRODUCT_SUCCESS,\n        payload: data.product,\n    }\n}\n\n\nexport const registerProductFailed = data => {\n    return {\n        type: REGISTER_PRODUCT_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateProduct = (id, data, history) => {\n    return {\n        type: UPDATE_PRODUCT,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateProductSuccess = data => {\n    return {\n        type: UPDATE_PRODUCT_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateProductFail = error => {\n    return {\n        type: UPDATE_PRODUCT_FAILED,\n        payload: error,\n    }\n}\n\n\n\nexport const countProductByStatus = () => {\n    const params = {operation:'id::count', group:\"status\"};\n    return queryProducts(params, 'statusGroup');\n}\n\nexport const pendingProducts = (id) => ({\n    type: QUERY_PENDING_PRODUCTS,\n    id:id\n})\nexport const queryProducts = (params, node) => ({\n    type: QUERY_PRODUCTS,\n    params: params,\n    node: node,\n})\nexport const queryProductsFailed = error => ({\n    type: QUERY_PRODUCTS_FAILED,\n    payload: error,\n})\nexport const queryProductsSuccess = (data, meta, node) => ({\n    type: QUERY_PRODUCTS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n","/Users/ramon/Repositories/lucy-moie/src/store/customer/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCar.js",["1350"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {map} from \"lodash\";\nimport Images from \"../../../components/Common/Image\";\nimport {buildNumericOptions, getImageByQuality, priceFormat} from \"../../../common/utils\";\nimport {FieldDecimalNumber, FieldSelect} from \"../../../components/Fields\";\nimport {HtmlTooltip} from \"../../../components/Common/HtmlTooltip\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {updateCard} from \"../../../store/order/actions\";\n\n\nconst OrderCar = (props) => {\n    const {car, onUpdateCar} = props;\n    const [globalDiscount, setGlobalDiscount] = useState(0);\n\n    useEffect(() => {\n        if (car.products && car.products.length > 0) {\n            const list = [...car.products];\n            let totaledProductList = getProductListWithTotals(list);\n\n            if(JSON.stringify(totaledProductList) !== JSON.stringify(car.products)){\n                onUpdateCar({...car, products: totaledProductList})\n            }\n        }\n    }, [car.products, globalDiscount])\n\n    const getProductListWithTotals = (list) => {\n        var map = {};\n        list.map((prod) => {\n            const discountPercentage = globalDiscount > 0 ? globalDiscount : prod.discountPercentage;\n            let total = prod.origin.price * prod.quantity;\n            const discount = total * (discountPercentage / 100);\n            total = total - discount;\n\n            return {\n                ...prod,\n                quantity: parseInt(prod.quantity),\n                discountPercentage: discountPercentage,\n                discount: discount,\n                total: total,\n            };\n        }).forEach((prod) => {\n            const key = prod.origin.id + '_' + prod.color + '_' + prod.sizeId;\n            if (map[key]) {\n                map[key].quantity += prod.quantity;\n                if (map[key].quantity > prod.quantityAvailable) map[key].quantity = prod.quantityAvailable;\n                map[key].total += prod.total;\n            } else {\n                map[key] = prod;\n            }\n        });\n        return Object.keys(map).map((key) => (map[key]));\n    }\n\n    const removeProduct = (prod) => {\n        const list = [...car.products];\n        list.splice(list.indexOf(prod), 1);\n        onUpdateCar({...car, products: list})\n    }\n\n    const onChangeQuantity = (quantity, p) => {\n        if (quantity === 0) {\n            removeProduct(p);\n        } else {\n            const list = [...car.products];\n            list.forEach((prod) => {\n                if (prod.origin.id === p.origin.id) {\n                    prod.quantity = parseInt(quantity);\n                }\n            });\n            onUpdateCar({...car, products: getProductListWithTotals(list)})\n        }\n    }\n\n    const onChangeDiscount = (discountPercentage, p) => {\n        const list = [...car.products];\n        list.forEach((prod) => {\n            if (prod.origin.id === p.origin.id && prod.color === p.color && prod.size === p.size) {\n                prod.discountPercentage = parseFloat(discountPercentage);\n            }\n        });\n        onUpdateCar({...car, products: getProductListWithTotals(list)})\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col md={12} className=\"mb-3\">\n                        <h4 className=\"card-title text-info\"><i className=\"uil-box me-2\"> </i> Productos</h4>\n                    </Col>\n                    <Col md={4} className=\"mb-3\">\n                        <Label htmlFor=\"weight\">Descuento Global</Label>\n                        <FieldSelect\n                            id={\"discount\"}\n                            name={\"discount\"}\n                            options={buildNumericOptions(100, 5, 0)}\n                            defaultValue={globalDiscount}\n                            onChange={(item => setGlobalDiscount(parseInt(item.value)))}\n                            required\n                        />\n                    </Col>\n                    <Col md={12}>\n                        <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                            <thead>\n                            <tr>\n                                <th className=\"text-center\">Código</th>\n                                <th className=\"text-center\">Color</th>\n                                <th className=\"text-center\">Talla</th>\n                                <th className=\"text-center\">Cantidad</th>\n                                <th className=\"text-center\">Precio Unit.</th>\n                                <th className=\"text-center\">% Desc.</th>\n                                <th className=\"text-center\">Total Desc.</th>\n                                <th className=\"text-center\">SubTotal</th>\n                                <th className=\"text-center\"> </th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {map(car.products, (product, key) => (\n                                <tr key={key}>\n                                    <td style={{width: '10%'}}>\n                                        <HtmlTooltip\n                                            title={\n                                                <React.Fragment>\n                                                    <Images src={`${getImageByQuality(product.origin.productImage.length > 0 ? product.origin.productImage[0] : {}, 'medium')}`}\n                                                            alt={product.origin.reference}\n                                                            height={100}\n                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                </React.Fragment>\n                                            }>\n                                            <div className=\"text-info\">{product.origin.reference}</div>\n                                        </HtmlTooltip>\n                                    </td>\n                                    <td style={{width: '25%'}} className=\"text-center\">{product.color}</td>\n                                    <td style={{width: '15%'}} className=\"text-center\">{product.size}</td>\n                                    <td style={{width: '10%'}}>\n                                        <FieldSelect\n                                            id={\"quantity\"}\n                                            name={\"quantity\"}\n                                            options={buildNumericOptions(product.quantityAvailable)}\n                                            defaultValue={product.quantity}\n                                            onChange={item => onChangeQuantity(item.value, product)}\n                                            required\n                                        />\n                                    </td>\n                                    <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.origin.price)}</td>\n                                    <td style={{width: '10%'}} className=\"text-center\">\n                                        {globalDiscount > 0 && (<>{product.discountPercentage + '%'}</>)}\n                                        {globalDiscount === 0 && (\n                                            <FieldDecimalNumber\n                                                id={\"discountProd\"}\n                                                name={\"discountProd\"}\n                                                value={product.discountPercentage}\n                                                onChange={val => onChangeDiscount((val ? val : 0), product)}\n                                            />\n                                        )}\n                                    </td>\n                                    <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.discount)}</td>\n                                    <td style={{width: '15%'}} className=\"text-end\">{priceFormat(product.total)}</td>\n                                    <td style={{width: '5%'}} className=\"text-end\">\n                                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => removeProduct(product)}>\n                                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                        </button>\n                                    </td>\n                                </tr>\n                            ))}\n                            {car.products.length === 0 && (\n                                <tr>\n                                    <td colSpan={8} className=\"text-center text-muted\">Pedido vacio</td>\n                                </tr>\n                            )}\n                            </tbody>\n                        </table>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderCar.propTypes = {\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {product, error, loading} = state.Product\n    const {car} = state.Order\n    return {car, product, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderCar))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderCustomer.js",["1351","1352"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect} from \"../../../components/Fields\";\nimport {CUSTOMER} from \"../../../helpers/url_helper\";\nimport {getCustomer, updateCustomer} from \"../../../store/customer/actions\";\nimport {getEmptyOptions} from \"../../../common/converters\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport Conditionals from \"../../../common/conditionals\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport CustomerForm from \"../../CustomerEdit/CustomerForm\";\nimport {updateCard} from \"../../../store/order/actions\";\nimport {hasCustomerOpenOrders} from \"../../../helpers/service\";\nimport OrdersPieChart from \"../../CustomerEdit/OrdersPieChart\";\nimport CategoriesPieChart from \"../../CustomerEdit/CategoriesPieChart\";\n\nconst searchByOptions = [{label: \"Documento\", value: \"doc\"}, {label: \"Nombre\", value: \"name\"}, {label: \"Correo\", value: \"email\"}, {label: \"Teléfono\", value: \"phone\"}];\n\nconst OrderCustomer = (props) => {\n    const {car, customer, onGetCustomer, hasCustomerOpenOrders, onUpdateCar, showAsModal, onUpdateCustomer} = props;\n    const [initComponent, setInitComponent] = useState(true);\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [editCustomer, setEditCustomer] = useState(false);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n    const [openCustomerStatsModal, setOpenCustomerStatsModal] = useState(false);\n    const [hasPendingOrders, setHasPendingOrders] = useState(false);\n    const [customerData, setCustomerData] = useState({});\n    const [customerDefault, setCustomerDefault] = useState(getEmptyOptions());\n    const [customerEmailDefault, setCustomerEmailDefault] = useState(getEmptyOptions());\n    const [customerDocumentDefault, setCustomerDocumentDefault] = useState(getEmptyOptions());\n\n    useEffect(() => {\n        if (showAsModal && car.isEdit && car.customer && car.customer.id && initComponent) {\n            setInitComponent(false);\n            onGetCustomer(car.customer.id);\n        }\n    }, [showAsModal]);\n\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n            if(customer.id) onUpdateCar({...car, customer});\n            if (car && !car.orderId) hasCustomerOpenOrders(customer.id).then(resp => setHasPendingOrders(resp && resp.data && resp.data.length > 0));\n        } else {\n            resetData();\n        }\n    }, [customer]);\n\n    const toggleCustomerStatsModal = () => {\n        setOpenCustomerStatsModal(!openCustomerStatsModal);\n    }\n    const toggleModal = () => {\n        setOpenCustomerModal(!openCustomerModal);\n    }\n    const toggleActivateCustomer = () => {\n        onUpdateCustomer(customer.id, {status: !customer.status});\n        setTimeout(() => {\n            onGetCustomer(customer.id)\n        }, 500);\n        ;\n        //resetData();\n    }\n\n    const resetData = () => {\n        setCustomerDefault(getEmptyOptions());\n        setCustomerEmailDefault(getEmptyOptions());\n        setCustomerDocumentDefault(getEmptyOptions());\n        setCustomerData({})\n        setHasPendingOrders(false)\n    }\n\n    const onCloseCustomerModal = () => {\n        toggleModal();\n        setEditCustomer(false);\n    }\n\n    const onAcceptCustomerModal = () => {\n        toggleModal();\n        setCustomerDefault(getEmptyOptions());\n        setCustomerEmailDefault(getEmptyOptions());\n        setCustomerDocumentDefault(getEmptyOptions());\n        if (editCustomer) {\n            onGetCustomer(customer.id);\n        }\n        setEditCustomer(false);\n    }\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col>\n                    <h4 className=\"card-title text-info\"><i className=\"uil-users-alt me-2\"> </i> Datos del cliente</h4>\n                </Col>\n            </Row>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Row>\n                    <Col md={2}>\n                        <Label htmlFor=\"product\">Buscar por</Label>\n                        <FieldSelect\n                            id={\"searchByOptions\"}\n                            name={\"searchByOptions\"}\n                            options={searchByOptions}\n                            defaultValue={searchBy}\n                            onChange={(e) => {\n                                setSearchBy(e.value);\n                            }}\n                        />\n                    </Col>\n                    {searchBy === \"doc\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"product\">Documento</Label>\n                            <FieldAsyncSelect\n                                name={\"product\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por documento\"\n                                defaultValue={customerDocumentDefault}\n                                isClearable={true}\n                                hasWild={false}\n                                conditionalOptions={{fieldName: 'document', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        resetData();\n                                    }\n                                    else {\n                                        onGetCustomer(c.value);\n                                        setCustomerDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"name\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Nombre</Label>\n                            <FieldAsyncSelect\n                                name={\"customer\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por nombre\"\n                                defaultValue={customerDefault}\n                                isClearable={true}\n                                hasWild={false}\n                                conditionalOptions={{fieldName: 'name', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        resetData();\n                                    }\n                                    else {\n                                        onGetCustomer(c.value);\n                                        setCustomerDocumentDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"email\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Correo</Label>\n                            <FieldAsyncSelect\n                                name={\"email\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por correo\"\n                                defaultValue={customerEmailDefault}\n                                isClearable={true}\n                                hasWild={true}\n                                conditionalOptions={{fieldName: 'email', operator: Conditionals.OPERATORS.LIKE}}\n                                onChange={(c, meta) => {\n                                    if(meta.action === \"clear\"){\n                                        resetData();\n                                    } else {\n                                        onGetCustomer(c.value);\n                                        setCustomerEmailDefault(getEmptyOptions());\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    {searchBy === \"phone\" && (\n                        <Col md={9}>\n                            <Label htmlFor=\"customer\">Telefono</Label>\n                            <FieldAsyncSelect\n                                name={\"phone\"}\n                                urlStr={CUSTOMER}\n                                placeholder=\"Buscar por número de teléfono\"\n                                defaultValue={customerEmailDefault}\n                                isClearable={true}\n                                hasWild={true}\n                                conditionalOptions={{fieldName: 'phone', operator: Conditionals.OPERATORS.EQUAL}}\n                                onChange={(c, meta) => {\n                                    if (meta.action === \"clear\") {\n                                        resetData();\n                                    } else {\n                                        onGetCustomer(c.value);\n                                    }\n                                }}\n                            />\n                        </Col>\n                    )}\n                    <Col md={1} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                        <Tooltip placement=\"bottom\" title=\"Agregar nuevo cliente\" aria-label=\"add\">\n                            <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\" onClick={() => toggleModal()}>\n                                <i className=\"fa fa-user-plus\"> </i>\n                            </button>\n                        </Tooltip>\n                    </Col>\n                </Row>\n            </AvForm>\n            {customerData.id && (\n                <Row className=\"mt-3\">\n                    <Col md={10}>\n                        <Row>\n                            <Col md={6}>\n                                <label>Nombre: </label>\n                                <span className=\"p-1\">{customerData.name}</span>\n                                {customerData.isMayorist === true && (\n                                    <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                        <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                    </Tooltip>\n                                )}\n                            </Col>\n                            <Col md={6}>\n                                <label>Correo: </label>\n                                <span className=\"p-1\">{customerData.email}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Departamento: </label>\n                                <span className=\"p-1\">{customerData.state?.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Municipio: </label>\n                                <span className=\"p-1\">{customerData.municipality?.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Documento: </label>\n                                <span className=\"p-1\">{customerData.document}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono Celular: </label>\n                                <span className=\"p-1\">{customerData.cellphone}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono Residencial: </label>\n                                <span className=\"p-1\">{customerData.phone}</span>\n                            </Col>\n                            <Col md={12}>\n                                <label>Dirección: </label>\n                                <small className=\"p-1\" style={{wordBreak: 'break-all'}}>{customerData.address}</small>\n                            </Col>\n                        </Row>\n\n                    </Col>\n                    <Col md={2} className=\"text-right\">\n                        <Tooltip placement=\"bottom\" title={`${customer.status ? 'Inactivar Contrapago' : 'Activar Contrapago'}`} aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className={`btn btn-sm ${customer.status ? 'text-danger' : 'text-success'}`}\n                                    onClick={() => {\n                                        toggleActivateCustomer();\n                                    }}>\n                                <i className={`uil ${customer.status ? 'uil-multiply' : 'uil-check'} font-size-18`}> </i>\n                            </button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottom\" title=\"Editar cliente\" aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className=\"btn btn-sm text-primary\"\n                                    onClick={() => {\n                                        toggleModal();\n                                        setEditCustomer(true);\n                                    }}>\n                                <i className=\"uil uil-pen font-size-18\"> </i>\n                            </button>\n                        </Tooltip>\n                        <Tooltip placement=\"bottom\" title=\"Estadisticas del cliente\" aria-label=\"add\">\n                            <button type=\"button\"\n                                    size=\"small\"\n                                    className=\"btn btn-sm text-primary\"\n                                    onClick={() => {\n                                        toggleCustomerStatsModal();\n                                    }}>\n                                <i className=\"uil uil-chart font-size-18\"> </i>\n                            </button>\n                        </Tooltip>\n\n                    </Col>\n\n                    {hasPendingOrders && (\n                        <Col md={12} >\n                            <div className=\"alert alert-warning m-0 font-size-14\">\n                                <i className=\"uil uil-exclamation-triangle\"> </i> <b>Existe un pedido apartado para el cliente seleccionado, Solicite autorización para realizar este pedido.</b>\n                            </div>\n                        </Col>\n                    )}\n\n                    {!customer.status && (\n                        <Col md={12} >\n                            <div className=\"alert alert-danger m-0 font-size-14\">\n                                <i className=\"uil uil-exclamation-triangle\"> </i> <b>Este cliente no puede generar pedidos ContraPago.</b>\n                            </div>\n                        </Col>\n                    )}\n\n                    {showAsModal && (\n                        <>\n                            <hr/>\n                            <Row>\n                                <Col md={12} className=\"text-right\">\n                                    {props.onCloseModal && (\n                                        <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                    )}\n                                    {props.onAcceptModal && (\n                                        <Button color=\"primary\" type=\"button\" onClick={() => props.onAcceptModal()}>Guardar</Button>\n                                    )}\n                                </Col>\n                            </Row>\n                        </>\n                    )}\n                </Row>\n            )}\n            <CustomModal title={editCustomer ? \"Modificar cliente\" : \"Nuevo cliente\"} size=\"lg\" showFooter={false} isOpen={openCustomerModal} onClose={onCloseCustomerModal}>\n                <CustomerForm customer={customerData}\n                              showAsModal={true}\n                              onCloseModal={onCloseCustomerModal}\n                              onAcceptModal={onAcceptCustomerModal}\n                />\n            </CustomModal>\n            <CustomModal title={\"Estadisticas del cliente\"} size=\"lg\" isOpen={openCustomerStatsModal} onClose={toggleCustomerStatsModal}>\n                <Row>\n                    <Col md={6} className=\"mb-3\">\n                        <OrdersPieChart customerId={customerData.id}/>\n                    </Col>\n                    <Col md={6} className=\"mb-3\">\n                        <CategoriesPieChart customerId={customerData.id}/>\n                    </Col>\n                </Row>\n            </CustomModal>\n        </React.Fragment>\n    )\n}\n\nOrderCustomer.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    history: PropTypes.object\n}\n\nconst mapStateToProps = state => {\n    const {customer, error, loading} = state.Customer\n    const {car} = state.Order\n    return {car, customer, error, loading};\n}\n\nconst mapDispatchToProps = dispatch => ({\n    hasCustomerOpenOrders,\n    onGetCustomer: (id) => dispatch(getCustomer(id)),\n    onUpdateCustomer: (id, data) => dispatch(updateCustomer(id, data)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderCustomer))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderDeliveryOptions.js",["1353","1354","1355","1356","1357","1358","1359","1360"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDecimalNumber, FieldNumber, FieldSelect, FieldText} from \"../../../components/Fields\";\nimport {getProduct} from \"../../../store/product/actions\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {getFieldOptionByGroups} from \"../../../store/fieldOptions/actions\";\nimport {DELIVERY_METHODS, DELIVERY_METHODS_PAYMENT_TYPES, DELIVERY_TYPES, GROUPS, PAYMENT_TYPES, PAYMENT_TYPES_LIST} from \"../../../common/constants\";\nimport {getDeliveryMethods, getDeliveryQuote, updateCard} from \"../../../store/order/actions\";\nimport {arrayToOptions, getEmptyOptions} from \"../../../common/converters\";\nimport {Button} from \"@material-ui/core\";\nimport {getAllDeliveryLocalities} from \"../../../store/deliveryLocality/actions\";\n\nconst OrderDeliveryOptions = (props) => {\n    const {\n        onUpdateCar, car, fieldOptions, onGetFieldOptions, onGetDeliveryMethods, onGetDeliveryQuote, deliveryMethods, deliveryQuote,\n        showAsModal, onCloseModal, onAcceptModal, pOriginOrder,\n        onGetDeliveryLocalities, deliveryLocalities,\n    } = props;\n\n    const [initComponent, setInitComponent] = useState(true);\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState(null);\n    const [deliveryLocalitiesList, setDeliveryLocalitiesList] = useState([]);\n    const [deliveryLocality, setDeliveryLocality] = useState(null);\n    const [originOrders, setOriginOrders] = useState([]);\n    const [originOrder, setOriginOrder] = useState(pOriginOrder || null);\n    const [deliveryTypes, setDeliveryTypes] = useState(null);\n    const [deliveryType, setDeliveryType] = useState(null);\n    const [paymentTypes, setPaymentTypes] = useState(null);\n    const [paymentType, setPaymentType] = useState(null);\n    const [tracking, setTracking] = useState(null);\n    const [deliveryCost, setDeliveryCost] = useState(null);\n    const [otherMethod, setOtherMethod] = useState(null);\n    const [pieceToChange, setPieceToChange] = useState(null);\n    const [showPaymentType, setShowPaymentType] = useState(false);\n    const [hasAddress, setHasAddress] = useState(false);\n    const [productQty, setProductQty] = useState(0);\n\n    //Carga inicial\n    useEffect(() => {\n        setDeliveryTypes([getEmptyOptions(), ...DELIVERY_TYPES.map(dt => ({label: dt.label, value: dt.id}))]);\n        setPaymentTypes([getEmptyOptions(), ...PAYMENT_TYPES_LIST]);\n        onGetFieldOptions();\n        if(!deliveryMethods || deliveryMethods.length === 0) onGetDeliveryMethods();\n        onGetDeliveryLocalities();\n        if (car.reset) {\n            setDeliveryMethod(null);\n            setOriginOrder(null);\n            setDeliveryType(null);\n            setPaymentType(null);\n            setDeliveryCost(null);\n            setPieceToChange(null);\n            setShowPaymentType(false);\n            setProductQty(0);\n            setTracking(\"\");\n            setHasAddress(false);\n        }\n    }, [onGetFieldOptions, car.reset]);\n\n    useEffect(() => {\n        const list = fieldOptions || [];\n        setOriginOrders([getEmptyOptions(), ...list.filter(op => (op.groups === GROUPS.ORDERS_ORIGIN)).map(op => ({label: op.name, value: op.name}))]);\n    }, [fieldOptions]);\n\n    useEffect(() => {\n        const list = deliveryLocalities || [];\n        setDeliveryLocalitiesList([getEmptyOptions(), ...arrayToOptions(list)]);\n    }, [deliveryLocalities]);\n\n    useEffect(() => {\n        const list = deliveryMethods || [];\n        const ot = deliveryType + '';\n        setDeliveryMethodList([getEmptyOptions(), ...list.filter(op => (op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        onChangeDeliveryOptions();\n    }, [deliveryType]);\n\n    useEffect(() => {\n        if (deliveryMethod) {\n            setShowPaymentType(DELIVERY_METHODS_PAYMENT_TYPES.includes(deliveryMethod));\n            getQuote();\n            onChangeDeliveryOptions();\n        }\n    }, [deliveryMethod]);\n\n    useEffect(() => {\n        if (deliveryMethods) {\n            const ot = deliveryType ? deliveryType + '' : null;\n            setDeliveryMethodList([getEmptyOptions(), ...deliveryMethods.filter(op => (!ot || op.settings.includes(ot))).map(op => ({label: op.name, value: op.code}))]);\n        }\n    }, [deliveryMethods]);\n\n    useEffect(() => {\n        if (deliveryMethod && deliveryQuote) {\n            console.log('YG deliveryQuote', car.deliveryOptions, props)\n            if (!car.isEdit) {\n                setDeliveryCost(parseFloat(deliveryQuote.amount));\n            }\n            onChangeDeliveryOptions();\n        }\n    }, [deliveryQuote]);\n\n    useEffect(() => {\n        onChangeDeliveryOptions();\n    }, [deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, otherMethod]);\n\n    useEffect(() => {\n        getQuote();\n    }, [car.products]);\n\n    useEffect(() => {\n        if (car.isEdit && car.deliveryOptions && car.deliveryOptions.origin && initComponent) {\n            setInitComponent(false);\n            console.log('YG ', car.deliveryOptions, props)\n            setDeliveryMethod(car.deliveryOptions.method);\n            setOriginOrder(car.deliveryOptions.origin);\n            setDeliveryType(car.deliveryOptions.type);\n            setDeliveryCost(car.deliveryOptions.cost);\n            setPieceToChange(car.deliveryOptions.pieces);\n            setDeliveryLocality(car.deliveryOptions.deliveryLocality);\n            setTracking(car.deliveryOptions.tracking);\n            setOtherMethod(car.deliveryOptions.otherMethod);\n            setShowPaymentType(DELIVERY_METHODS_PAYMENT_TYPES.includes(car.deliveryOptions.method));\n\n            if (car.deliveryOptions.paymentType)\n                setPaymentType(car.deliveryOptions.paymentType === 1 ? PAYMENT_TYPES.CASH : PAYMENT_TYPES.TRANSFER);\n            //getQuote()\n        }\n    }, [car.deliveryOptions]);\n\n    const getQuote = () => {\n        let qty = 0;\n        car.products.forEach(prod => (qty += prod.quantity));\n        if (qty > 0 && deliveryMethod && (qty !== productQty || car.deliveryOptions.method !== deliveryMethod)) {\n            setProductQty(qty);\n            let products = car.products.map(prod => ({id: prod.origin.id, qty: prod.quantity}));\n            onGetDeliveryQuote({deliveryType: deliveryType, deliveryMethodCode: deliveryMethod, products});\n        }\n    }\n\n    const onChangeDeliveryOptions = () => {\n        let deliveryOps = {\n            origin: originOrder,\n            type: deliveryType,\n            method: deliveryMethod,\n            cost: parseFloat(deliveryCost),\n            paymentType: paymentType,\n            pieces: pieceToChange,\n            deliveryLocality: deliveryLocality,\n            otherMethod: otherMethod,\n        };\n\n        //Se agrega validacion si es mensajero, previo pago o previo pago cod no tiene direccion de envio\n        setHasAddress(!(deliveryMethod === \"MENSAJERO\" || [1,2].includes(deliveryType)));\n\n        if(tracking && tracking !== ''){\n            deliveryOps.tracking = tracking;\n        }\n        onUpdateCar({...car, deliveryOptions: deliveryOps});\n    }\n\n    const acceptModal = () => {\n        onAcceptModal(car);\n    }\n\n    const showGuia = () => car.deliveryOptions.tracking\n    // console.log('yg deliveryCost', deliveryCost)\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => acceptModal(e, v)}>\n                <Row>\n                    <Col>\n                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Opciones de envio</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Origen del pedido</Label>\n                        <FieldSelect\n                            id={\"originOrder\"}\n                            name={\"originOrder\"}\n                            options={originOrders}\n                            defaultValue={originOrder}\n                            onChange={item => setOriginOrder(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Tipo de pedido</Label>\n                        <FieldSelect\n                            id={\"deliveryType\"}\n                            name={\"deliveryType\"}\n                            options={deliveryTypes}\n                            defaultValue={deliveryType}\n                            onChange={item => setDeliveryType(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Metodo de envio</Label>\n                        <FieldSelect\n                            id={\"deliveryMethod\"}\n                            name={\"deliveryMethod\"}\n                            options={deliveryMethodList}\n                            defaultValue={deliveryMethod}\n                            onChange={item => setDeliveryMethod(item.value)}\n                            required\n                        />\n                    </Col>\n                    <Col md={6} className=\"p-1\">\n                        <Label htmlFor=\"weight\">Costo del envio</Label>\n                        <FieldDecimalNumber\n                            id={\"deliveryCost\"}\n                            name={\"deliveryCost\"}\n                            value={deliveryCost}\n                            onChange={val => setDeliveryCost(val)}\n                            required/>\n                    </Col>\n                    {deliveryMethod === DELIVERY_METHODS.OTRO && (\n                        <Col md={6} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Especifique</Label>\n                            <FieldText\n                                id={\"otherMethod\"}\n                                name={\"otherMethod\"}\n                                value={otherMethod}\n                                onChange={item => setOtherMethod(item.target.value)}\n                                required/>\n                        </Col>\n                    )}\n\n                    {(deliveryMethod && !showPaymentType && hasAddress) && (\n                        <Col md={12} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Localidad</Label>\n                            <FieldSelect\n                                id={\"deliveryLocality\"}\n                                name={\"deliveryLocality\"}\n                                options={deliveryLocalitiesList}\n                                defaultValue={deliveryLocality}\n                                onChange={item => setDeliveryLocality(item.value)}\n                                required\n                                isSearchable\n                            />\n                        </Col>\n                    )}\n                    {showPaymentType && (\n                        <>\n                            <Col md={6} className=\"p-1\">\n                                <Label htmlFor=\"weight\">Forma de pago</Label>\n                                <FieldSelect\n                                    id={\"paymentType\"}\n                                    name={\"paymentType\"}\n                                    options={paymentTypes}\n                                    defaultValue={paymentType}\n                                    onChange={item => {\n                                        setPaymentType(item.value)\n                                    }}\n                                    required\n                                />\n                            </Col>\n                            <Col md={6} className=\"p-1\">\n                                <Label htmlFor=\"weight\">Prendas para cambio</Label>\n                                <FieldNumber\n                                    id={\"pieceToChange\"}\n                                    name={\"pieceToChange\"}\n                                    value={pieceToChange}\n                                    onChange={val => setPieceToChange(val)}\n                                    />\n                            </Col>\n                        </>\n                    )}\n                    {!!(showGuia() && tracking && tracking !== '') && (\n                        <Col md={6} className=\"p-1\">\n                            <Label htmlFor=\"weight\">Guia número</Label>\n                            <div className=\"form-control\">{tracking}</div>\n                            {/* <FieldText\n                                id={\"tracking\"}\n                                name={\"tracking\"}\n                                value={tracking}\n                                onChange={item => setTracking(item.target.value)}\n                            />*/}\n                        </Col>\n                    )}\n                </Row>\n                {showAsModal && (\n                    <>\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                {onAcceptModal && (\n                                    <Button color=\"primary\" type=\"submit\">Guardar</Button>\n                                )}\n                            </Col>\n                        </Row>\n                    </>\n                )}\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nOrderDeliveryOptions.propTypes = {\n    history: PropTypes.object\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProduct: (id) => dispatch(getProduct(id)),\n    onGetFieldOptions: (conditional = null, limit = 500, page) => dispatch(getFieldOptionByGroups([GROUPS.ORDERS_ORIGIN], limit, page)),\n    onGetDeliveryLocalities: () => dispatch(getAllDeliveryLocalities()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n    onGetDeliveryQuote: (request) => dispatch(getDeliveryQuote(request)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n})\n\nconst mapStateToProps = state => {\n    const {deliveryLocalities} = state.DeliveryLocalities\n    const {fieldOptions} = state.FieldOption\n    const {car, deliveryMethods, deliveryQuote} = state.Order\n    return {car, deliveryLocalities, deliveryMethods: deliveryMethods.data, deliveryQuote: deliveryQuote.data, fieldOptions};\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OrderDeliveryOptions))\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/create/orderProducts.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/backend_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/conditionals.js",["1361","1362"],"/*\n*  {field: 1, operator: $lk, value: 1, value: 2}\n* */\n\n/* recibe un arreglo de objetos y lo transforma en una condicion */\nfunction getConditionalFormat(options) {\n    if (options && options.length > 0) {\n        let hasOr = false;\n        let conditions = options.map(item => {\n            if(item != \"$or\") {\n                if (!item.moreValues) {\n                    return (item.field + item.operator + item.value)\n                } else {\n                    item.moreValues = item.moreValues.join(\"::\");\n                    return (item.field + item.operator + item.value + \"::\" + item.moreValues)\n                }\n            } else {\n                hasOr = true;\n            }\n        }).filter(item => item !== undefined);\n        if(hasOr){\n            conditions = conditions.join(\"$or\");\n        }else {\n            conditions = conditions.join(\"|\");\n        }\n        console.log(conditions);\n        return conditions;\n    }\n    return null;\n}\n\n/* Construye un formato valido para las peticiones GET (URL) */\nfunction buildHttpGetQuery(cond = null, limit = null, offset = null, order = false) {\n    const data = {};\n    if (cond) {\n        data.conditional = cond;\n    }\n    if (limit) {\n        data.limit = limit;\n    }\n    if (offset || offset === 0) {\n        data.offset = offset;\n    }\n    if (order) {\n        data.order = order.field;\n        data.orderType = order.type;\n    }\n\n    return urlSearchParams(data);\n}\nfunction urlSearchParams(data) {\n    return new URLSearchParams(data);\n}\n\nfunction buildCondition(field, value, operator = null, moreValues = []) {\n    let condition;\n    if (operator === null) {\n        condition = {field, value, operator: \"::\"};\n    } else if (moreValues.length > 0) {\n        condition = {field, value, operator, moreValues};\n    } else {\n        if ([OPERATORS.NULL, OPERATORS.NOT_NULL].includes(operator) || [OPERATORS.TRUE, OPERATORS.FALSE].includes(operator)) {\n            condition = {field, value: \"\", operator};\n        } else {\n            condition = {field, value, operator};\n        }\n    }\n    return condition;\n}\n\n/* recibe field, value, operador y en caso de tener 2 o mas valores moreValues (Array) */\nclass Condition {\n    condition = [];\n    addOr() {\n        this.condition.push(\"$or\");\n    }\n    add(field, value, operator = null, moreValues = []) {\n        this.condition.push(buildCondition(field, value, operator, moreValues))\n    }\n    all() {\n        return this.condition;\n    }\n}\n\nconst OPERATORS = {\n    EQUAL: '::',\n    NOT_EQUAL: '$ne',\n    NULL: '$null',\n    NOT_NULL: '$nnull',\n    TRUE: '$true',\n    FALSE: '$false',\n    NOT_EMPTY: '$nempty',\n    EMPTY: '$empty',\n    NOT_LIKE: '$nlk',\n    LIKE: '$lk',\n    NOT_BETWEEN: '$nbt',\n    BETWEEN: '$bt',\n    LESS_THAN_OR_EQUAL: '$lte',\n    LESS_THAN: '$lt',\n    GREATER_THAN_OR_EQUAL: '$gte',\n    GREATER_THAN: '$gt',\n    NOT_IN: '$nin',\n    IN: '$in',\n    COUNT: 'count',\n};\n\nconst Conditionals = {\n    Condition,\n    urlSearchParams,\n    buildHttpGetQuery,\n    getConditionalFormat,\n    OPERATORS,\n    buildCondition\n};\n\nexport default Conditionals;\n","/Users/ramon/Repositories/lucy-moie/src/store/office/actions.js",["1363"],"import {\n    ADD_ORDER_OFFICE,\n    ADD_ORDER_OFFICE_FAILED,\n    ADD_ORDER_OFFICE_SUCCESS,\n    CONFIRM_OFFICE,\n    CONFIRM_OFFICE_FAILED,\n    CONFIRM_OFFICE_SUCCESS,\n    DELETE_OFFICE,\n    DELETE_OFFICE_FAILED,\n    DELETE_OFFICE_SUCCESS,\n    DELETE_ORDER_OFFICE,\n    DELETE_ORDER_OFFICE_FAILED,\n    DELETE_ORDER_OFFICE_SUCCESS,\n    GET_OFFICE,\n    GET_OFFICE_FAILED,\n    GET_OFFICE_SUCCESS,\n    GET_OFFICES,\n    GET_OFFICES_FAILED,\n    GET_OFFICES_SUCCESS,\n    IMPORT_FILE,\n    IMPORT_FILE_FAILED,\n    IMPORT_FILE_RESET,\n    IMPORT_FILE_SUCCESS,\n    PRINT_OFFICE_REPORT,\n    PRINT_OFFICE_REPORT_FAILED,\n    PRINT_OFFICE_REPORT_RESET,\n    PRINT_OFFICE_REPORT_SUCCESS,\n    QUERY_OFFICES,\n    QUERY_OFFICES_FAILED,\n    QUERY_OFFICES_SUCCESS,\n    REGISTER_OFFICE,\n    REGISTER_OFFICE_FAILED,\n    REGISTER_OFFICE_SUCCESS,\n    RESET_OFFICE,\n    UPDATE_OFFICE,\n    UPDATE_OFFICE_FAILED,\n    UPDATE_OFFICE_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetOffice = () => ({\n    type: RESET_OFFICE,\n})\n\nexport const getOffices = (conditional, limit, offset) => ({\n    type: GET_OFFICES,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\n\n\nexport const getOfficesByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if(ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getOffices(conditions.all(), ids.length, offset);\n}\n\nexport const getOfficesSuccess = (data, meta) => ({\n    type: GET_OFFICES_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getOfficesFailed = error => ({\n    type: GET_OFFICES_FAILED,\n    payload: error,\n})\n\nexport const getOffice = id => ({\n    type: GET_OFFICE,\n    id\n})\n\nexport const getOfficeSuccess = data => ({\n    type: GET_OFFICE_SUCCESS,\n    payload: data,\n})\n\nexport const getOfficeFailed = error => ({\n    type: GET_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const registerOffice = (data, history) => {\n    return {\n        type: REGISTER_OFFICE,\n        payload: { data, history },\n    }\n}\n\nexport const registerOfficeSuccess = data => {\n    return {\n        type: REGISTER_OFFICE_SUCCESS,\n        payload: data.office,\n    }\n}\n\n\nexport const registerOfficeFailed = data => {\n    return {\n        type: REGISTER_OFFICE_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateOffice = (id, data, history) => {\n    return {\n        type: UPDATE_OFFICE,\n        payload: { id, data, history },\n    }\n}\n\nexport const updateOfficeSuccess = data => {\n    return {\n        type: UPDATE_OFFICE_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateOfficeFail = error => {\n    return {\n        type: UPDATE_OFFICE_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteOffice = (id, history) => ({\n    type: DELETE_OFFICE,\n    payload: { id, history}\n})\n\nexport const deleteOfficeSuccess = () => ({\n    type: DELETE_OFFICE_SUCCESS\n})\n\nexport const deleteOfficeFailed = error => ({\n    type: DELETE_OFFICE_FAILED,\n    payload: error,\n})\n\nexport const confirmOffice = (id, history) => ({\n    type: CONFIRM_OFFICE,\n    payload: { id, history}\n})\n\nexport const confirmOfficeSuccess = () => ({\n    type: CONFIRM_OFFICE_SUCCESS\n})\n\nexport const confirmOfficeFailed = error => ({\n    type: CONFIRM_OFFICE_FAILED,\n    payload: error,\n})\n\n\n\nexport const countOfficeByStatus = () => {\n    const params = {operation:'id::count', group:\"status\"};\n    return queryOffices(params, 'statusGroup');\n}\n\nexport const queryOffices = (params, node) => ({\n    type: QUERY_OFFICES,\n    params: params,\n    node: node,\n})\nexport const queryOfficesFailed = error => ({\n    type: QUERY_OFFICES_FAILED,\n    payload: error,\n})\nexport const queryOfficesSuccess = (data, meta, node) => ({\n    type: QUERY_OFFICES_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const addOrderOffice = (id, data, conditional, history) => {\n    return {\n        type: ADD_ORDER_OFFICE,\n        payload: { id, data, conditional, history },\n    }\n}\n\nexport const addOrderOfficeSuccess = data => {\n    return {\n        type: ADD_ORDER_OFFICE_SUCCESS,\n        payload: data.office,\n    }\n}\n\n\nexport const addOrderOfficeFailed = data => {\n    return {\n        type: ADD_ORDER_OFFICE_FAILED,\n        payload: data,\n    }\n}\n\nexport const deleteOrderOffice = (id, data, conditional, history) => {\n    return {\n        type: DELETE_ORDER_OFFICE,\n        payload: { id, data, conditional, history },\n    }\n}\n\nexport const deleteOrderOfficeSuccess = data => {\n    return {\n        type: DELETE_ORDER_OFFICE_SUCCESS\n    }\n}\n\n\nexport const deleteOrderOfficeFailed = data => {\n    return {\n        type: DELETE_ORDER_OFFICE_FAILED\n    }\n}\n\nconsole.log('importFile')\nexport const importFileReset = () => ({\n    type: IMPORT_FILE_RESET\n})\nexport const importFile = (data) => ({\n    type: IMPORT_FILE,\n    payload: {data}\n})\nexport const importFileFailed = error => ({\n    type: IMPORT_FILE_FAILED,\n    payload: error,\n})\nexport const importFileSuccess = () => ({\n    type: IMPORT_FILE_SUCCESS\n})\n\nexport const printOfficeReport = (id) => ({\n    type: PRINT_OFFICE_REPORT,\n    payload: { id}\n})\nexport const printOfficeReportSuccess = (data) => ({\n    type: PRINT_OFFICE_REPORT_SUCCESS,\n    payload: data\n})\nexport const printOfficeReportFailed = error => ({\n    type: PRINT_OFFICE_REPORT_FAILED,\n    payload: error,\n})\nexport const resetPrintOfficeReport = () => ({\n    type: PRINT_OFFICE_REPORT_RESET\n})\n\n\n","/Users/ramon/Repositories/lucy-moie/src/common/converters.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Modal/CommosModal.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/Autocomplete.js",["1364"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormGroup, FormText} from \"reactstrap\";\nimport theme from './scss/autocomplete.scss';\nimport Autosuggest from 'react-autosuggest';\n\nconst Autocomplete = (props) => {\n    const [selected, setSelected] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n    const {defaultValue, options} = props;\n\n    const getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        return inputValue.length === 0 ? [] : (options || []).filter(item => {\n                return item.name.toLowerCase().includes(inputValue)\n            }\n        );\n    };\n\n    const getSuggestionValue = suggestion => suggestion.name;\n\n    const renderSuggestion = suggestion => (\n        <div className=\"font-size-12\">\n            {suggestion.name}\n        </div>\n    )\n    const onSuggestionSelected = (val) => {\n        setSelected(val.currentTarget.textContent)\n        props.onChange && props.onChange(val.currentTarget.textContent || '')\n    }\n\n    useEffect(() => {\n        setSelected(defaultValue || '');\n    }, [defaultValue]);\n\n    const onSuggestionsFetchRequested = ({value}) => {\n        setSuggestions(getSuggestions(value))\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([])\n    };\n\n    return (\n        <AvAutoSuggestInput\n            validate={{\n                required: {value: props.required === true, errorMessage: messages.required}\n            }}\n            name={props.name}\n            value={selected}\n            placeholder={props.placeholder}\n            disabled={props.disabled}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            onSuggestionSelected={onSuggestionSelected}\n            onChange={(e) => setSelected(e.target.value || '')}\n            suggestions={suggestions || []}\n        />\n    )\n}\n\nAutocomplete.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array,\n    defaultValue: PropTypes.any,\n};\n\nclass AvAutoSuggestInput extends AvBaseInput {\n    render() {\n        const {name, value, onChange, onSuggestionSelected, onSuggestionsFetchRequested, onSuggestionsClearRequested, getSuggestionValue, renderSuggestion, suggestions, placeholder, helpMessage, disabled} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <Autosuggest\n                        name={name}\n                        suggestions={suggestions}\n                        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                        onSuggestionsClearRequested={onSuggestionsClearRequested}\n                        getSuggestionValue={getSuggestionValue}\n                        renderSuggestion={renderSuggestion}\n                        onSuggestionSelected={onSuggestionSelected}\n                        inputProps={{\n                            placeholder: placeholder,\n                            value,\n                            onChange: onChange,\n                        }}\n                        theme={{\n                            ...theme,\n                            input: 'form-control',\n                            container: 'react-autosuggest__container',\n                            containerOpen: 'react-autosuggest__container--open',\n                            inputOpen: 'react-autosuggest__input--open',\n                            inputFocused: 'react-autosuggest__input--focused',\n                            suggestionsContainer: 'react-autosuggest__suggestions-container',\n                            suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',\n                            suggestionsList: 'react-autosuggest__suggestions-list',\n                            suggestion: 'react-autosuggest__suggestion',\n                            suggestionFirst: 'react-autosuggest__suggestion--first',\n                            suggestionHighlighted: 'react-autosuggest__suggestion--highlighted',\n                            sectionContainer: 'react-autosuggest__section-container',\n                            sectionContainerFirst: 'react-autosuggest__section-container--first',\n                            sectionTitle: 'react-autosuggest__section-title'\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default Autocomplete;\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputDate.js",["1365"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Select from \"react-select\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\nimport \"flatpickr/dist/themes/material_blue.css\"\nimport Flatpickr from \"react-flatpickr\"\nimport \"flatpickr/dist/l10n/es.js\";\nimport \"../Fields/scss/customInputDate.scss\";\n\nexport const DATE_MODES = {\n    SINGLE: 'single',\n    MULTIPLE: 'multiple',\n    RANGE: 'range',\n};\n\nconst InputDateField = (props) => {\n    const [ selected, setSelected ] = useState(null);\n    const {defaultValue, options} = props;\n\n    useEffect(() => {\n        /*if(options && options.length > 0) {\n            if(defaultValue) {\n                const selected = options.filter(item => item.value === defaultValue)[0];\n                setSelected(selected);\n            } else {\n                setSelected(null);\n            }\n        }*/\n        setSelected(defaultValue ? defaultValue: null);\n    }, [options, defaultValue]);\n\n    return (\n        <AvSearchInput\n            validate={\n                {\n                    required: { value: props.required ? true : false, errorMessage: messages.required }\n                }\n            }\n            name={props.name}\n            value={selected}\n            placeholder={props.placeholder}\n            onChange={(date) => {\n                setSelected(date)\n                if(props.onChange){\n                    props.onChange(date);\n                }\n            }}\n            mode={props.mode}\n            classNamePrefix=\"select2-selection\"\n        />\n    )}\n\nInputDateField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array,\n    defaultValue: PropTypes.any,\n    mode: PropTypes.string\n};\n\nclass AvSearchInput extends AvBaseInput {\n    render() {\n        const { name, value, onChange, validate, placeholder, helpMessage,mode } = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <Flatpickr\n                        id={name}\n                        className=\"form-control d-block\"\n                        validate={validate}\n                        value={value}\n                        name={name}\n                        placeholder={placeholder}\n                        options={{\n                            mode: mode || DATE_MODES.SINGLE,\n                            dateFormat: \"Y-m-d\",\n                            locale: 'es'\n                        }}\n                        onChange={onChange}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default InputDateField;\n","/Users/ramon/Repositories/lucy-moie/src/store/reports/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsList.js",["1366","1367","1368","1369"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getPayments} from \"../../../store/payments/actions\";\nimport paymentsColumns from \"./paymentsColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport PaymentOverlay from \"../paymentOverlay\";\n\nconst list = [{\n    id: 1,\n    name: \"asdasdasd\",\n    email: \"yoel.gonzalez@warnermedia.com\",\n    cellphone: \"+57 434 333 4\",\n    paymentForm: \"Transferencia bancaria\",\n    originBank: \"Banco Colpatria\",\n    targetBank: \"BANCO1\",\n    consignmentAmount: \"43434334\",\n    consignmentNumber: \"sdfsfdffsd\",\n    date: \"2021-11-13\"\n}]\n\nconst PaymentsList = props => {\n    const {payments, meta, onGetPayments, onDeletePayment, loading, refresh} = props;\n    const [paymentsList, setPaymentsList] = useState([])\n    const [paymentSelected, setPaymentSelected] = useState(null);\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        onGetPayments();\n    }, [refresh])\n\n    useEffect(() => {\n        onGetPayments()\n    }, [onGetPayments])\n\n    useEffect(() => {\n        setPaymentsList(payments)\n        // setPaymentsList(list)\n    }, [payments])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetPayments(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetPayments(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeletePayment(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = paymentsColumns(setPaymentSelected);\n\n    return (\n        <>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={paymentsList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Pagos</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}></i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/payment\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo pago\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\n                                                                    \"table table-centered table-nowrap mb-0\"\n                                                                }\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            {paymentSelected && (<PaymentOverlay paymentSelected={paymentSelected} showOverlay={true} onCloseOverlay={() => setPaymentSelected(null)}/>)}\n        </>\n    )\n}\n\nPaymentsList.propTypes = {\n    payments: PropTypes.array,\n    onGetPayments: PropTypes.func,\n    onDeletePayments: PropTypes.func,\n}\n\nconst mapPaymentToProps = state => {\n    const {payments, loading, meta, refresh} = state.Payments\n    return {payments, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetPayments: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getPayments(conditional, limit, page)),\n})\n\nexport default connect(\n    mapPaymentToProps,\n    mapDispatchToProps\n)(PaymentsList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeList.js",["1370","1371","1372","1373","1374","1375","1376","1377","1378"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getOffices, resetOffice} from \"../../../store/office/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport officeColumns from \"./officeColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport OfficeReportForm from \"../../Reports/OfficeReportForm\";\nimport {resetOrder} from \"../../../store/order/actions\";\n\nconst OfficeList = props => {\n    const {states, offices, meta, getStates, onGetOffices, onResetOffices, loading, refresh} = props; //onDeleteOffice,\n    const [officeList, setOfficeList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openReportModal, setOpenReportModal] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetOffices();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetOffices();\n        onGetOffices()\n        //getStates();\n    }, [onGetOffices])\n\n    useEffect(() => {\n        setOfficeList(offices);\n    }, [offices])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetOffices(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetOffices(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteOffice(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = officeColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n    };\n\n    const NoDataIndication = () => (\n        <div className=\"spinner\">\n            <div className=\"rect1\"/>\n            <div className=\"rect2\"/>\n            <div className=\"rect3\"/>\n            <div className=\"rect4\"/>\n            <div className=\"rect5\"/>\n        </div>\n    );\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={officeList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-truck me-2\"></i> Despachos</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n\n                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenReportModal(true)}>\n                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n\n                                                        <Link to={\"/office\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"> </i> Generar Despacho\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n\n\n            <CustomModal title={\"Generar reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <OfficeReportForm onCloseModal={() => setOpenReportModal(false)}/>\n            </CustomModal>\n        </Row>\n    )\n}\n\nOfficeList.propTypes = {\n    states: PropTypes.array,\n    onGetOffices: PropTypes.func,\n    //onDeleteOffice: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, offices, loading, meta, refresh} = state.Office\n    return {states, offices, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    //getStates,\n    onGetOffices: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getOffices(conditional, limit, page)),\n    onResetOffices: () => {\n        dispatch(resetOffice());\n    },\n    //onDeleteOffice: (id) => dispatch(deleteOffice(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(OfficeList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billList.js",["1379","1380","1381","1382","1383","1384","1385","1386"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getBills, registerBill, resetBill} from \"../../../store/bill/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport billColumns from \"./billColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport Conditionals from \"../../../common/conditionals\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\nimport OrderList from \"../../Orders/orderList\";\nimport BillGenerateReportForm from \"../../Reports/BillsReportForm\";\nimport {resetOffice} from \"../../../store/office/actions\";\n\nconst BillList = props => {\n    const {states, bills, meta, getStates, onGetBills, onResetBill, loading, refresh} = props; //onDeleteBill,\n    const [billList, setBillList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openOrdersModal, setOpenOrdersModal] = useState(false);\n    const [orderListConditions, setOrderListConditions] = useState([]);\n    const [openReportModal, setOpenReportModal] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n    }\n    useEffect(() => {\n        onGetBills();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetBill();\n        onGetBills();\n        //getStates();\n    }, [onGetBills])\n\n    useEffect(() => {\n        setBillList(bills);\n    }, [bills])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetBills(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetBills(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteBill(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = billColumns(onDelete);\n\n    const addOrders = () => {\n        const conditions = new Conditionals.Condition;\n        // conditions.add(\"status\", 4, Conditionals.OPERATORS.EQUAL);//Enviada\n        conditions.add('office', '', Conditionals.OPERATORS.NOT_NULL);\n        conditions.add('deliveryMethod', 1, Conditionals.OPERATORS.EQUAL);\n        conditions.add('orderDelivery.deliveryType', 3, Conditionals.OPERATORS.EQUAL);\n        console.log('conditions', conditions);\n        setOrderListConditions(conditions.condition);\n        setOpenOrdersModal(true);\n    };\n\n    const onCloseModal = () => {\n        setOpenOrdersModal(false);\n    };\n    const onAcceptModal = (conditionals) => {\n        console.log('conditionals', conditionals)\n        if (conditionals && conditionals.length > 0) {\n            const value = conditionals[0].value;\n            const ids = value.split ? value.split('::') : [value];\n            props.onCreateBill({ids: ids});\n        }\n        setOpenOrdersModal(false);\n    };\n\n    return (\n        <>\n            <CustomModal title={\"Agregar pedidos\"} size=\"lg\" showFooter={false} isOpen={openOrdersModal} onClose={onCloseModal}>\n                <OrderList customActions={onAcceptModal} showAsModal={true} conditionals={orderListConditions}/>\n            </CustomModal>\n            <CustomModal title={\"Generar Reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <BillGenerateReportForm onCloseModal={(reload) => setOpenReportModal(false)}/>\n            </CustomModal>\n            <Row>\n\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={billList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-bill me-2\"></i> Facturas</h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                                <Button onClick={() => setOpenReportModal(true)}>\n                                                                    <i className=\"mdi mdi-file\"> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                            <Button color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\" onClick={addOrders}>\n                                                                <i className=\"mdi mdi-plus\"> </i> Generar Factura\n                                                            </Button>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nBillList.propTypes = {\n    states: PropTypes.array,\n    onGetBills: PropTypes.func,\n    //onDeleteBill: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, bills, loading, meta, refresh} = state.Bill\n    return {states, bills, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetBill: () => {\n        dispatch(resetBill());\n    },\n    onGetBills: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getBills(conditional, limit, page)),\n    onCreateBill: (ids) => dispatch(registerBill(ids)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BillList)\n","/Users/ramon/Repositories/lucy-moie/src/components/mentions/MultiMention.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/mentions/useHookValue.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateList.js",["1387","1388","1389","1390","1391"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {getTemplates, resetTemplate} from \"../../../store/template/actions\";\nimport templateColumns from \"./templateColumn\";\n\nconst TemplateList = props => {\n    const {templates, meta, onGetTemplates, onResetTemplate, onDeleteState, loading, refresh} = props;\n    const [templatesList, setTemplatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetTemplates();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetTemplate();\n        onGetTemplates()\n    }, [onGetTemplates])\n\n    useEffect(() => {\n        setTemplatesList(templates)\n    }, [templates])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetTemplates(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetTemplates(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Plantilla?',\n            description: 'Usted está eliminado esta Plantilla, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = templateColumns(onDelete);\n\n    const NoDataIndication = () => (\n        <div className=\"spinner\">\n            <div className=\"rect1\"/>\n            <div className=\"rect2\"/>\n            <div className=\"rect3\"/>\n            <div className=\"rect4\"/>\n            <div className=\"rect5\"/>\n        </div>\n    );\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={templatesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Plantillas</h4>\n                                                           {/* {!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Link to={\"/template\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"> </i> Nueva Plantilla\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nTemplateList.propTypes = {\n    templates: PropTypes.array,\n    onGetTemplates: PropTypes.func,\n    // onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {templates, loading, meta, refresh} = state.Template\n    return {templates, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetTemplate: () => {\n        dispatch(resetTemplate());\n    },\n    onGetTemplates: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getTemplates(conditional, limit, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TemplateList)\n","/Users/ramon/Repositories/lucy-moie/src/store/bill/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/PieChart.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleList.js",["1392","1393","1394"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {TableFilter} from \"../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../common/converters\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport postSaleColumns from \"./postSaleColumn\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {doPrintBatchRequest, getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {importFile} from \"../../store/office/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport PostSaleImportFileForm from \"./PostSaleImportFileForm\";\nimport PostSaleReportForm from \"../Reports/PostSaleReportForm\";\nimport {refreshAllStatusDelivery} from \"../../helpers/backend_helper\";\n\nconst PostSaleList = props => {\n    const {orders, meta, onGetOrders, loading, refresh, customActions} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [openImportFileModal, setOpenImportFileModal] = useState(false);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [filterable, setFilterable] = useState(true);\n    const [openReportModal, setOpenReportModal] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        if (null !== refresh) onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }, [refresh])\n\n    useEffect(() => {\n        onGetOrders(conditional);\n        if (customActions) {\n            setFilterable(false);\n        }\n    }, [onGetOrders])\n\n    useEffect(() => {\n        setStatesList(orders)\n    }, [orders])\n\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetOrders(conditional, DEFAULT_PAGE_LIMIT, p * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetOrders(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const handleImportFile = (reload) => {\n        setOpenImportFileModal(false);\n        if(reload) onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }\n\n    const syncAllDeliveries = async () => {\n        await refreshAllStatusDelivery();\n        onGetOrders(conditional, DEFAULT_PAGE_LIMIT, currentPage * DEFAULT_PAGE_LIMIT);\n    }\n\n    const columns = postSaleColumns();\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter && filterable}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter && filterable ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Post Venta</h4>\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end d-flex\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Tooltip placement=\"bottom\" title=\"Importar archivo\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenImportFileModal(true)}>\n                                                                <i className={\"mdi mdi-file-excel\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                        <Tooltip placement=\"bottom\" title=\"Generar reporte\" aria-label=\"add\">\n                                                            <Button onClick={() => setOpenReportModal(true)}>\n                                                                <i className={\"mdi mdi-file\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                        <Tooltip placement=\"bottom\" title=\"Sincronizar todas\" aria-label=\"add\">\n                                                            <Button onClick={() => syncAllDeliveries()}>\n                                                                <i className={\"mdi mdi-refresh\"}> </i>\n                                                            </Button>\n                                                        </Tooltip>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n            <CustomModal title={\"Importar\"} showFooter={false} isOpen={openImportFileModal} onClose={() => setOpenImportFileModal(false)}>\n                <PostSaleImportFileForm onCloseModal={(reload) => handleImportFile(reload)}/>\n            </CustomModal>\n            <CustomModal title={\"Generar reporte\"} showFooter={false} isOpen={openReportModal} onClose={() => setOpenReportModal(false)}>\n                <PostSaleReportForm onCloseModal={() => setOpenReportModal(false)}/>\n            </CustomModal>\n        </Row>\n    )\n}\n\nPostSaleList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {orders, loading, meta, refresh} = state.Order\n    return {orders, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onImportFile: (data) => dispatch(importFile(data)),\n    onGetOrders: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => {\n        if(!conditional) conditional = [];\n        conditional.push({field:'orderDelivery.tracking', value:'', operator: Conditionals.OPERATORS.NOT_NULL});\n        dispatch(getOrders(conditional, limit, page))\n    },\n    onPrintBatchRequest: (conditional) => dispatch(doPrintBatchRequest(conditional)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PostSaleList)\n","/Users/ramon/Repositories/lucy-moie/src/helpers/api_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/FieldOption/configsList.js",["1395"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\n\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {deleteFieldOption, getFieldOptionByGroup, registerFieldOption, updateFieldOption} from \"../../store/fieldOptions/actions\";\nimport {GROUPS} from \"../../common/constants\";\nimport {map} from \"lodash\";\nimport {FieldNumber, FieldText} from \"../../components/Fields\";\nimport {AvForm} from \"availity-reactstrap-validation\";\n\nconst ConfigsList = props => {\n    const {fieldOptions, refresh, onGetByGroup, onCreateFieldOption, onUpdateFieldOption, onDeleteFieldOption} = props;\n\n    const [groupsList, setGroupsList] = useState([GROUPS.OP_GROUPS]);\n    const [groupSelected, setGroupSelected] = useState(null);\n    const [fieldOptionsList, setFieldOptionsList] = useState([]);\n    const [fieldOption, setFieldOption] = useState({options: []});\n    const [fieldOptionEdited, setFieldOptionEdited] = useState(null);\n\n    useEffect(() => {\n        onGetByGroup(groupSelected || GROUPS.OP_GROUPS);\n    }, [onGetByGroup, refresh, groupSelected]);\n\n    useEffect(() => {\n        if (fieldOptions && fieldOptions.length > 0) {\n            const options = {};\n\n            if (fieldOptions.some(item => item.groups === GROUPS.OP_GROUPS)) {\n                const list = fieldOptions.map(item => item.name);\n                list.unshift(GROUPS.OP_GROUPS);\n                setGroupsList(list);\n            }\n\n            if (groupSelected) {\n                fieldOptions.forEach(op => {\n                    const key = op.groups;\n                    if (!options[key]) {\n                        options[key] = {groups: op.groups, options: []};\n                    }\n                    options[key].options.push({id: op.id, name: op.name, value: op.value});\n                });\n                const list = [];\n                Object.keys(options).forEach(op => list.push(options[op]))\n                setFieldOptionsList(list);\n\n                setFieldOption(list.find(l => l.groups === groupSelected));\n                setFieldOptionEdited(null);\n            }\n        } else {\n            setFieldOptionsList([])\n            setFieldOption({options: []});\n        }\n    }, [fieldOptions])\n\n    const onAddFieldOptions = (ev, data) => {\n        if (!data.groups || !data.groups.value) return;\n\n        const items = fieldOptionsList ? fieldOptionsList : [];\n\n        //If item doesnt exist It will be added\n        if (items.some(i => i.groups === data.groups.value)) return;\n\n        const item = {groups: data.groups.value, options: [{id: null, name: null, value: ''}]};\n        items.push(item);\n        setFieldOptionsList(items);\n        setGroupSelected(data.groups.value);\n    };\n\n    const onAddFieldOption = () => {\n        //to avoid multiple\n        if (fieldOption && fieldOption.options.some(item => !item.id)) return;\n\n        setFieldOptionEdited(null);\n        setFieldOption({...fieldOption, options: [...fieldOption.options, {id: null, name: null, value: ''}]});\n    };\n\n    const onDeleteOption = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar este registro?',\n            description: 'Usted está eliminado este registro, una vez eliminado no podrá ser recuperado.',\n            id: '_fieldOptionsModal',\n            onConfirm: () => onDeleteFieldOption(id)\n        });\n    };\n\n    const handleValidSubmit = (ev, data) => {\n        const name = data.name ? data.name : data.value;\n\n        //avoid duplicate\n        if (fieldOption && fieldOption.options.some(item => item.id && item.name === name && item.value === data.value)) {\n            const optionGroup = {...fieldOption};\n            const option = optionGroup.options.find(item => !item.id && item.name === name && item.value === data.value);\n            optionGroup.options.splice(optionGroup.options.indexOf(option), 1);\n            setFieldOption(optionGroup);\n            return;\n        }\n\n        const payload = {\n            groups: groupSelected,\n            name: data.name ? data.name : data.value,\n            value: data.value\n        }\n\n        if (fieldOptionEdited) {\n            onUpdateFieldOption(fieldOptionEdited, payload);\n        } else {\n            onCreateFieldOption(payload);\n        }\n    };\n\n    return (\n        <Row>\n            <Col md={5}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onAddFieldOptions(e, v)}>\n                            <Row>\n                                <Col>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '80%'}}>Grupo</th>\n                                            <th style={{width: '20%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(groupsList, (group, key) => (\n                                            <tr key={key} className={group === groupSelected ? 'bg-light font-weight-600' : ''}>\n                                                <td>{group}</td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setGroupSelected(group)}>\n                                                                <i className=\"uil uil-eye font-size-18\"> </i>\n                                                            </button>\n                                                        </li>\n                                                    </ul>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </Col>\n            <Col md={7}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                            <Row>\n                                <Col className=\"text-right p-2\">\n                                    {groupSelected && (\n                                        <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary\" onClick={() => onAddFieldOption()}>\n                                            <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                        </button>\n                                    )}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th>Nombre</th>\n                                            {groupSelected === GROUPS.REFERENCE_KEY && (\n                                                <>\n                                                    <th>Inicia en</th>\n                                                </>\n                                            )}\n                                            <th style={{width: '20%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(fieldOption.options, (option, key) => (\n                                            <tr key={key}>\n                                                {groupSelected === GROUPS.REFERENCE_KEY && (\n                                                    <>\n                                                        {fieldOptionEdited !== option.id && (\n                                                            <>\n                                                                <td>{option.name}</td>\n                                                                <td>{option.value}</td>\n                                                            </>\n                                                        )}\n                                                        {fieldOptionEdited === option.id && (\n                                                            <>\n                                                                <td>\n                                                                    <FieldText\n                                                                        id={\"name\"}\n                                                                        name={\"name\"}\n                                                                        value={option.name}\n                                                                        required/>\n                                                                </td>\n                                                                <td>\n                                                                    <FieldNumber\n                                                                        id={\"value\"}\n                                                                        name={\"value\"}\n                                                                        value={option.value}\n                                                                        required/>\n                                                                </td>\n                                                            </>\n                                                        )}\n                                                    </>\n                                                )}\n\n                                                {groupSelected !== GROUPS.REFERENCE_KEY && (\n                                                    <td>\n                                                        {fieldOptionEdited !== option.id && (\n                                                            <>\n                                                                {option.value}\n                                                            </>\n                                                        )}\n                                                        {fieldOptionEdited === option.id && (\n                                                            <>\n                                                                <FieldText\n                                                                    id={\"value\"}\n                                                                    name={\"value\"}\n                                                                    value={option.value}\n                                                                    required/>\n                                                            </>\n                                                        )}\n                                                    </td>\n                                                )}\n                                                <td className=\"text-center\">\n                                                    <div className=\"btn-group\">\n\n                                                        {(fieldOptionEdited !== option.id && option.id) && (\n                                                            <div>\n                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={fieldOptionEdited} onClick={() => setFieldOptionEdited(option.id)}>\n                                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                </button>\n                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={fieldOptionEdited} onClick={() => onDeleteOption(option.id)}>\n                                                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                </button>\n                                                            </div>\n                                                        )}\n                                                        {(fieldOptionEdited === option.id || !option.id) && (\n                                                            <div>\n                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                    <i className=\"uil uil-check font-size-18\"> </i>\n                                                                </button>\n                                                                {option.id && (\n                                                                    <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setFieldOptionEdited(null)}>\n                                                                        <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                    </button>\n                                                                )}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                            </Row>\n\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nConfigsList.propTypes = {\n    fieldOptions: PropTypes.array,\n    onGetFieldOptions: PropTypes.func,\n    onCreateFieldOption: PropTypes.func,\n    onUpdateFieldOption: PropTypes.func,\n    onDeleteFieldOption: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {fieldOptions, loading, meta, refresh} = state.FieldOption\n    return {fieldOptions, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetByGroup: (group) => dispatch(getFieldOptionByGroup(group, 500, 0)),\n    onCreateFieldOption: (data, history) => dispatch(registerFieldOption(data, history)),\n    onUpdateFieldOption: (id, data, history) => dispatch(updateFieldOption(id, data, history)),\n    onDeleteFieldOption: (id, history) => dispatch(deleteFieldOption(id, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ConfigsList)\n","/Users/ramon/Repositories/lucy-moie/src/store/category/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userList.js",["1396","1397"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {getUsers, resetUser, setUserToChangePassword} from \"../../../store/user/actions\";\nimport userColumns from \"./userColumn\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport ForgetPassword from \"./forgetPassword\";\n\nconst UserList = props => {\n    const {users, meta, onGetUsers, onResetUsers, onSelectUser, refresh} = props;\n    const [usersList, setCategoriesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    // const [userSelected, setUserSelected] = useState(null);\n    // const [newPassword, setNewPassword] = useState(null);\n    // const [confirmPassword, setConfirmPassword] = useState(null);\n    // const [openChangePasswordModal, setOpenChangePasswordModal] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n    // const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetUsers();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetUsers();\n        onGetUsers()\n    }, [onGetUsers])\n\n    useEffect(() => {\n        setCategoriesList(users)\n    }, [users])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetUsers(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetUsers(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const columns = userColumns(onSelectUser);\n\n    return (\n        <>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={usersList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-users-alt me-2\"></i> Usuarios</h4>\n                                                        </div>\n                                                    </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/user\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nuevo usuario\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <ForgetPassword/>\n        </>\n    )\n}\n\nUserList.propTypes = {\n    users: PropTypes.array,\n    onGetUsers: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetUsers: () => {\n        dispatch(resetUser());\n    },\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n    onSelectUser: (user) => dispatch(setUserToChangePassword(user)),\n    // onDeleteStates: (id) => dispatch(deleteState(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UserList)\n","/Users/ramon/Repositories/lucy-moie/src/store/postSale/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityList.js",["1398","1399","1400","1401","1402","1403"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {deleteMunicipality, getMunicipalities, getStates, resetLocation} from \"../../../store/location/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport municipalityColumns from \"./municipalityColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\n\nconst MunicipalityList = props => {\n    const {states, municipalities, meta, getStates, onGetMunicipalities, onResetLocation, onDeleteMunicipality, loading, refresh} = props;\n    const [municipalityList, setMunicipalityList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetMunicipalities();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetLocation();\n        onGetMunicipalities()\n        getStates();\n    }, [onGetMunicipalities])\n\n    useEffect(() => {\n        setMunicipalityList(municipalities.map(m => {\n            m.state = m.state.name;\n            return m;\n        }))\n    }, [municipalities])\n\n    /*useEffect(() => {\n        const cols = statesColumns(onDelete).map(col => {\n            if (col.dataField === 'state' && (!col.filterOptions || !col.filterOptions.length)) {\n                col.filterOptions = statesToOptions(states);\n            }\n            return col;\n        });\n        setColumns(cols);\n    }, [states])*/\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetMunicipalities(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetMunicipalities(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteMunicipality(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = municipalityColumns(onDelete);\n\n    const NoDataIndication = () => (\n        <div className=\"spinner\">\n            <div className=\"rect1\"/>\n            <div className=\"rect2\"/>\n            <div className=\"rect3\"/>\n            <div className=\"rect4\"/>\n            <div className=\"rect5\"/>\n        </div>\n    );\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={municipalityList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Municipios</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Link to={\"/municipality\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"> </i> Nuevo Municipio\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\"table table-centered table-nowrap mb-0\"}\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nMunicipalityList.propTypes = {\n    states: PropTypes.array,\n    onGetMunicipalities: PropTypes.func,\n    onDeleteMunicipality: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, municipalities, loading, meta, refresh} = state.Location\n    return {states, municipalities, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    getStates,\n    onResetLocation: () => {\n        dispatch(resetLocation());\n    },\n    onGetMunicipalities: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getMunicipalities(conditional, limit, page)),\n    onDeleteMunicipality: (id) => dispatch(deleteMunicipality(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MunicipalityList)\n","/Users/ramon/Repositories/lucy-moie/src/store/payments/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/reports/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesList.js",["1404","1405","1406","1407"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider, {Search} from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {deleteState, getStates, resetLocation} from \"../../../store/location/actions\";\nimport statesColumns from \"./statesColumn\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\n\nconst StatesList = props => {\n    const {states, meta, onGetStates, onDeleteState, onResetLocation, loading, refresh} = props;\n    const [statesList, setStatesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n    const {SearchBar} = Search\n\n    useEffect(() => {\n        onGetStates();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetLocation();\n        onGetStates()\n    }, [onGetStates])\n\n    useEffect(() => {\n        setStatesList(states)\n    }, [states])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetStates(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetStates(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = statesColumns(onDelete);\n\n    return (\n        <Row>\n            <TableFilter\n                onPressDisabled={() => setFilter(false)}\n                isActive={filter}\n                fields={columns}\n                onSubmit={onFilterAction.bind(this)}/>\n\n            <Col lg={filter ? \"8\" : \"12\"}>\n                <Card>\n                    <CardBody>\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                            {({paginationProps, paginationTableProps}) => (\n                                <ToolkitProvider\n                                    keyField=\"id\"\n                                    data={statesList || []}\n                                    columns={normalizeColumnsList(columns)}\n                                    bootstrap4\n                                    search\n                                >\n                                    {toolkitProps => (\n                                        <React.Fragment>\n                                            <Row className=\"row mb-2\">\n                                                <Col md={6}>\n                                                    <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-shopping-cart-alt me-2\"></i> Estados</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <div className=\"mb-3 float-md-end\">\n                                                        {columns.some(s => s.filter) && (\n                                                            <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                        )}\n                                                        <Link to={\"/state\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                            <i className=\"mdi mdi-plus\"></i> Nuevo Estado\n                                                        </Link>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <Row>\n                                                <Col xl=\"12\">\n                                                    <div className=\"table-responsive mb-4\">\n                                                        <BootstrapTable\n                                                            remote\n                                                            responsive\n                                                            loading={true}\n                                                            bordered={false}\n                                                            striped={true}\n                                                            classes={\n                                                                \"table table-centered table-nowrap mb-0\"\n                                                            }\n                                                            noDataIndication={() => <NoDataIndication/>}\n                                                            {...toolkitProps.baseProps}\n                                                            onTableChange={handleTableChange}\n                                                            {...paginationTableProps}\n                                                        />\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            <div className=\"float-sm-start\">\n                                                <PaginationListStandalone {...paginationProps} />\n                                            </div>\n                                        </React.Fragment>\n                                    )}\n                                </ToolkitProvider>\n                            )}\n                        </PaginationProvider>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nStatesList.propTypes = {\n    states: PropTypes.array,\n    onGetStates: PropTypes.func,\n    onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, loading, meta, refresh} = state.Location\n    return {states, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetLocation: () => {\n        dispatch(resetLocation());\n    },\n    onGetStates: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getStates(conditional, limit, page)),\n    onDeleteStates: (id) => dispatch(deleteState(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(StatesList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryList.js",["1408","1409"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport {Link} from \"react-router-dom\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {doCatalogPrintBatchRequest, getCategories} from \"../../../store/category/actions\";\nimport categoryColumns from \"./categoryColumn\";\nimport Conditionals from \"../../../common/conditionals\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {getCatalogBatchRequest} from \"../../../helpers/service\";\nimport {formatDate} from \"../../../common/utils\";\nimport {resetProduct} from \"../../../store/product/actions\";\nimport authHeader from \"../../../helpers/jwt-token-access/auth-token-header\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasRole from \"../../../components/HasRole\";\n\nconst CategoryList = props => {\n    const {categories, onGetCategories, onResetCategories, onDeleteState, getCatalogBatchRequest, onCatalogPrintBatchRequest, refresh} = props;\n    const [categoriesList, setCategoriesList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [currentPage, setCurrentPage] = useState(null);\n    const [printCategoriesId, setPrintCategoriesId] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n    const [selectAll, setSelectAll] = useState(false);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        //totalSize: meta?.totalRegisters, // replace later with size(users),\n        custom: true,\n    }\n\n    useEffect(() => {\n        if(currentPage) onGetCategories(conditional, DEFAULT_PAGE_LIMIT,currentPage*DEFAULT_PAGE_LIMIT);\n        onGetCatalogBatchRequest();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetCategories();\n        onGetCategories();\n        onGetCatalogBatchRequest();\n    }, [onGetCategories])\n\n    useEffect(() => {\n        setCategoriesList(categories)\n    }, [categories])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        let p = page - 1;\n        setCurrentPage(p);\n        onGetCategories(conditional, DEFAULT_PAGE_LIMIT, p*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetCategories(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteState(id);\n    };\n    const onGetCatalogBatchRequest = () => {\n        getCatalogBatchRequest().then(resp => {\n            if(resp && resp.data && resp.data.length > 0){\n                let arr = [...resp.data];\n                arr = arr.sort((a, b) => a.id === b.id ? 0 : (a.id > b.id) ? -1 : 1);\n                if(arr.length > 4){\n                    arr.splice(4);\n                }\n                setCatalogs(arr);\n            }\n        });\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Estado?',\n            description: 'Usted está eliminado este Estado, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const printCatalogs= (hasReferences) => {\n        let conditionals = conditional || [];\n\n        if(hasReferences){\n            conditionals.push({field:'references', value: '', operator: Conditionals.OPERATORS.TRUE});\n        }\n\n        if(printCategoriesId && printCategoriesId.length === 1){\n            conditionals.push({field:'category', value:printCategoriesId[0], operator: Conditionals.OPERATORS.EQUAL});\n        }\n        if(printCategoriesId && printCategoriesId.length > 1){\n            conditionals.push({field:'category', value:printCategoriesId.join('::'), operator: Conditionals.OPERATORS.IN});\n        }\n        onCatalogPrintBatchRequest(conditionals);\n    }\n\n    const columns = categoryColumns(onDelete);\n\n    var selectRowProp = {\n        mode: \"checkbox\",\n        clickToSelect: true,\n        onSelect: (row, selected, b) => {\n            // console.log('onSelect', selected ,b)\n            let list = [...printCategoriesId]\n            const index = list.indexOf(row.id);\n            if (index >= 0) {\n                list.splice(index, 1);\n            } else {\n                list.push(row.id);\n            }\n            setPrintCategoriesId(list);\n        },\n        onSelectAll: (selected) => {\n            // console.log('onSelectAll', selected,  selected)\n            setPrintCategoriesId([]);\n            setSelectAll(selected);\n        }\n    };\n\n    const onOpenCatalog = (catalog) => {\n            // Change this to use your HTTP client\n            const headers = authHeader();\n            fetch(process.env.REACT_APP_BASE_SERVICE + catalog.body.url, {headers: headers}) // FETCH BLOB FROM IT\n                .then((response) => response.blob())\n                .then((blob) => { // RETRIEVE THE BLOB AND CREATE LOCAL URL\n                    var _url = window.URL.createObjectURL(blob);\n                    window.open(_url, \"_blank\").focus(); // window.open + focus\n                }).catch((err) => {\n                console.log(err);\n            });\n    }\n\n    return (\n        <>\n            {!!(catalogs && catalogs.length > 0) && (\n                <Row className=\"text-center\">\n                    {catalogs.map((catalog, k) => (\n                        <Col sm={6} md={3} key={k}>\n                            <Card>\n                                <CardBody>\n                                    <Row>\n                                        <Col xs={8}>\n                                            <h6 className=\"mb-1 mt-2\"> Catálogo { catalog.type === 3 ? 'Ref' : ''}</h6>\n                                            <p className=\"badge bg-info\">{catalog.body.name}</p>\n                                            <div className=\"text-muted mb-0 mt-1\">\n                                                <small>{formatDate(catalog.createdAt)}</small>\n                                            </div>\n                                        </Col>\n                                        <Col xs={4}>\n                                            <Tooltip placement=\"bottom\" title=\"Descargar Catálogo\" aria-label=\"add\">\n                                                <Button color=\"primary\" onClick={() => onOpenCatalog(catalog)}>\n                                                    <i className=\"mdi mdi-download font-size-24\"> </i>\n                                                </Button>\n                                            </Tooltip>\n                                        </Col>\n                                    </Row>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    ))}\n\n                </Row>\n            )}\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={categoriesList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                        <div className=\"search-box ms-2\">\n                                                            <h4 className=\"text-info\"><i className=\"uil-box me-2 me-2\"></i> Categorias</h4>\n                                                            {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                        </div>\n                                                    </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\" >\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <HasRole role={PERMISSIONS.CATEGORY_DOWNLOAD}>\n                                                            <Tooltip placement=\"bottom\" title=\"Descargar Catalogo\" aria-label=\"add\">\n                                                                <Button color=\"primary\" onClick={() => printCatalogs(false)}\n                                                                        disabled={(printCategoriesId.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                    <i className=\"mdi mdi-download\"> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                            </HasRole>\n                                                            <HasRole role={PERMISSIONS.CATEGORY_DOWNLOAD}>\n                                                            <Tooltip placement=\"bottom\" title=\"Descargar Catalogo con Referencias\" aria-label=\"add\">\n                                                                <Button color=\"primary\" onClick={() => printCatalogs(true)}\n                                                                        disabled={(printCategoriesId.length === 0 && !selectAll) && (!conditional || conditional.length === 0)}>\n                                                                    <i className=\"mdi mdi-download-circle\"> </i>\n                                                                </Button>\n                                                            </Tooltip>\n                                                            </HasRole>\n                                                            <Link to={\"/category\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"> </i> Nueva Categoria\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                selectRow={selectRowProp}\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nCategoryList.propTypes = {\n    categories: PropTypes.array,\n    onGetCategories: PropTypes.func,\n    // onDeleteStates: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {categories, loading, meta, refresh} = state.Category\n    return {categories, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetCategories: () => {\n        dispatch(resetProduct());\n    },\n    onGetCategories: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCategories(conditional, limit, page)),\n    onCatalogPrintBatchRequest: (conditional, catalog ) => dispatch(doCatalogPrintBatchRequest(conditional, catalog)),\n    getCatalogBatchRequest,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CategoryList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/products-list.js",["1410","1411","1412","1413","1414","1415"],"import {Card, CardBody, Col, Row} from \"reactstrap\";\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {connect} from \"react-redux\";\nimport {getProducts, resetProduct} from \"../../../store/product/actions\";\nimport React, {useEffect, useState} from \"react\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport paginationFactory, {PaginationListStandalone, PaginationProvider} from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport productColumns from \"./productColumn\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport {countProductsByStatus} from \"../../../helpers/service\";\nimport HasRole from \"../../../components/HasRole\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\n\n\nconst series2 = [70]\n\nconst options2 = {\n    fill: {\n        colors: ['#34c38f']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\nconst series3 = [55]\n\nconst options3 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        sparkline: {\n            enabled: !0\n        }\n    },\n    dataLabels: {\n        enabled: !1\n    },\n    plotOptions: {\n        radialBar: {\n            hollow: {\n                margin: 0,\n                size: '60%'\n            },\n            track: {\n                margin: 0\n            },\n            dataLabels: {\n                show: !1\n            }\n        }\n    }\n};\n\n\n/*\n\nconst reportss = [\n    {\n        id: 1,\n        icon: \"mdi mdi-clock-five-time\",\n        title: \"Productos\",\n        value: pageOptions.totalSize,\n        prefix: \"\",\n        suffix: \"\",\n        decimal: 0,\n        charttype: \"bar\",\n        chartheight: 40,\n        chartwidth: 70,\n        badgeValue: parseInt(statusGroup.filter(s => s.status === 1 ).map(s => s.count)),\n        color: \"success\",\n        desc: \"activos\",\n        badgeValue2: parseInt(statusGroup.filter(s => s.status === 0 ).map(s => s.count)),\n        color2: \"danger\",\n        desc2: \"inactivos\",\n        series: series1,\n        options: options1,\n    },\n    {\n        id: 2,\n        icon: \"mdi mdi-arrow-up-bold\",\n        title: \"Productos publicados\",\n        value: parseInt(pageOptions.totalSize * 0.67),\n        decimal: 0,\n        charttype: \"radialBar\",\n        chartheight: 45,\n        chartwidth: 45,\n        prefix: \"\",\n        suffix: \"\",\n        badgeValue: \"0.2%\",\n        color: \"success\",\n        desc: \"desde ayer\",\n        series: series2,\n        options: options2,\n    },\n    {\n        id: 3,\n        icon: \"mdi mdi-arrow-up-bold\",\n        title: \"Agregados en esta semana\",\n        value: 265,\n        decimal: 0,\n        prefix: \"\",\n        suffix: \"\",\n        charttype: \"radialBar\",\n        chartheight: 45,\n        chartwidth: 45,\n        badgeValue: \"0.24%\",\n        color: \"success\",\n        desc: \"desde hace una semana\",\n        series: series3,\n        options: options3,\n    },\n];\n*/\n\n\nconst ProductList = props => {\n\n    const {refresh, onGetProducts, onResetProducts, countProductsByStatus, products, meta} = props;\n    const [productList, setProductList] = useState([]);\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters || 0,\n        custom: true,\n    };\n\n    useEffect(() => {\n        onGetProducts();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetProducts();\n        onGetProducts();\n    }, [onGetProducts])\n\n    useEffect(() => {\n        setProductList(products)\n    }, [products])\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetProducts(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetProducts(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const columns = productColumns();\n\n    return (\n        <>\n            <Row className=\"text-center\">\n                <Col md={4}>\n                    <StatsStatusCard title=\"Productos\" getData={countProductsByStatus}/>\n                </Col>\n            </Row>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={productList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-box me-2 me-2\"></i> Productos</h4>\n                                                                {/*{!filter && (\n                                                                <div className=\"position-relative\">\n                                                                    <SearchBar {...toolkitProps.searchProps}/>\n                                                                    <i className=\"mdi mdi-magnify search-icon\"> </i>\n                                                                </div>\n                                                            )}*/}\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Tooltip placement=\"bottom\" title=\"Busqueda masiva\" aria-label=\"add\">\n                                                                <Link to={\"/bq\"} className=\"btn\">\n                                                                    <i className=\"mdi mdi-text-box-search-outline\"> </i>\n                                                                </Link>\n                                                            </Tooltip>\n                                                            <HasRole role={PERMISSIONS.PRODUCT_CREATE}>\n                                                                <Link to={\"/product\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                    <i className=\"mdi mdi-plus\"> </i> Nuevo Producto\n                                                                </Link>\n                                                            </HasRole>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                onTableChange={handleTableChange}\n                                                                {...toolkitProps.baseProps}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nProductList.propTypes = {\n    onGetProducts: PropTypes.func,\n    products: PropTypes.array,\n    meta: PropTypes.object,\n    loading: PropTypes.bool,\n    refresh: PropTypes.bool,\n}\n\nconst mapStateToProps = state => {\n    const {products, loading, meta, refresh, custom} = state.Product\n    return {customData: custom, products, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetProducts: () => {\n        dispatch(resetProduct());\n    },\n    onGetProducts: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getProducts(conditional, limit, page)),\n    countProductsByStatus,\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductList);\n","/Users/ramon/Repositories/lucy-moie/src/store/comment/actions.js",["1416"],"import {\n    DELETE_COMMENT,\n    DELETE_COMMENT_FAILED,\n    DELETE_COMMENT_SUCCESS,\n    GET_COMMENT,\n    GET_COMMENT_FAILED,\n    GET_COMMENT_SUCCESS,\n    GET_COMMENTS,\n    GET_COMMENTS_FAILED,\n    GET_COMMENTS_SUCCESS,\n    REGISTER_COMMENT,\n    REGISTER_COMMENT_FAILED,\n    REGISTER_COMMENT_SUCCESS,\n    UPDATE_COMMENT,\n    UPDATE_COMMENT_FAILED,\n    UPDATE_COMMENT_SUCCESS,\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const getCommentsByEntity = (entity, idRelated) => {\n    const conditions = new Conditionals.Condition;\n    conditions.add('entity', entity, Conditionals.OPERATORS.EQUAL);\n    conditions.add('idRelated', idRelated, Conditionals.OPERATORS.EQUAL);\n    return getComments(conditions.all(), 100, 0);\n}\n\nexport const getComments = (conditional, limit, offset) => ({\n    type: GET_COMMENTS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\nexport const getCommentsSuccess = (data, meta, entity) => ({\n    type: GET_COMMENTS_SUCCESS,\n    meta: meta,\n    payload: data,\n    entity: entity\n})\nexport const getCommentsFailed = error => ({\n    type: GET_COMMENTS_FAILED,\n    payload: error,\n})\nexport const getComment = id => ({\n    type: GET_COMMENT,\n    id\n})\nexport const getCommentSuccess = data => ({\n    type: GET_COMMENT_SUCCESS,\n    payload: data,\n})\nexport const getCommentFailed = error => ({\n    type: GET_COMMENT_FAILED,\n    payload: error,\n})\nexport const registerComment = (idRelated, data) => {\n    return {\n        type: REGISTER_COMMENT,\n        payload: {idRelated, data},\n    }\n}\nexport const registerCommentSuccess = data => {\n    return {\n        type: REGISTER_COMMENT_SUCCESS,\n        payload: data.comment,\n    }\n}\nexport const registerCommentFailed = data => {\n    return {\n        type: REGISTER_COMMENT_FAILED,\n        payload: data,\n    }\n}\nexport const updateComment = (id, data, history) => {\n    return {\n        type: UPDATE_COMMENT,\n        payload: { id, data, history },\n    }\n}\nexport const updateCommentSuccess = data => {\n    return {\n        type: UPDATE_COMMENT_SUCCESS,\n        payload: data,\n    }\n}\nexport const updateCommentFail = error => {\n    return {\n        type: UPDATE_COMMENT_FAILED,\n        payload: error,\n    }\n}\nexport const deleteComment = (comment) => {\n    return {\n        type: DELETE_COMMENT,\n        payload: { comment },\n    }\n}\nexport const deleteCommentSuccess = id => {\n    return {\n        type: DELETE_COMMENT_SUCCESS,\n        payload: id,\n    }\n}\nexport const deleteCommentFail = error => {\n    return {\n        type: DELETE_COMMENT_FAILED,\n        payload: error,\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/TimeLine.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/fieldOptions/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/StatusField/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/url_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/ConciliationReportForm.js",["1417","1418"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {DELIVERY_METHODS, REPORT_TYPES} from \"../../common/constants\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst ConciliationReportForm = ({onCloseModal, deliveryMethods, onGetDeliveryMethods, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            deliveryMethod: values.deliveryMethod.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ConciliationReportForm)\n)\n\nConciliationReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/DropZoneIcon.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/Image.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/CustomerEdit/CustomerForm.js",["1419","1420","1421"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getCustomer, registerCustomer, updateCustomer} from \"../../store/customer/actions\";\nimport {getMunicipalities, getStates} from \"../../store/location/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {FieldEmail, FieldPhone, FieldSelect, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst CustomerForm = (props) => {\n    const {getCustomer, customer, showAsModal = false, onCloseModal= false, onAcceptModal= false} = props;\n    const [customerData, setCustomerData] = useState({_status: \"true\"});\n\n    // definición de localidades\n    const {getStates, states} = props;\n    const {getMunicipalities, municipalities} = props;\n    const [state, setState] = useState(null);\n    const [municipality, setMunicipality] = useState(null);\n\n    const [statesOptions, setStates] = useState([]);\n    const [municipalitiesOptions, setMunicipalities] = useState([]);\n\n    //carga inicial\n    useEffect(() => {\n        if (props.match.params.id && getCustomer) {\n            getCustomer(props.match.params.id);\n        }\n        getStates();\n    }, [getCustomer]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (customer.id) {\n            setCustomerData(customer);\n\n            //definir estado por defecto\n            const defaultState = customer.state?.id || null;\n            setState(defaultState);\n\n            //definir municipalidad por defecto\n            const defaultMunicipality = customer.municipality?.id || null;\n            setMunicipality(defaultMunicipality);\n\n        }\n    }, [customer]);\n\n    //cargar estados\n    useEffect(() => {\n        if (states && states.length > 0) {\n            const itemsConverter = item => ({\n                label: item.name,\n                value: item.id\n            });\n            setStates(states.map(itemsConverter));\n        } else {\n            setStates([]);\n        }\n    }, [states]);\n\n    //cargar municipios\n    useEffect(() => {\n        if (municipalities && municipalities.length > 0) {\n            const itemsConverter = item => ({\n                label: item.name,\n                value: item.id\n            });\n            setMunicipalities(municipalities.map(itemsConverter));\n        } else {\n            setMunicipalities([]);\n        }\n    }, [municipalities]);\n\n    useEffect(() => {\n        if (state != null) {\n            const conditions = new Conditionals.Condition;\n            conditions.add('state', state);\n            getMunicipalities(conditions.all());\n        }\n    }, [state]);\n\n    const handleValidSubmit = (event, values) => {\n        const data = filteredValues(values);\n        if (!customer.id) {\n            props.registerCustomer(data, props.history)\n        } else {\n            props.updateCustomer(customer.id, data, props.history)\n        }\n        if(showAsModal && onAcceptModal){\n            onAcceptModal(customer.id);\n        }\n    }\n\n    const filteredValues = (values) => {\n        const data = {...values};\n        data.state = values.state?.value;\n        data.municipality = values.municipality?.value;\n        data.status = values._status;\n        data.cellphone = values.cellphone ? values.cellphone.replace(/\\s/g, '') : '';\n        data.phone = values.phone ? values.phone.replace(/\\s/g, '') : '';\n        delete data._status;\n        return data;\n    }\n\n    function handleSelectDepartment(option) {\n        setState(option.value);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row>\n                    <Col xl={12}>\n                        {!showAsModal && (\n                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                <div className={\"float-end\"}>\n                                    <Row>\n                                        <Col>\n                                            ¿Contrapago?\n                                        </Col>\n                                        <Col>\n                                            <FieldSwitch\n                                                value={customerData.status}\n                                                defaultValue={customerData.document ? customerData.status : true}\n                                                name={\"_status\"}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        )}\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"name\">Nombre <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id={\"name\"}\n                                        name={\"name\"}\n                                        value={customerData.name}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom02\">Email </Label>\n                                    <FieldEmail\n                                        name={\"email\"}\n                                        value={customerData.email}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"document\">Documento <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='document'\n                                        name={\"document\"}\n                                        value={customerData.document}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"cellphone\">Teléfono Celular <span className=\"text-danger\">*</span></Label>\n                                    <FieldPhone\n                                        id=\"cellphone\"\n                                        name=\"cellphone\"\n                                        value={customerData.cellphone}\n                                        placeholder=\"\"\n                                        type=\"text\"\n                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                        className=\"form-control\"\n                                        validate={{required: {value: true}}}\n                                        onChange={(value) => setCustomerData({...customerData, cellphone: value})}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"phone\">Teléfono Residencial</Label>\n                                    <FieldPhone\n                                        id=\"phone\"\n                                        name=\"phone\"\n                                        value={customerData.phone}\n                                        placeholder=\"\"\n                                        type=\"text\"\n                                        errorMessage=\"Ingrese un número valido (Ejemplo: 00000000)\"\n                                        className=\"form-control\"\n                                        validate={{required: {value: true}}}\n                                        onChange={(value) => setCustomerData({...customerData, phone: value})}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"state\">Departamento <span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id=\"state\"\n                                        defaultValue={state}\n                                        name={\"state\"}\n                                        placeholder={\"Indique un departamento\"}\n                                        options={statesOptions}\n                                        onChange={handleSelectDepartment}\n                                        required\n                                        isSearchable\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom03\">Municipio <span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id=\"municipality\"\n                                        defaultValue={municipality}\n                                        name={\"municipality\"}\n                                        placeholder={\"Indique un municipio\"}\n                                        options={municipalitiesOptions}\n                                        required\n                                        isSearchable\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"validationCustom03\">Dirección</Label>\n                                    <FieldText\n                                        id='address'\n                                        name={\"address\"}\n                                        value={customerData.address}\n                                        maxLength={80}\n                                        required/>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        {(customerData.temporalAddress && customerData.temporalAddress.length > 0) && (\n                            <Row>\n                                <hr/>\n                                <p className=\"alert alert-warning\">Este cliente tiene una dirección de una versión anterior, es recomendable que por favor agregue la dirección en la parte superior.</p>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <h4>Dirección temporal</h4>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"validationCustom04\">Departamento temporal</Label>\n                                        <div className=\"form-control\">\n                                            {customerData.temporalAddress[0].state}\n                                        </div>\n                                    </div>\n                                </Col>\n                                <Col md=\"6\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"validationCustom04\">Municipio temporal</Label>\n                                        <div className=\"form-control\">\n                                            {customerData.temporalAddress[0].municipality}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n                        )}\n                        <Row>\n                            <Col>\n                                <div className=\"\">\n                                    <AvField\n                                        checked={customerData.hasNotification ? true : false}\n                                        className=\"form-check-input\"\n                                        type=\"checkbox\"\n                                        name=\"hasNotification\"\n                                        label=\"Recibe notificaciones\"/>\n                                </div>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {showAsModal && onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                <ButtonSubmit loading={props.loading}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.Customer\n    const {states, municipalities} = state.Location\n    return {error, states, municipalities, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerCustomer, updateCustomer, getCustomer, getStates, getMunicipalities})(CustomerForm)\n)\n\nCustomerForm.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Offices/list/officeColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/template/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Template/list/templateColumn.js",["1422"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {isValidOption, STATUS_OPTIONS} from \"../../../common/utils\";\n\nconst templateColumns = (onDelete = false) => [\n    {\n        text: \"ID\",\n        dataField: \"reference\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <Link to={`/template/${item.id}`}>\n                {item.reference}\n            </Link>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Descripción\",\n        dataField: \"description\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <Link to={`/template/${item.id}`} className=\"px-2 text-primary\">\n                        <i className=\"uil uil-pen font-size-18\"> </i>\n                    </Link>\n                </li>\n            </ul>\n        ),\n    },\n]\n\nexport default templateColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/PostSaleReportForm.js",["1423","1424"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {DELIVERY_METHODS, ORDER_STATUS_LIST, REPORT_TYPES} from \"../../common/constants\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst PostSaleReportForm = ({onCloseModal, deliveryMethods, onGetDeliveryMethods, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            status: values._status.value,\n            deliveryMethod: values.deliveryMethod.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Estatus<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"_status\"}\n                                        name={\"_status\"}\n                                        options={ORDER_STATUS_LIST}\n                                        defaultValue={ORDER_STATUS_LIST[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span> &nbsp; <Tooltip placement=\"bottom\" title=\"Fecha de Envio\" aria-label=\"add\"><p className=\"fa fa-question-circle\"></p></Tooltip></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.POST_SALE, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetDeliveryMethods: (conditional = null, limit = 50, page) => dispatch(getDeliveryMethods(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PostSaleReportForm)\n)\n\nPostSaleReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/PostSaleImportFileForm.js",["1425","1426"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getDeliveryMethods} from \"../../store/order/actions\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport DropZoneIcon from \"../../components/Common/DropZoneIcon\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {importFile, importFileReset} from \"../../store/office/actions\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {DELIVERY_METHODS} from \"../../common/constants\";\n\nconst PostSaleImportFileForm = ({onCloseModal, deliveryMethods, loading, error, success, getDeliveryMethods, importFileReset, importFile}) => {\n\n    const [deliveryMethodList, setDeliveryMethodList] = useState([]);\n    const [deliveryMethod, setDeliveryMethod] = useState({});\n    const [file, setFile] = useState(null);\n\n    //carga inicial\n    useEffect(() => {\n        if (importFileReset) importFileReset();\n        if (onGetDeliveryMethods) onGetDeliveryMethods();\n    }, [importFileReset]);\n\n\n    useEffect(() => {\n        if (deliveryMethods && deliveryMethods.length > 0) {\n            setDeliveryMethod(deliveryMethods.find(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).code);\n            setDeliveryMethodList([getEmptyOptions(),\n                ...deliveryMethods.filter(op => op.name === DELIVERY_METHODS.INTERRAPIDISIMO).map(op => ({label: op.name, value: op.code}))]\n            );\n        }\n    }, [deliveryMethods]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            file: file.base64.replace('data:image/xlsx;base64,', ''),\n            deliveryMethod: values.deliveryMethod.value,\n            deliveryDate: values.deliveryDate[0] ? formatDate(values.deliveryDate[0], DATE_FORMAT.ONLY_DATE) : null\n        };\n        console.log(payload);\n        onImportFile(payload);\n    }\n\n    const onGetDeliveryMethods = (conditional = null, limit = 50, page) => getDeliveryMethods(conditional, limit, page);\n    const onImportFile = (data) => importFile(data);\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"deliveryDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Metodo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"deliveryMethod\"}\n                                        name={\"deliveryMethod\"}\n                                        options={deliveryMethodList}\n                                        defaultValue={deliveryMethod}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3 text-center\">\n                                    <Tooltip placement=\"bottom\" title=\"Importar archivo\" aria-label=\"add\">\n                                        <div className={\"btn\"}>\n                                            <DropZoneIcon\n                                                maxFiles={1}\n                                                mode=\"icon\"\n                                                iconClass=\"display-4 mdi mdi-file-excel\"\n                                                onDrop={(f) => setFile(f)}>\n                                            </DropZoneIcon>\n                                            {(file && file.f)? (<span>{file.f.name}</span>) : (<span>Seleccione un archivo</span>)}\n                                        </div>\n                                    </Tooltip>\n                                </div>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading || !file || !file.f}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {deliveryMethods} = state.Order;\n    const {importFile} = state.Office\n    return {deliveryMethods: deliveryMethods.data, loading: importFile.loading, error: importFile.error, success: importFile.success}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {getDeliveryMethods, importFile, importFileReset})(PostSaleImportFileForm)\n)\n\nPostSaleImportFileForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/store/category/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/PostSale/postSaleColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/accessToken.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/jwt-token-access/auth-token-header.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/User/list/forgetPassword.js",["1427","1428"],"import PropTypes from 'prop-types'\nimport React, {useEffect, useState} from \"react\"\n\n// Redux\nimport {connect} from \"react-redux\"\nimport {withRouter} from \"react-router-dom\"\nimport {AvField, AvForm} from \"availity-reactstrap-validation\"\nimport {changePassword, resetPasswordState} from \"../../../store/user/actions\";\nimport CustomModal from \"../../../components/Modal/CommosModal\";\n\nconst ForgetPassword = ({user, changePassword, resetPasswordState, passwordChanged}) => {\n\n    const [userSelected, setUserSelected] = useState(null);\n    const [newPassword, setNewPassword] = useState(null);\n    const [openChangePasswordModal, setOpenChangePasswordModal] = useState(false);\n    const [isValidPassword, setIsValidPassword] = useState(false);\n\n    useEffect(() => {\n        return function cleanup() {\n            resetPasswordState();\n        };\n    });\n\n    useEffect(() => {\n        resetPasswordState();\n\n        if (user) {\n            setUserSelected(user);\n            toggleChangePasswordModal();\n        }\n    }, [user])\n\n    useEffect(() => {\n        if (passwordChanged) {\n            onCloseChangePasswordModal();\n        }\n    }, [passwordChanged])\n\n    const toggleChangePasswordModal = () => {\n        setOpenChangePasswordModal(!openChangePasswordModal);\n    }\n\n    const onCloseChangePasswordModal = () => {\n        toggleChangePasswordModal();\n        setUserSelected(null);\n        resetPasswordState();\n    }\n\n    const onAcceptChangePasswordModal = () => {\n        if(!isValidPassword){\n            return;\n        }\n        const payload = {\n            username: user.username,\n            password: newPassword\n        };\n        changePassword(payload);\n    }\n\n    const validatePasswords = (cPassword) => {\n        let isValid = newPassword === cPassword;\n        setIsValidPassword(isValid);\n        if (!isValid) {\n            return 'Las contraseñas no son iguales';\n        }\n        return true;\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={`Cambio de contraseña`}\n                         isOpen={openChangePasswordModal}\n                         onClose={onCloseChangePasswordModal}\n                         onAccept={onAcceptChangePasswordModal}>\n                <div className=\"p-2\">\n                    <div className=\"alert alert-success text-center mb-4\" role=\"alert\"> Ingrese la nueva contraseña para el usuario <b>{`${userSelected?.name} ${userSelected?.lastname}`}</b></div>\n\n                    <AvForm className=\"form-horizontal\"  autoComplete=\"off\" >\n                        <div className=\"mb-1\">\n                                <AvField\n                                    name=\"password\"\n                                    label=\"Contraseña\"\n                                    defaultValue={newPassword}\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                    required\n                                    placeholder=\"*********\"\n                                    onChange={(e) => {\n                                        setNewPassword(e.target.value);\n                                    }}\n                                />\n                        </div>\n                        <div className=\"mb-1\">\n                            <AvField\n                                name=\"confirmPassword\"\n                                label=\"Confirmar Contraseña\"\n                                type=\"password\"\n                                autoComplete=\"off\"\n                                required\n                                placeholder=\"*********\"\n                                validate={{myValidation: validatePasswords}}\n                            />\n                        </div>\n                    </AvForm>\n                </div>\n            </CustomModal>\n        </React.Fragment>\n    )\n}\n\nForgetPassword.propTypes = {\n    loading: PropTypes.bool,\n    user: PropTypes.object,\n}\n\nconst mapStateProps = state => {\n    const {changePassword} = state.User\n    return {loading: changePassword.loading, user: changePassword.user, passwordChanged: changePassword.success}\n}\n\nexport default withRouter(\n    connect(mapStateProps, {changePassword, resetPasswordState})(ForgetPassword)\n)\n","/Users/ramon/Repositories/lucy-moie/src/pages/User/list/userColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Municipality/list/municipalityColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsStatusCard.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/StatsRegisteredCard.js",["1429"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport WidgetCard4 from \"./WidgetCard4\";\n\nconst StatsRegisteredCard = (props) => {\n    const {getData, getDataToday, title} = props;\n    const [reportData, setReportData] = useState(null);\n\n    useEffect(() => {\n        if (getData) {\n            setReportData({today: getDataToday, lastWeek: getData});\n        }\n    }, [getData]);\n\n\n    return (\n        <React.Fragment>\n            <WidgetCard4 title={title} reportData={reportData}/>\n        </React.Fragment>\n    );\n}\n\nexport default StatsRegisteredCard;\n\nStatsRegisteredCard.propTypes = {\n    getData: PropTypes.func.isRequired,\n    getDataToday: PropTypes.func,\n    title: PropTypes.string.isRequired,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/list/categoryColumn.js",["1430"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {formatDate, isValidOption, STATUS_OPTIONS} from \"../../../common/utils\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasRole from \"../../../components/HasRole\";\n\nconst categoryColumns = (onDelete = false) => [\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <HasRole role={PERMISSIONS.CATEGORY_SHOW}>\n            <Link to={`/category/${item.id}`} className=\"text-body\">\n                {item.name}\n            </Link>\n            </HasRole>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Fecha creación\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>\n                {formatDate(item.createdAt)}\n            </div>\n        ),\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <HasRole role={PERMISSIONS.CATEGORY_EDIT}>\n                    <Link to={`/category/${item.id}`} className=\"px-2 text-primary\">\n                        <i className=\"uil uil-pen font-size-18\"> </i>\n                    </Link>\n                    </HasRole>\n                </li>\n                {/*{onDelete && (\n                    <li className=\"list-inline-item\">\n                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                        </button>\n                    </li>\n                )}*/}\n            </ul>\n        ),\n    },\n]\n\nexport default categoryColumns;\n","/Users/ramon/Repositories/lucy-moie/src/pages/Product/ProductList/productColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSelectBasicField.js",["1431","1432","1433","1434","1435","1436","1437","1438","1439"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Select from \"react-select\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\nimport {map} from \"lodash\";\nimport InputAsyncSearchField from \"./InputAsyncSearchField\";\nimport {FieldSelectBasic} from \"./index\";\n\nconst InputSelectBasicField = (props) => {\n    return (\n        <select\n            id={props.id}\n            name={props.name}\n            value={props.value}\n            onChange={(e => props.onChange?props.onChange(e.target.value):'')}\n            className={props.className || \"form-control\"}>\n            {map(props.options, (option, k) => (<option key={k} value={option.value}>{option.label}</option>))}\n        </select>\n    )\n}\n\nInputSelectBasicField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    options: PropTypes.array.isRequired,\n};\n\nexport default InputSelectBasicField;","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputAsyncSearchField.js",["1440","1441"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport AsyncSelect from 'react-select/async';\nimport {FormGroup, FormText} from \"reactstrap\";\nimport './style.scss';\nimport {getData} from \"../../helpers/service\";\nimport {arrayToOptionsByFieldName, getEmptyOptions} from \"../../common/converters\";\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport Conditionals from \"../../common/conditionals\";\n\nconst InputAsyncSearchField = (props) => {\n    const {defaultValue, conditionalOptions, defaultConditions} = props;\n    const [selected, setSelected] = useState(null);\n\n    useEffect(() => {\n        setSelected(defaultValue);\n    }, [defaultValue]);\n\n    return (\n        <AvAsyncSearchInput\n            validate={{required: {value: props.required === true, errorMessage: messages.required}}}\n            name={props.name}\n            hasWild={props.hasWild || false}\n            value={selected}\n            placeholder={props.placeholder}\n            urlStr={props.urlStr}\n            isClearable={props.isClearable}\n            onChange={(value, meta) => {\n                setSelected(value)\n                if (props.onChange) {\n                    props.onChange(value, meta);\n                }\n            }}\n            conditionalOptions={conditionalOptions}\n            defaultConditions={defaultConditions}\n        />\n    )\n}\n\nInputAsyncSearchField.propTypes = {\n    urlStr: PropTypes.string.isRequired,\n};\n\n\nclass AvAsyncSearchInput extends AvBaseInput {\n    render() {\n        const {name, value, onChange, validate, isClearable, hasWild, urlStr, conditionalOptions, defaultConditions, placeholder, helpMessage} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <AsyncSelect\n                        cacheOptions\n                        defaultOptions\n                        name={name}\n                        value={value}\n                        onChange={onChange}\n                        placeholder={placeholder}\n                        isClearable={isClearable}\n                        loadOptions={inputValue => {\n                            const cond = {...conditionalOptions};\n                            let textSearch = inputValue +'';\n                            if(hasWild && inputValue.includes(\"*\")){\n                                cond.operator = Conditionals.OPERATORS.LIKE;\n                                textSearch = textSearch.replace('*', '')\n                            } else if(hasWild) {\n                                cond.operator = Conditionals.OPERATORS.LIKE;\n                            } else {\n                                cond.operator = Conditionals.OPERATORS.EQUAL;\n                            }                         return getData(urlStr, textSearch, cond, defaultConditions).then(response => {\n                                const fieldName = conditionalOptions && conditionalOptions.fieldName ? conditionalOptions.fieldName : 'name';\n                                const options = arrayToOptionsByFieldName(response.data, fieldName);\n                                //options.unshift(getEmptyOptions());\n                                return options\n                            })\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\n\nexport default InputAsyncSearchField;\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputPhoneField.js",["1442","1443","1444"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport es from 'react-phone-input-2/lang/es.json'\nimport {AvBaseInput} from \"availity-reactstrap-validation\";\nimport messages from \"./messages\";\nimport {FormText, FormGroup} from \"reactstrap\";\nimport './style.scss';\n\nconst InputPhoneField = (props) => {\n\n    return (\n        <AvPhoneInput\n            id={props.id}\n            name={props.name}\n            value={props.value}\n            required={props.required}\n            country={props.country || 'co'}\n            placeholder={props.placeholder}\n            onChange={(value) => props.onChange && props.onChange(value)}\n            validate={\n                {\n                    required: {value: props.required ? true : false, errorMessage: messages.required}\n                }\n            }\n        />\n    )\n}\n\nInputPhoneField.propTypes = {\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func,\n    country: PropTypes.string,\n    required: PropTypes.bool,\n    defaultValue: PropTypes.any,\n};\n\nclass AvPhoneInput extends AvBaseInput {\n    render() {\n        const {id, name, value, onChange, validate, required, country, placeholder, helpMessage} = this.props;\n        const validation = this.context.FormCtrl.getInputState(this.props.name);\n        const feedback = validation.errorMessage ? (<div className=\"invalid-feedback\" style={{display: \"block\"}}>{validation.errorMessage}</div>) : null;\n        const help = helpMessage ? (<FormText>{helpMessage}</FormText>) : null;\n        const isInvalid = validation.errorMessage ? \"select-is-invalid\" : \"\";\n\n        return (\n            <FormGroup className={isInvalid}>\n                <div>\n                    <PhoneInput\n                        id={id || name}\n                        country={country}\n                        onlyCountries={[country]}\n                        preferredCountries={[country]}\n                        value={value}\n                        name={name}\n                        placeholder={placeholder}\n                        localization={es}\n                        inputClass=\"form-control w-100\"\n                        inputProps={{\n                            name: {name},\n                            required: {required}\n                        }}\n                        onChange={(value, country, e, formattedValue) => {\n                            onChange(formattedValue);\n                        }}\n                    />\n                </div>\n                {feedback}\n                {help}\n            </FormGroup>\n        );\n    }\n};\n\nexport default InputPhoneField;\n","/Users/ramon/Repositories/lucy-moie/src/store/productSize/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/TableFilter/index.js",["1445","1446"],"import React, {useState} from \"react\";\nimport {Button, Card, CardBody, Col, Label, Row} from \"reactstrap\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport PropTypes from \"prop-types\";\nimport {Button as ButtonMaterial} from \"@material-ui/core\";\nimport Conditionals from \"../../common/conditionals\";\nimport {FieldAsyncSelect, FieldDate, FieldNumber, FieldSelect, FieldText} from \"../Fields\";\nimport {formatDateToServer, isValidObject, isValidOption} from \"../../common/utils\";\nimport moment from \"moment\";\nimport {DATE_MODES} from \"../Fields/InputDate\";\n\nexport const TableFilter = (props) => {\n    const {fields} = props;\n    const [show, setShow] = useState(true);\n    const form = React.createRef();\n\n    if (!props.isActive) {\n        return false;\n    }\n\n    const handleValidSubmit = (event, values) => {\n        if (props.onSubmit) {\n\n            let data = {...values};\n            const ranges = {};\n            Object.keys(values).filter(v => v.includes('_number')).forEach(v => {\n                const key = \"_\"+v.replace('_numberA_', '').replace('_numberB_', '');\n                if(!ranges[key]) ranges[key] = [];\n                ranges[key].push(values[v]);\n                delete data[v]\n            });\n\n            data = {...data, ...ranges};\n\n            const conditions = new Conditionals.Condition;\n            Object.keys(data)//FieldNames\n                .filter(dataField => data[dataField] && data[dataField] !== \"\")\n                .forEach(dataField => {\n\n                    // const isObject = data[dataField];\n                    //Se borra el \"_\" del inicio porque algunos campos se renderizan mal, ejemplo el status\n                    const fieldName = dataField.substr(1);\n\n                    let field = fields.filter(field => field.filter).filter(field => field.dataField === fieldName);\n\n                    if (!field || field.length === 0) {\n                        //para buscar dentro de nodos\n                        field = fields.filter(field => field.filter)\n                            .filter(field => field.dataField.includes('.') || field.dataField.includes('__'))\n                            .filter(field => field.dataField.startsWith(fieldName));\n                    }\n\n                    if (field && field.length > 0) {\n                        if (field.length === 1) {\n                            addConditionals(conditions, data, field, dataField, fieldName);\n                        }else{\n                            //agregar los los valores de los distintos nodos\n                            field.forEach(f => {\n                                const attr = f.dataField.split('.')[1];\n                                const d = {};\n                                d[f.dataField] = data[dataField][attr];\n\n                                if(d[f.dataField] && d[f.dataField] !== \"\"){\n                                    addConditionals(conditions, d, [f], f.dataField, f.dataField);\n                                }\n                            })\n                        }\n                    }\n                });\n\n            props.onSubmit(conditions.all());\n        }\n    }\n\n    const addConditionals = (conditions, data, field, dataField, fieldName) => {\n        if (field && field.length) {\n            fieldName = fieldName.replace('__', \".\")\n            const filter = field[0];\n            const value = data[dataField];\n\n            let operator;\n            if (filter.filterType === \"text\") {\n                operator = filter.filterCondition ? filter.filterCondition : Conditionals.OPERATORS.LIKE;\n                conditions.add(fieldName, value, operator);\n            }\n            if (filter.filterType === \"voyed\") {//for status\n                    operator = resolveOperator(filter, value.value ? Conditionals.OPERATORS.NOT_NULL : Conditionals.OPERATORS.NULL);\n                    conditions.add(fieldName, null, operator);\n            }\n            if (filter.filterType === \"select\" && isValidOption(filter.filterOptions, value.value)) {//for status\n                if(value.value === true || value.value === false){\n                    operator = resolveOperator(filter, value.value ? Conditionals.OPERATORS.TRUE : Conditionals.OPERATORS.FALSE);\n                    conditions.add(fieldName, null, operator);\n                }else{\n                    operator = resolveOperator(filter, Conditionals.OPERATORS.EQUAL);\n                    conditions.add(fieldName, value.value, operator);\n                }\n            }\n            if (filter.filterType === \"asyncSelect\" && value.value) {\n                operator = resolveOperator(filter, Conditionals.OPERATORS.EQUAL);\n                conditions.add(fieldName, value.value, operator);\n            }\n\n            if (filter.filterType === \"number\" && isValidObject(value) && value.length > 0) {\n\n                if (value.length > 1 && value[0] && value[1]) {\n                    conditions.add(fieldName, value[0], Conditionals.OPERATORS.BETWEEN,[value[1]]);\n\n                } else if (value.length > 0 && value[0]) {\n                    conditions.add(fieldName, value[1], Conditionals.OPERATORS.GREATER_THAN_OR_EQUAL);\n\n                } else if (value.length > 1 && value[1]) {\n                    conditions.add(fieldName, value[1], Conditionals.OPERATORS.LESS_THAN);\n                }\n\n            }\n            if (filter.filterType === \"dateRange\" && value && value.length > 0) {\n                if(moment(value[0]).isSame(moment(value[1]))){\n                    conditions.add(fieldName,formatDateToServer(value[0]),Conditionals.OPERATORS.LESS_THAN_OR_EQUAL);\n                }\n                else {\n                    conditions.add(fieldName,formatDateToServer(value[0]), Conditionals.OPERATORS.BETWEEN,[formatDateToServer(value[1])]);\n                }\n            }\n        }\n    }\n\n    const resolveOperator = (filter, defaultOperator) => {\n        return  filter.filterCondition ? filter.filterCondition : defaultOperator;\n    }\n\n    const cleanFilters = () => {\n        const conditions = new Conditionals.Condition;\n        props.onSubmit(conditions.all());\n        form && form.current && form.current.reset();\n        setShow(false);\n        setTimeout(() => {\n            setShow(true);\n        }, 10)\n    }\n\n    return (<div className=\"col-md-4\">\n        <Card>\n            <CardBody>\n                {props.onPressDisabled && (\n                    <div className={\"float-end\"}>\n                        <ButtonMaterial color=\"primary\" size=\"small\" onClick={props.onPressDisabled}>\n                            <i className={\"mdi mdi-minus\"}> </i>\n                        </ButtonMaterial>\n                    </div>\n                )}\n                <div className=\"mb-4\">\n                    <h5><i className={\"mdi mdi-filter-menu\"}> </i> Filtros Avanzados &nbsp;</h5>\n                </div>\n                {show && (\n                    <AvForm className=\"needs-validation\" autoComplete=\"off\"\n                            onValidSubmit={(e, v) => {\n                                handleValidSubmit(e, v)\n                            }}\n                            ref={form}>\n\n                        {fields.filter(f => f.filter).map((field, idx) => (\n                            <Row key={idx}>\n                                {field.filterType === 'text' && (\n                                    <Col md=\"12\">\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldText name={\"_\" + field.dataField}\n                                                       defaultValue={field.filterDefaultOption}\n                                                       placeholder={field.text}/>\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'number' && (\n                                    <Col md=\"12\">\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <Row>\n                                                <Col xs=\"6\">\n                                                    <FieldNumber name={\"_numberA_\" + field.dataField}\n                                                                 defaultValue={field.filterDefaultOption}\n                                                                 placeholder=\"Desde\"\n                                                    />\n                                                </Col>\n                                                <Col xs=\"6\">\n                                                    <FieldNumber name={\"_numberB_\" + field.dataField}\n                                                                 defaultValue={field.filterDefaultOption}\n                                                                 placeholder=\"Hasta\"\n                                                    />\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'select' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldSelect\n                                                id={\"_\" + field.dataField}\n                                                name={\"_\" + field.dataField}\n                                                options={field.filterOptions}\n                                                defaultValue={field.filterDefaultOption}\n                                                placeholder={field.text}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'voyed' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldSelect\n                                                name={\"_\" + field.dataField}\n                                                options={field.filterOptions}\n                                                defaultValue={field.filterDefaultOption}\n                                                placeholder={field.text}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'asyncSelect' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldAsyncSelect\n                                                name={\"_\" + field.dataField}\n                                                urlStr={field.urlStr}\n                                                placeholder={field.text}\n                                                defaultValue={field.filterDefaultOption}\n                                                conditionalOptions={field.conditionalOptions}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                                {field.filterType === 'dateRange' && (\n                                    <Col md=\"12\" >\n                                        <div className=\"mb-3\">\n                                            <Label htmlFor={\"_\" + field.dataField}>{field.text}</Label>\n                                            <FieldDate\n                                                name={\"_\" + field.dataField}\n                                                mode={DATE_MODES.RANGE}\n                                            />\n                                        </div>\n                                    </Col>\n                                )}\n                            </Row>\n                        ))}\n                        <Row>\n                            <Col md={\"12\"}>\n                                <div className={\"float-end\"}>\n                                    <Button type=\"submit\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                        <i className={\"mdi mdi-magnify\"}> </i> Buscar\n                                    </Button>\n                                </div>\n                                <div className={\"float-end ml-5\"}>\n                                    <Button type=\"button\"\n                                            onClick={cleanFilters}\n                                            color=\"default\"\n                                            className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                        Limpiar\n                                    </Button>\n                                </div>\n                            </Col>\n                        </Row>\n                    </AvForm>\n                )}\n            </CardBody>\n        </Card>\n    </div>)\n}\nTableFilter.propTypes = {\n    isActive: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    onPressDisabled: PropTypes.func,\n    fields: PropTypes.array.isRequired\n};\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputTextField.js",["1447","1448"],"import {AvField} from \"availity-reactstrap-validation\";\nimport React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport messages from './messages';\n\nconst TextField = (props) => (\n    <AvField\n        id ={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onChange={props.onChange ? props.onChange : null}\n        onBlur={props.onBlur ? props.onBlur : null}\n        onKeyPress={props.onKeyPress ? props.onKeyPress : null}\n        type={props.type ? props.type : \"text\"}\n        className={`form-control ${props.className ? props.className : ''}` }\n        validate={\n            {\n                required: { value: props.required ? true : false, errorMessage: messages.required },\n                minLength: { value: props.minLength ? props.minLength: 0, errorMessage: messages.minLength.replace(\"{length}\", props.minLength)},\n                maxLength: { value: props.maxLength ? props.maxLength: 255, errorMessage: messages.maxLength.replace(\"{length}\", props.maxLength)}\n            }\n        }\n    />\n)\n\nTextField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    minLength: PropTypes.number,\n    maxLength: PropTypes.number,\n}\n\nconst TextAlphaField = (props) => (\n    <AvField\n        id ={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        onChange={props.onChange ? props.onChange : null}\n        onBlur={props.onBlur ? props.onBlur : null}\n        type={props.type ? props.type : \"text\"}\n        className={`form-control ${props.className ? props.className : ''}` }\n        validate={\n            {\n                required: { value: props.required ? true : false, errorMessage: messages.required },\n                minLength: { value: props.minLength ? props.minLength: 0, errorMessage: messages.minLength.replace(\"{length}\", props.minLength)},\n                maxLength: { value: props.maxLength ? props.maxLength: 255, errorMessage: messages.maxLength.replace(\"{length}\", props.maxLength)},\n                pattern: {value: '^[A-Za-z]+$', errorMessage: messages.onlyAlpha},\n            }\n        }\n    />\n)\n\nTextAlphaField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    minLength: PropTypes.number,\n    maxLength: PropTypes.number,\n}\n\nconst NumberField = (props) => {\n\n    const [value, setValue] = useState(props.value);\n\n    useEffect(() => {\n        if (null != props.value && props.value !== value) {\n            setValue(isNaN(props.value) ? \"\" : props.value);\n        }\n    }, [props.value])\n\n    const onChange = (e) => {\n        let val = e.target.value;\n        setValue(val);\n        if (isNaN(Number(val))) {\n            val = value || val;\n            setTimeout(() => {\n                setValue(clearValue(val));\n            }, 10)\n        }\n        if (props.onChange) {\n            props.onChange(clearValue(val));\n        }\n    }\n\n    const clearValue = (val) => {\n        return val && val.replace ? parseFloat(val.replace(/[^\\d]/g, '')) : null;\n    }\n\n    return <AvField\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        defaultValue={value}\n        placeholder={props.placeholder}\n        disabled={props.disabled}\n        onChange={onChange}\n        onKeyPress={(event) => {\n            if (!/[0-9]/.test(event.key)) {\n                event.preventDefault();\n            }\n        }}\n        type={\"text\"}\n        className=\"form-control\"\n        validate={\n            {\n                required: {value: props.required === true, errorMessage: messages.required},\n            }\n        }\n    />\n}\n\nNumberField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.number,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool\n}\n\nconst NumberDecimalField = (props) => {\n\n    const [value, setValue] = useState(props.value);\n\n    useEffect(() => {\n        if (null != props.value && props.value !== value) {\n            setValue(isNaN(props.value) ? \"\" : props.value);\n        }\n    }, [props.value])\n\n    const onChange = (e) => {\n        let val = e.target.value;\n        setValue(val);\n        if (isNaN(Number(val))) {\n            val = value || val;\n            setTimeout(() => {\n                setValue(clearValue(val));\n            }, 10)\n        }\n        if (props.onChange) {\n            props.onChange(clearValue(val));\n        }\n    }\n\n    const clearValue = (val) => {\n        return val && val.replace ? parseFloat(val.replace(/[^\\d.]/g, '')) : null;\n    }\n\n    return <AvField\n        id={props.id}\n        name={props.name}\n        value={value}\n        defaultValue={value}\n        placeholder={props.placeholder}\n        onChange={onChange}\n        onKeyPress={(event) => {\n            if (!/[0-9.]/.test(event.key)) {\n                event.preventDefault();\n            }\n        }}\n        type=\"text\"\n        className=\"form-control\"\n        validate={\n            {\n                required: {value: props.required === true, errorMessage: messages.required},\n            }\n        }\n    />\n}\n\nNumberDecimalField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.number,\n    placeholder: PropTypes.string,\n    required: PropTypes.bool\n}\n\nconst EmailField = (props) => (\n    <AvField\n        id ={props.id}\n        name={props.name}\n        value={props.value}\n        placeholder={props.placeholder}\n        type={props.type}\n        className=\"form-control\"\n        validate={\n            {   required: {\n                    value: props.required ? true : false,\n                    errorMessage: messages.required },\n                email: { value: true, errorMessage: messages.email_invalid } }\n        }\n    />\n)\n\nEmailField.propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    required: PropTypes.bool\n}\n\nexport {\n    TextField,\n    NumberField,\n    NumberDecimalField,\n    EmailField,\n    TextAlphaField\n};\n","/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSwitchField.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/InputSearchField.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard1.js",["1449","1450","1451","1452","1453","1454"],"import React, {useEffect, useState} from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\nimport WidgetCard from \"./WidgetCard\";\n\nconst series1 = [{\n    data: [25, 66, 41, 89, 63, 25, 44, 20, 36, 40, 54]\n}]\nconst options1 = {\n    fill: {\n        colors: ['#5b73e8']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        enabled: false,\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: !1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst WidgetCard1 = props => {\n    const {statusGroup, title} = props;\n    const [dataCard, setDataCard] = useState({});\n\n    useEffect(() => {\n        let active = 0;\n        let inactive = 0;\n        if(statusGroup ){\n            if(statusGroup[1]) active = statusGroup[1];\n            if(statusGroup[0]) inactive = statusGroup[0];\n        }\n\n        const total = active + inactive;\n        const data = {\n            id: 1,\n            icon: \"mdi mdi-clock-five-time\",\n            title: title,\n            value: total,\n            prefix: \"\",\n            suffix: \"\",\n            decimal: 0,\n            charttype: \"bar\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: active,\n            color: \"success\",\n            desc: \"activos\",\n            badgeValue2: inactive,\n            color2: \"danger\",\n            desc2: \"inactivos\",\n            series: series1,\n            options: options1,\n        };\n        setDataCard(data);\n    }, [statusGroup])\n\n    return (\n        <WidgetCard report={dataCard} />\n    )\n}\n\n\nWidgetCard1.propTypes = {\n    statusGroup: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nexport default WidgetCard1\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard4.js",["1455","1456","1457","1458","1459","1460"],"import React, {useEffect, useState} from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\nimport WidgetCard from \"./WidgetCard\";\n\nconst series4 = [{\n    data: [0.1, 0.5, 0.2, 0.3, 0.2]\n}]\n\nconst options4 = {\n\n    fill: {\n        colors: ['#f1b44c']\n    },\n    chart: {\n        width: 70,\n        sparkline: {\n            enabled: !0\n        }\n    },\n    plotOptions: {\n        bar: {\n            columnWidth: '50%'\n        }\n    },\n    labels: [\"Antier\", \"Ayer\", \"Hoy\"],\n    xaxis: {\n        crosshairs: {\n            width: 1\n        },\n    },\n    tooltip: {\n        enabled: false,\n        fixed: {\n            enabled: !1\n        },\n        x: {\n            show: 1\n        },\n        y: {\n            title: {\n                formatter: function (seriesName) {\n                    return ''\n                }\n            }\n        },\n        marker: {\n            show: !1\n        }\n    }\n};\n\nconst WidgetCard4 = props => {\n    const {reportData = {}, title} = props;\n    const [dataCard, setDataCard] = useState({});\n\n    useEffect(() => {\n        let rData = {};\n        if(reportData){\n            rData = {...reportData};\n        }\n\n        const data = {\n            id: 4,\n            icon: \"uil-users-alt\",\n            title: title,\n            value: rData.lastWeek || 0,\n            decimal: 0,\n            charttype: \"line\",\n            chartheight: 40,\n            chartwidth: 70,\n            badgeValue: `${!!rData.today ? rData.today : 0}`,\n            color: \"success\",\n            desc: \"registrados hoy\",\n            series: series4,\n            options: options4\n        };\n        setDataCard(data);\n    }, [reportData])\n\n    return (\n        <WidgetCard report={dataCard}/>\n    )\n}\n\n\nWidgetCard4.propTypes = {\n    reportData: PropTypes.object.isRequired,\n    title: PropTypes.string.isRequired\n}\n\nexport default WidgetCard4\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/HtmlTooltip.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Fields/messages.js",["1461"],"export default {\n    required: 'Campo requerido',\n    minLength: 'Debe ingresar al menos {length} caracteres.',\n    maxLength: 'Solo puede ingresar {length} caracteres.',\n    email_invalid: 'Email es invalido',\n    minValue: 'Este campo es invalido',\n    onlyAlpha: 'Este campo solo permite valores de [A-Z]',\n};\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/WidgetCard.js",["1462"],"import React from \"react\"\nimport imageNotFound from \"../../assets/images/image-not-found.png\"\nimport {Card, CardBody} from \"reactstrap\";\nimport ReactApexChart from \"react-apexcharts\";\nimport CountUp from \"react-countup\";\nimport PropTypes from \"prop-types\";\n\nconst WidgetCard = props => {\n\n    const {report} = props;\n    return (\n        <Card>\n            {report.charttype && (\n                <CardBody>\n                    <div className=\"float-end mt-2\">\n\n                        <ReactApexChart\n                            options={report.options}\n                            series={report.series}\n                            type={report.charttype}\n                            height={report.chartheight}\n                            width={report.chartwidth}\n                        />\n\n                    </div>\n                    <div>\n                        <h4 className=\"mb-1 mt-1\">\n                        <span>\n                            <CountUp end={report.value} separator=\",\" prefix={report.prefix} suffix={report.suffix} decimals={report.decimal}/>\n                        </span>\n                        </h4>\n                        <p className=\"text-muted mb-0\">{report.title}</p>\n                    </div>\n                    <p className=\"text-muted mt-3 mb-0\">\n                    <span className={\"text-\" + report.color + \" me-1\"}>\n                        <i className={report.icon + \" me-1\"}> </i>{report.badgeValue}\n                    </span> {\" \"}{report.desc}\n                        {(report.badgeValue2 || report.badgeValue2 === 0) && (\n                            <> &nbsp; / &nbsp;\n                                <span className={\"text-\" + report.color2 + \" me-1\"}>\n                                    <i className={report.icon2 + \" me-1\"}> </i> {report.badgeValue2}\n                                </span> {\" \"}{report.desc2}\n                            </>\n                        )}\n                    </p>\n                </CardBody>\n            )}\n        </Card>\n    )\n}\n\n\nWidgetCard.propTypes = {\n    report: PropTypes.object.isRequired\n}\n\nexport default WidgetCard\n","/Users/ramon/Repositories/lucy-moie/src/pages/State/list/statesColumn.js",["1463"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {ConverterStatus} from \"../../../common/converters\";\nimport {STATUS} from \"../../../common/constants\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {isValidOption, STATUS_OPTIONS} from \"../../../common/utils\";\n\nconst statesColumns = (onDelete = false) => [\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <Link to=\"#\" className=\"text-body\">\n                    {item.name}\n                </Link>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Código DIAN\",\n        dataField: \"dianCode\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Código ISO\",\n        dataField: \"isoCode\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === STATUS.ACTIVE ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <Link to={`/state/${item.id}`} className=\"px-2 text-primary\">\n                        <i className=\"uil uil-pen font-size-18\"> </i>\n                    </Link>\n                </li>\n                {onDelete && (\n                    <li className=\"list-inline-item\">\n                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                        </button>\n                    </li>\n                )}\n            </ul>\n        ),\n    },\n]\n\nexport default statesColumns;\n","/Users/ramon/Repositories/lucy-moie/src/components/mentions/mentionStyles.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Reports/BillsReportForm.js",["1464"],"import React, {useEffect} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\nimport { BILL_MEMO_TYPES, REPORT_TYPES } from \"../../common/constants\";\n\nconst types = [{label: 'Facturas electrónicas', value: BILL_MEMO_TYPES.INVOICE }, {label: 'Notas de crédito', value: BILL_MEMO_TYPES.CREDIT }];\n\nconst BillsReportForm = ({onCloseModal, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            type: values.type.value,\n            dateFrom: formatDateToServer(values.reportDate[0]),\n            dateTo: formatDateToServer(values.reportDate[1])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Tipo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"type\"}\n                                        name={\"type\"}\n                                        options={types}\n                                        defaultValue={types[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fechas <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.RANGE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.Bill;\n    return {loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.BILLS, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BillsReportForm)\n)\n\nBillsReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Bill/list/billColumns.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Payments/paymentOverlay.js",["1465","1466","1467"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\nimport {getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS, PAYMENT_STATUS} from \"../../common/constants\";\nimport {applyPayment, getPayment} from \"../../store/payments/actions\";\n\nconst PaymentOverlay = (props) => {\n\n    const {paymentSelected, payment, onRelateOrder, onCloseOverlay, onGetOrders, orders, onGetPayment, refresh} = props;\n    const [findOrderBy, setFindOrderBy] = useState(null);\n\n    useEffect(() => {\n        if (paymentSelected) {\n            onReload();\n        }\n    }, [paymentSelected, refresh]);\n\n    const onReload = () => {\n        onGetPayment(paymentSelected.id);\n\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"payment\", null, Conditionals.OPERATORS.NULL);\n        conditions.add(\"orderDelivery.deliveryType\", '1::2', Conditionals.OPERATORS.IN);\n        conditions.add('status', 1);\n        onGetOrders(conditions);\n        setFindOrderBy(\"NO_PAYMENT\");\n    }\n\n    const selectOrder = (order) => {\n        ConfirmationModalAction({\n            title: 'Confirmación',\n            description: `Usted está asociando el pago# ${paymentSelected.id} con el pedido# ${order.id}, ¿Desea continuar?`,\n            id: '_clienteModal',\n            onConfirm: () => {\n                onRelateOrder(paymentSelected.id, {orderId: order.id});\n                onReload();\n            }\n        });\n    }\n\n    return paymentSelected && payment && payment.id ? (\n        <div className={'orderDetail-overlay pt-2'}>\n            <Row className=\"mb-2\">\n                <Col md={12}>\n                    <div className={\"mb-3 float-md-start\"}>\n                        <Tooltip placement=\"bottom\" title=\"Ocultar\" aria-label=\"add\">\n                            <button className=\"btn btn-outline-default mr-5\" onClick={() => onCloseOverlay()}>\n                                <i className=\"uil uil-arrow-to-right font-size-16\"> </i>\n                            </button>\n                        </Tooltip>\n                        <small className=\"badge rounded-pill bg-info font-size-14 mr-5 p-2\">Pago# {payment.id}</small>\n                    </div>\n                    <div className={\"mb-3 float-md-end\"}>\n\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-3\">\n                <Col md={12} className=\"p-3\">\n                    <Card id={'payment-detail'} className=\"p-3\">\n                        <Row>\n                        <Col xs={10}>\n                            <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Datos del pago</h4>\n                        </Col>\n                        <Col xs={2}>\n                            <StatusField color={PAYMENT_STATUS[payment.status].color}>\n                                {PAYMENT_STATUS[payment.status].name}\n                            </StatusField>\n                        </Col>\n                        </Row>\n                        <Row>\n                            <Col md={6}>\n                                <label>Nombre: </label>\n                                <span className=\"p-1\">{payment.name}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Teléfono: </label>\n                                <span className=\"p-1\">{payment.phone}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Correo: </label>\n                                <span className=\"p-1\">{payment.email}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Forma de pago: </label>\n                                <span className=\"p-1\">{payment.type}</span>\n                            </Col>\n                            {payment.originBank && (\n                                <Col md={6}>\n                                    <label>Banco origen: </label>\n                                    <span className=\"p-1\">{payment.originBank}</span>\n                                </Col>\n                            )}\n                            <Col md={6}>\n                                <label>Banco destino: </label>\n                                <span className=\"p-1\">{payment.targetBank}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Fecha: </label>\n                                <span className=\"p-1\">{formatDate(payment.createdAt)}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Número de comprobante: </label>\n                                <span className=\"p-1\">{payment.consignmentNumber}</span>\n                            </Col>\n                            <Col md={6}>\n                                <label>Monto: </label>\n                                <span className=\"p-1\">{priceFormat(payment.consignmentAmount, \"\", true)}</span>\n                            </Col>\n                        </Row>\n                    </Card>\n                </Col>\n                <Col md={12} className=\"p-3\">\n                    {!payment.order && (\n                        <Card id={'orders'} className=\"p-3\">\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Seleccionar venta</h4>\n                            </Col>\n                            <Row>\n                                <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                                    <thead>\n                                    <tr>\n                                        <th style={{width: '10%'}}># Pedido</th>\n                                        <th style={{width: '35%'}}>Cliente</th>\n                                        <th style={{width: '15%'}}>Fecha</th>\n                                        <th style={{width: '15%'}}>Monto</th>\n                                        <th style={{width: '10%'}}>Envio</th>\n                                        <th style={{width: '15%'}}>Total</th>\n                                        <th></th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {orders.length === 0 && (\n                                        <tr>\n                                            <td colSpan={6} style={{\"textAlign\": \"center\"}}>No hay registros que mostrar</td>\n                                        </tr>\n                                    )}\n                                    {orders.map((order, k) => (\n                                        <tr>\n                                            <td>{order.id}</td>\n                                            <td>{order.customer.name}</td>\n                                            <td>{formatDate(order.createdAt)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.subTotalAmount, \"\", true)}</td>\n                                            <td className=\"text-end\">{priceFormat(parseFloat(order.totalAmount || 0) - parseFloat(order.subTotalAmount || 0), \"\", true)}</td>\n                                            <td className=\"text-end\">{priceFormat(order.totalAmount, \"\", true)}</td>\n                                            <td>\n                                                <Tooltip placement=\"bottom\" title=\"Asociar pedido\" aria-label=\"add\">\n                                                    <button size=\"small\" className=\"btn btn-sm btn-primary\" onClick={() => selectOrder(order)}>\n                                                        <i className=\"uil uil-plus-circle font-size-18\"> </i>\n                                                    </button>\n                                                </Tooltip>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Row>\n                        </Card>\n                    )}\n                    {payment.order && (\n                        <Card id={'order-detail'} className=\"p-3\">\n                            <Col xs={10}>\n                                <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Pedido asociado</h4>\n                            </Col>\n                            <Row>\n                                <Col md={6}>\n                                    <label>Pedido #: </label>\n                                    <span className=\"p-1\">{payment.order.id}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Estado: </label>\n                                    <span className=\"p-1\">\n                                         <StatusField color={ORDER_STATUS[payment.order.status].color} className={\"font-size-10 mr-5\"}>\n                                            {ORDER_STATUS[payment.order.status].name}\n                                        </StatusField>\n                                    </span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Cliente: </label>\n                                    <span className=\"p-1\">{payment.order.customer.name}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Correo: </label>\n                                    <span className=\"p-1\">{payment.order.customer.email}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Fecha: </label>\n                                    <span className=\"p-1\">{formatDate(payment.order.createdAt)}</span>\n                                </Col>\n                                <Col md={6}>\n                                    <label>Cantidad de prendas: </label>\n                                    <span className=\"p-1\">{payment.order.quantity}</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={4}>\n                                    <label>Monto: </label>\n                                    <span className=\"p-1\">{priceFormat(payment.order.subTotalAmount, \"\", true)}</span>\n                                </Col>\n                                <Col md={4}>\n                                    <label>Envio: </label>\n                                    <span className=\"p-1\">{priceFormat(payment.order.totalAmount - payment.order.subTotalAmount, \"\", true)}</span>\n                                </Col>\n                                <Col md={4}>\n                                    <label>Total: </label>\n                                    <span className=\"p-1\">{priceFormat(payment.order.totalAmount, \"\", true)}</span>\n                                </Col>\n                            </Row>\n                        </Card>\n                    )}\n                </Col>\n            </Row>\n\n        </div>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {orders} = state.Order\n    const {payment, refresh} = state.Payments;\n    return {orders, payment, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetPayment: (id) => dispatch(getPayment(id)),\n    onGetOrders: (conditions) => dispatch(getOrders(conditions.all(), 500, 0)),\n    onRelateOrder: (paymentId, payload) => dispatch(applyPayment(paymentId, payload))\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PaymentOverlay)\n)\n\nPaymentOverlay.propTypes = {\n    paymentSelected: PropTypes.object.isRequired,\n    showOverlay: PropTypes.bool,\n    onCloseOverlay: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Payments/list/paymentsColumn.js",["1468"],"import React from \"react\"\nimport Conditionals from \"../../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../../common/utils\";\nimport {StatusField} from \"../../../components/StatusField\";\nimport {ORDER_STATUS, PAYMENT_STATUS} from \"../../../common/constants\";\n\nconst paymentsColumns = (onSelected) => [\n    {\n        text: \"ID\",\n        dataField: \"id\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <button className=\"btn btn-outline-default\" onClick={() => onSelected(item)}>\n                    <b className=\"text-info\">{item.id}</b>\n                </button>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n        formatter: (cellContent, item) => (\n            <>\n                {cellContent} &nbsp; {item.status > 0 && <span><i className={\"mdi mdi-check font-size-18 mr-1 text-success\"}> </i></span>}\n            </>\n        ),\n    },\n    {\n        text: \"Fecha\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>\n                {formatDate(item.createdAt)}\n            </div>\n        ),\n    },\n    {\n        text: \"Forma de pago\",\n        dataField: \"type\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Origen\",\n        dataField: \"originBank\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Destino\",\n        dataField: \"targetBank\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Monto\",\n        dataField: \"consignmentAmount\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        formatter: (cellContent, item) => (\n            <div className=\"text-right\">\n                {priceFormat(item.consignmentAmount, \"\", true)}\n            </div>\n        ),\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        formatter: (cellContent, item) => (\n            <StatusField color={PAYMENT_STATUS[item.status].color}>\n                {PAYMENT_STATUS[item.status].name}\n            </StatusField>\n        ),\n    },\n]\n\nexport default paymentsColumns;\n","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderConciliationsForm.js",["1469","1470","1471","1472","1473","1474"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldAsyncSelect, FieldSelect, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {ORDERS} from \"../../helpers/url_helper\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport {confirmConciliation, confirmConciliationRestart, getOrder, restartOrder} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {priceFormat} from \"../../common/utils\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\nimport {fetchOrdersApi} from \"../../helpers/backend_helper\";\n\nconst searchByOptions = [{label: \"Pedido\", value: \"ID\"}, {label: \"Guia\", value: \"GUIA\"}, {label: \"Lote Guia\", value: \"LOTE_GUIA\"}, {label: \"Lote pedido\", value: \"LOTE_PEDIDO\"}];\nconst emptyOption = getEmptyOptions();\n\nconst OrderConciliationForm = ({\n                                   onConfirmConciliationRestart,\n                                   conciliationSuccess,\n                                   conciliationError,\n                                   conciliationLoading,\n                                   onGetOrder,\n                                   onCloseModal,\n                                   order,\n                                   loading,\n                                   success,\n                                   error,\n                                   onRestartOrder,\n                                   onConfirmConciliate\n                               }) => {\n\n    const [orderId, setOrderId] = useState(null);\n    const [orders, setOrders] = useState([]);\n    const [searchBy, setSearchBy] = useState(searchByOptions[0].value);\n    const [defaultOption, setDefaultOption] = useState(emptyOption);\n    const [lote, setLote] = useState(null);\n\n    useEffect(() => {\n        if (order) {\n            const list = [...orders];\n            if (!list.some(o => o.id === order.id)) {\n                list.push(order);\n                list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                setOrders(list);\n            }\n        } else {\n            setOrders([]);\n        }\n    }, [order]);\n\n    useEffect(() => {\n        if (onRestartOrder) {\n            onRestartOrder();\n        }\n    }, [onRestartOrder]);\n\n    useEffect(() => {\n        if (conciliationSuccess && !conciliationError) {\n            onCloseModal(true);\n            onConfirmConciliationRestart();\n        }\n    }, [conciliationSuccess]);\n\n    const addLote = () => {\n        lote.split(' ')\n            .filter(l => l)\n            .filter(l => !orders.some(o => o.id == l))\n            .forEach(id => {\n                onGetOrder(id);\n            })\n        setLote(\"\");\n    }\n    const addLoteGuia = () => {\n\n        const trackingList = lote.split(' ')\n            .filter(tracking => tracking)\n            .filter(tracking => !orders.some(o => o.orderDelivery && o.orderDelivery.tracking === tracking))\n            .map(tracking => tracking);\n\n        const list = [...orders];\n\n        trackingList.forEach((tracking, index) => {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"orderDelivery.tracking\", tracking, Conditionals.OPERATORS.EQUAL);\n            const cond = Conditionals.getConditionalFormat(conditions.all());\n            const query = Conditionals.buildHttpGetQuery(cond, 1, 0);\n\n            fetchOrdersApi(query).then(resp => {\n                if (resp && resp.data && resp.data.length === 1) {\n                    let _order = resp.data[0];\n                    if (!list.some(o => o.id === _order.id)) {\n                        list.push(_order);\n                        list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                    }\n                }\n\n                if ((index + 1) === trackingList.length) {\n                    setOrders(list);\n                }\n            })\n        })\n        setLote(\"\");\n    }\n\n    /*const addLoteGuia = () => {\n        console.log('addOrder', lote);\n\n        const trackingList = lote.split(' ')\n            .filter(tracking=> tracking)\n            .filter(tracking => !orders.some(o => o.orderDelivery && o.orderDelivery.tracking === tracking))\n            .map(tracking=> tracking);\n\n        const conditions = new Conditionals.Condition;\n        conditions.add(\"orderDelivery.tracking\", trackingList, Conditionals.OPERATORS.IN);\n        const cond = Conditionals.getConditionalFormat(conditions.all());\n        const query = Conditionals.buildHttpGetQuery(cond, 1, 0);\n\n        fetchOrdersApi(query).then(o => {\n            console.log('YG OOO ', o)\n            if(o && o.data && o.data.length > 0){\n                const list = [...orders];\n                o.data.forEach((_order) => {\n                    if (!list.some(o => o.id === _order.id)) {\n                        list.push(_order);\n                        list.sort((a, b) => (a.id > b.id) ? 1 : -1);\n                    }\n                })\n                setOrders(list);\n            }\n        })\n        setLote(\"\");\n    }*/\n\n    const addOrder = () => {\n        if (searchBy === 'LOTE_GUIA') {\n            addLoteGuia();\n            return;\n        }\n        if (searchBy === 'LOTE_PEDIDO') {\n            addLote();\n            return;\n        }\n        console.log('addOrder', orderId);\n        onGetOrder(orderId);\n        setDefaultOption(getEmptyOptions());\n        setOrderId(null);\n    }\n\n    const removeOrder = (orderId) => {\n        console.log('removeOrder', orderId);\n        const list = [...orders];\n        const orderToRemove = list.find(o => o.id === orderId);\n        list.splice(list.indexOf(orderToRemove), 1);\n        setOrders(list);\n    }\n\n    const doConciliation = (e) => {\n        onConfirmConciliate(orders.filter(o => o.status === 4).map(o => o.id));\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => doConciliation(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col md={4}>\n                                <Label htmlFor=\"product\">Buscar por</Label>\n                                <FieldSelect\n                                    id={\"searchByOptions\"}\n                                    name={\"searchByOptions\"}\n                                    options={searchByOptions}\n                                    defaultValue={searchBy}\n                                    onChange={(e) => {\n                                        setSearchBy(e.value);\n                                    }}\n                                />\n                            </Col>\n                            {searchBy === \"ID\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"product\">Pedido # </Label>\n                                    <FieldAsyncSelect\n                                        name={\"order\"}\n                                        urlStr={ORDERS}\n                                        placeholder=\"Buscar por Pedido\"\n                                        defaultValue={defaultOption}\n                                        conditionalOptions={{fieldName: 'id', operator: Conditionals.OPERATORS.EQUAL}}\n                                        defaultConditions={[{field: 'status', value: 4, operator: Conditionals.OPERATORS.EQUAL}]}\n                                        onChange={(c) => {\n                                            setOrderId(c.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"GUIA\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"customer\">Guia</Label>\n                                    <FieldAsyncSelect\n                                        name={\"tracking\"}\n                                        urlStr={ORDERS}\n                                        placeholder=\"Buscar por Guia\"\n                                        defaultValue={defaultOption}\n                                        conditionalOptions={{fieldName: 'orderDelivery.tracking', operator: Conditionals.OPERATORS.LIKE}}\n                                        onChange={(c) => {\n                                            setOrderId(c.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"LOTE_GUIA\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"orders\">Lote - Guias</Label>\n                                    <FieldText\n                                        id='loteTracking'\n                                        name={\"loteTracking\"}\n                                        value={lote}\n                                        defaultValue={lote}\n                                        onChange={(e) => {\n                                            setLote(e.target.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            {searchBy === \"LOTE_PEDIDO\" && (\n                                <Col md={6}>\n                                    <Label htmlFor=\"orders\">Lote - Pedidos</Label>\n                                    <FieldText\n                                        id='loteOrder'\n                                        name={\"loteOrder\"}\n                                        value={lote}\n                                        defaultValue={lote}\n                                        onChange={(e) => {\n                                            setLote(e.target.value);\n                                        }}\n                                    />\n                                </Col>\n                            )}\n                            <Col md={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Agregar\" aria-label=\"add\">\n                                    <button type=\"button\"\n                                            className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={(!orderId && !lote) || loading}\n                                            onClick={() => addOrder()}>\n                                        {loading && <i className=\"fa fa-spinner fa-spin\"> </i>}\n                                        {!loading && <i className=\"mdi mdi-plus\"> </i>}\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <table className=\"table table-condensed table-bordered\">\n                                    <thead>\n                                    <tr>\n                                        <th>Pedido</th>\n                                        <th>Estado</th>\n                                        <th>Guia</th>\n                                        <th>Cliente</th>\n                                        <th>Monto</th>\n                                        <th></th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {orders.filter(o => o.status === 4).map(o => (\n                                        <tr>\n                                            <td>{o.id}</td>\n                                            <td>\n                                                <StatusField color={ORDER_STATUS[o.status]?.color}>\n                                                    {ORDER_STATUS[o.status]?.name}\n                                                </StatusField>\n                                            </td>\n                                            <td>{o.orderDelivery?.tracking}</td>\n                                            <td>{o.customer?.name}</td>\n                                            <td className=\"text-end\">{priceFormat(o.totalAmount)}</td>\n                                            <td className=\"text-center\">\n                                                <a title=\"button\" className=\"btn btn-sm text-danger\" onClick={() => removeOrder(o.id)}>\n                                                    <i className=\"uil uil-trash-alt font-size-16\"> </i>\n                                                </a>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Col>\n                            <Col>\n                                <div><b>Cant pedidos:</b> {orders.filter(o => o.status === 4).length}</div>\n                                <div><b>Total:</b> {priceFormat(orders.filter(o => o.status === 4).reduce((acc, item) => parseFloat(acc) + parseFloat(item.totalAmount), 0))}</div>\n                            </Col>\n                        </Row>\n                        {orders.some(o => o.status !== 4) && (\n                            <Row className=\"mt-5\">\n                                <Col md={12}>\n                                    <h5>Pedidos con estados no validos</h5>\n                                    <table className=\"table table-condensed table-bordered\">\n                                        <thead>\n                                        <tr>\n                                            <th>Pedido</th>\n                                            <th>Estado</th>\n                                            <th>Guia</th>\n                                            <th>Cliente</th>\n                                            <th>Monto</th>\n                                            <th></th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {orders.filter(o => o.status !== 4).map(o => (\n                                            <tr>\n                                                <td>{o.id}</td>\n                                                <td>\n                                                    <StatusField color={ORDER_STATUS[o.status]?.color}>\n                                                        {ORDER_STATUS[o.status]?.name}\n                                                    </StatusField>\n                                                </td>\n                                                <td>{o.orderDelivery?.tracking}</td>\n                                                <td>{o.customer?.name}</td>\n                                                <td className=\"text-end\">{priceFormat(o.totalAmount)}</td>\n                                                <td className=\"text-center\">\n                                                    <a className=\"btn btn-sm text-danger\" onClick={() => removeOrder(o.id)}>\n                                                        <i className=\"uil uil-trash-alt font-size-16\"> </i>\n                                                    </a>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </Col>\n                                <Col>\n                                    <div><b>Cant pedidos:</b> {orders.filter(o => o.status !== 4).length}</div>\n                                    <div><b>Total:</b> {priceFormat(orders.filter(o => o.status !== 4).reduce((acc, item) => parseFloat(acc) + parseFloat(item.totalAmount), 0))}</div>\n                                </Col>\n                            </Row>\n                        )}\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={conciliationLoading} disabled={conciliationLoading || orders.filter(o => o.status === 4).length === 0}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {order, loading, conciliation} = state.Order;\n    return {order, loading, conciliationSuccess: conciliation.success, conciliationError: conciliation.error, conciliationLoading: conciliation.loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onConfirmConciliationRestart: () => dispatch(confirmConciliationRestart()),\n    onConfirmConciliate: (orders) => dispatch(confirmConciliation(orders)),\n    onRestartOrder: () => dispatch(restartOrder()),\n    onGetOrder: (id) => dispatch(getOrder(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderConciliationForm)\n)\n\nOrderConciliationForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderColumn.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Orders/orderEdit.js",["1475","1476","1477","1478","1479"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Container, Row} from \"reactstrap\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {copyToClipboard, formatDate, getImageByQuality, priceFormat, printPartOfPage, threeDots} from \"../../common/utils\";\nimport NoDataIndication from \"../../components/Common/NoDataIndication\";\n\nimport {canceledStatusOrder, getOrder, historicOrder, nextStatusOrder, printOrder, resumeOrder, updateCard, updateOrder} from \"../../store/order/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\nimport OrderDeliveryOptions from \"./create/orderDeliveryOptions\";\nimport {COMMENT_ENTITIES, DELIVERY_METHODS_PAYMENT_TYPES, DELIVERY_TYPES, EVENT_STATUS, GROUPS, ORDER_STATUS, ORDERS_ENUM, PAYMENT_TYPES} from \"../../common/constants\";\nimport {map} from \"lodash\";\nimport Images from \"../../components/Common/Image\";\nimport OrderCustomer from \"./create/orderCustomer\";\nimport OrderProducts from \"./create/orderProducts\";\nimport OrderCar from \"./create/orderCar\";\nimport {getProductsByIds} from \"../../store/product/actions\";\nimport {HtmlTooltip} from \"../../components/Common/HtmlTooltip\";\n\nimport {StatusField} from \"../../components/StatusField\";\nimport * as htmlToImage from 'html-to-image';\nimport Observations from \"../../components/Common/Observations\";\nimport {isMobile} from \"react-device-detect\";\nimport HasRole from \"../../components/HasRole\";\nimport {PERMISSIONS} from \"../../helpers/security_rol\";\n\n// import {toPng, toJpeg, toBlob, toPixelData, toSvg} from 'html-to-image';\n\n\nconst OrderEdit = (props) => {\n\n    const {orderId, onGetOrder, onUpdateCar, onUpdateOrder, onCloseOverlay, onNextStatusOrder, onCanceledStatusOrder, onResumeOrder, onPrintOrder, print, resume, order, car, refresh, showOrderOverlay = false, onGetHistoric, historic} = props;\n    const [orderData, setOrderData] = useState({});\n    const [orderResume, setOrderResume] = useState('');\n    const [showAsTable, setShowAsTable] = useState(false);\n    const [orderPrint, setOrderPrint] = useState('');\n    const [downloadingPhoto, setDownloadingPhoto] = useState(false);\n    const [activeTab, setActiveTab] = useState(2);\n\n    const [openPrintConfirmModal, setOpenPrintConfirmModal] = useState(false);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n    const [openDeliveryModal, setOpenDeliveryModal] = useState(false);\n    const [openProductsModal, setOpenProductsModal] = useState(false);\n    const [allowEdit, setAllowEdit] = useState(false);\n\n    const productSummaryRef = React.createRef();\n\n    useEffect(() => {\n        if (orderId) {\n            onGetOrder(orderId);\n            onGetHistoric(orderId);\n        }\n    }, [orderId, refresh]);\n\n    useEffect(() => {\n        if (order && order.id) {\n            onResumeOrder(order.id);\n            onPrintOrder(order.id);\n\n            const orderDelivery = order.orderDelivery;\n\n            let newCar = {\n                ...car,\n                orderId: order.id,\n                customer: {id: order.customer.id},\n                deliveryOptions: {\n                    origin: order.origen,\n                    type: orderDelivery.deliveryType,\n                    method: order.deliveryMethod.name,\n                    cost: parseFloat(orderDelivery.deliveryCost) || null,\n                    paymentType: order.paymentMode,\n                    pieces: order.piecesForChanges || 0,\n                    tracking: orderDelivery.tracking || '',\n                    deliveryLocality: orderDelivery.deliveryLocality.id || null\n                },\n                products: [],\n                isEdit: true\n            };\n\n            const o = {...order}\n            if (o.orderDetails) {\n                o.orderDetails.forEach(prod => {\n                    const total = prod.quantity * prod.price;\n                    prod.discount = total * (prod.discountPercent / 100);\n                    prod.total = total - prod.discount;\n                });\n                o.orderDetails.forEach(prod => {\n                    newCar.products.push({\n                        id: prod.id,\n                        origin: {...prod.product, id: prod.id, price: prod.price},\n                        color: prod.color,\n                        size: prod.size,\n                        sizeId: prod.productSize?.id || 0,\n                        quantity: prod.quantity,\n                        quantityAvailable: prod.productSize?.quantity || 0,\n                        discountPercentage: prod.discountPercent,\n                        discount: prod.discount,\n                    });\n                })\n            }\n            // onGetProducts(newCar.products.map(prod => prod.origin.id))\n            onUpdateCar(newCar)\n            setOrderData(order);\n\n            //setShowAsTable(order.orderDetails.length > 8);\n            setShowAsTable(isMobile);\n        }\n\n        setAllowEdit(canEdit());\n        //console.log(order);\n    }, [order]);\n\n    useEffect(() => {\n        if (resume) {\n            setOrderResume(resume);\n        }\n    }, [resume]);\n\n    useEffect(() => {\n        if (print) {\n            setOrderPrint(print);\n        }\n    }, [print]);\n\n    const copyResume = () => {\n        copyToClipboard(resume);\n    }\n\n    const printOrder = () => {\n        printPartOfPage(orderPrint);\n        setTimeout(() => setOpenPrintConfirmModal(true), 1000);\n    }\n\n    const toggleModal = () => {\n        setOpenCustomerModal(!openCustomerModal);\n    }\n    const onCloseModal = () => {\n        toggleModal();\n        onUpdateCar({...car, customer: {}});\n    }\n    const onAcceptModal = () => {\n        toggleModal();\n        if (car.customer && car.customer.id) {\n            onUpdateOrder(orderData.id, {customer: car.customer.id});\n        }\n    }\n\n    const toggleDeliveryModal = () => {\n        setOpenDeliveryModal(!openDeliveryModal);\n    }\n    const onCloseDeliveryModal = () => {\n        toggleDeliveryModal();\n    }\n    const onAcceptDeliveryModal = () => {\n        toggleDeliveryModal();\n        if (car.deliveryOptions) {\n            const deliveryData = {\n                deliveryMethod: car.deliveryOptions.method,\n                deliveryCost: car.deliveryOptions.cost,\n                chargeOnDelivery: car.deliveryOptions.type === 3,\n                origen: car.deliveryOptions.origin,\n                tracking: car.deliveryOptions.tracking,\n                deliveryLocality: car.deliveryOptions.deliveryLocality,\n                deliveryType: parseInt(car.deliveryOptions.type),\n                otherMethod: car.deliveryOptions.otherMethod,\n            };\n\n            if (DELIVERY_METHODS_PAYMENT_TYPES.includes(deliveryData.deliveryMethod)) {\n                deliveryData.piecesForChanges = parseInt(car.deliveryOptions.pieces);\n                deliveryData.paymentMode = car.deliveryOptions.paymentType === PAYMENT_TYPES.CASH ? 1 : 2;\n            }\n            onUpdateOrder(orderData.id, deliveryData);\n        }\n    }\n\n    const toggleProductsModal = () => {\n        setOpenProductsModal(!openProductsModal);\n    }\n    const onCloseProductsModal = () => {\n        toggleProductsModal();\n    }\n    const onAcceptProductsModal = () => {\n        toggleProductsModal();\n        if (car.products) {\n            const order = {\n                products: car.products.map(prod => ({\n                    id: prod.origin.id,\n                    productSize: prod.sizeId,\n                    quantity: prod.quantity,\n                    discountPercentage: prod.discountPercentage,\n                }))\n            };\n            onUpdateOrder(orderData.id, order);\n        }\n    }\n\n    const getDeliveryType = (deliveryType) => {\n        let find = DELIVERY_TYPES.find(dt => dt.id === deliveryType);\n        return find ? find.label : '';\n    }\n\n    const getPaymentType = () => {\n        if (!order.paymentMode) return '';\n        return order.paymentMode === 1 ? PAYMENT_TYPES.CASH : PAYMENT_TYPES.TRANSFER;\n    }\n\n    const takePhoto = () => {\n        setDownloadingPhoto(true);\n        htmlToImage.toPng(productSummaryRef.current)\n            .then(function (dataUrl) {\n                setDownloadingPhoto(false);\n                var link = document.createElement('a');\n                link.download = `${order.customer.name.replace(/\\s+/g, '_')}_NRO_${order.id}.png`.toUpperCase();\n                link.href = dataUrl;\n                link.click();\n                onUpdateOrder(orderData.id, {photos: order.photos + 1});\n            })\n            .catch(function (error) {\n                console.error('oops, something went wrong!', error);\n                setDownloadingPhoto(false);\n            })\n    }\n\n    //Permite cancelar la orden\n    const canCancel = () => {\n        const isPrevPayment = order.orderDelivery && ([1,2].includes(order.orderDelivery.deliveryType));\n        const canCancelPreviewPayment = [ORDERS_ENUM.PENDING].includes(parseInt(order.status)) && isPrevPayment;\n        const canCancelChargeOnDelivery = [ORDERS_ENUM.PENDING,ORDERS_ENUM.CONFIRMED,ORDERS_ENUM.PRINTED,ORDERS_ENUM.SENT].includes(parseInt(order.status)) && !isPrevPayment;\n        if(order && (canCancelPreviewPayment || canCancelChargeOnDelivery)){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //Permite confirmar la orden\n    const canConfirm = () => {\n        if(order && order.status === ORDERS_ENUM.PENDING && order.orderDelivery && ![1,2].includes(order.orderDelivery.deliveryType)){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const canEdit = () => {\n        if(order) {\n            const isPrevPayment = order.orderDelivery && ([1, 2].includes(order.orderDelivery.deliveryType));\n            const canEditPreviewPayment = [ORDERS_ENUM.PENDING, ORDERS_ENUM.CONCILIED, ORDERS_ENUM.PRINTED].includes(parseInt(order.status)) && isPrevPayment;\n            const canEditChargeOnDelivery = [ORDERS_ENUM.PENDING, ORDERS_ENUM.CONFIRMED, ORDERS_ENUM.PRINTED].includes(parseInt(order.status)) && !isPrevPayment;\n            if (order && (canEditPreviewPayment || canEditChargeOnDelivery)) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    //Permite imprimir la orden\n    const canPrint = () => {\n        if(order && order.status < ORDERS_ENUM.CONCILIED){\n            return true;\n        } else if(order && order.status === ORDERS_ENUM.CONCILIED && order.orderDelivery && order.orderDelivery.deliveryType === 1){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const isNextPrint = () => {\n        if(order.status === ORDERS_ENUM.CONFIRMED || (order && order.status === ORDERS_ENUM.CONCILIED && order.orderDelivery && order.orderDelivery.deliveryType === 1)){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    const onConfirmPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        onUpdateOrder(orderData.id, {prints: order.prints + 1});\n        onNextStatusOrder(order.id);\n    }\n\n    const getDeliveryAddress = (orderDelivery) => {\n        let address = null;\n        if (orderDelivery.deliveryState) {\n            address = orderDelivery.deliveryState;\n        }\n        if (orderDelivery.deliveryMunicipality) {\n            address = (address ? address + '/' : '') + orderDelivery.deliveryMunicipality;\n        }\n        return address ? address : '';\n    }\n\n    return orderData.id ? (\n        <div className={showOrderOverlay ? 'orderDetail-overlay pt-2' : ''}>\n            <Row className=\"mb-2\">\n                <Col md={12}>\n                    <div className={\"mb-3 float-md-start\"}>\n                        {showOrderOverlay && (\n                            <>\n                                <Tooltip placement=\"bottom\" title=\"Ocultar\" aria-label=\"add\">\n                                    <button className=\"btn btn-outline-default mr-5\" onClick={() => onCloseOverlay()}>\n                                        <i className=\"uil uil-arrow-to-right font-size-16\"> </i>\n                                    </button>\n                                </Tooltip>\n                                <small className=\"badge rounded-pill bg-info font-size-14 mr-5 p-2\">Pedido# {order.id}</small>\n                            </>\n                        )}\n                        <StatusField color={ORDER_STATUS[order.status].color} className={\"font-size-14 mr-5\"}>\n                            {ORDER_STATUS[order.status].name}\n                        </StatusField>\n                        <small className=\"badge rounded-pill bg-soft-info font-size-14 mr-5 p-2\">Operador: {order.user?.name}</small>\n                    </div>\n                    <div className={\"mb-3 float-md-end\"}>\n                        <HasRole role={PERMISSIONS.ORDER_EDIT}>\n                        <div className=\"button-items\">\n                            {canCancel() && (\n                                <Tooltip placement=\"bottom\" title=\"Anular\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-danger waves-effect waves-light\" onClick={() => onCanceledStatusOrder(order.id)}>\n                                        <i className={\"mdi mdi-delete\"}> </i>\n                                    </button>\n                                </Tooltip>\n                            )}\n                            {canConfirm() && (\n                                <Tooltip placement=\"bottom\" title=\"Confirmar\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                        <i className={\"mdi mdi-check\"}> </i>\n                                    </button>\n                                </Tooltip>\n                            )}\n                            {(order && order.status === 3) && (\n                                <Tooltip placement=\"bottom\" title=\"Confirmar envio\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-success waves-effect waves-light\" onClick={() => onNextStatusOrder(order.id)}>\n                                        <i className={\"mdi mdi-check\"}> </i>\n                                    </button>\n                                </Tooltip>\n                            )}\n                            {canPrint() && (\n                                <Tooltip placement=\"bottom\" title=\"Imprimir\" aria-label=\"add\">\n                                    <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => printOrder()}>\n                                        <i className={\"mdi mdi-printer\"}> </i>\n                                        {order.prints && order.prints > 0 && (\n                                            <span className=\"badge bg-danger rounded-pill noti-icon\">{order.prints || 0}</span>\n                                        )}\n                                    </button>\n                                </Tooltip>\n\n                            )}\n                            <Tooltip placement=\"bottom\" title=\"Copiar resumen\" aria-label=\"add\">\n                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light\" onClick={() => copyResume()}>\n                                    <i className={\"mdi mdi-content-copy\"}> </i>\n                                </button>\n                            </Tooltip>\n                            <Tooltip placement=\"bottom\" title=\"Descargar foto\" aria-label=\"add\">\n                                <button type=\"button\" color=\"primary\" className=\"btn-sm btn btn-outline-info waves-effect waves-light \" onClick={() => takePhoto()}>\n                                    <i className={\"mdi mdi-camera\"}> </i> {downloadingPhoto ? 'Descargando...' : ''}\n                                    {order.photos && order.photos > 0 && (\n                                    <span className=\"badge bg-danger rounded-pill noti-icon\">{order.photos || 0}</span>\n                                    )}\n                                </button>\n                            </Tooltip>\n                        </div>\n                        </HasRole>\n                    </div>\n                </Col>\n            </Row>\n            <Row className=\"mb-3\">\n                <Col md={showOrderOverlay ? 12 : 4}>\n                    <Row>\n                        <Col md={showOrderOverlay ? 6 : 12} className=\"mb-3\">\n                            <Card id={'customer-detail'} className=\"p-3\">\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\"><i className=\"uil-users-alt me-2\"> </i> Datos del cliente</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <HasRole role={PERMISSIONS.ORDER_EDIT}>\n                                        {allowEdit && (\n                                        <Tooltip placement=\"bottom\" title=\"Editar cliente\" aria-label=\"add\">\n                                            <button type=\"button\"\n                                                    size=\"small\"\n                                                    className=\"btn btn-sm text-primary\"\n                                                    onClick={() => {\n                                                        toggleModal();\n                                                    }}>\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </button>\n                                        </Tooltip>\n                                        )}\n                                        </HasRole>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Nombre: </label>\n                                        <span className=\"p-1\">{orderData.customer.name}</span>\n                                        {orderData.customer.isMayorist === true && (\n                                            <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                                                <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                                            </Tooltip>\n                                        )}\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Correo: </label>\n                                        <span className=\"p-1\">{orderData.customer.email}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Departamento: </label>\n                                        <span className=\"p-1\">{orderData.customer.state?.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Municipio: </label>\n                                        <span className=\"p-1\">{orderData.customer.municipality?.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Documento: </label>\n                                        <span className=\"p-1\">{orderData.customer.document}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Teléfono Celular: </label>\n                                        <span className=\"p-1\">{orderData.customer.cellphone}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Teléfono Residencial: </label>\n                                        <span className=\"p-1\">{orderData.customer.phone}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Dirección: </label>\n                                        <small className=\"p-1\" style={{wordBreak: 'break-all'}}>{orderData.customer.address}</small>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n                        <Col md={showOrderOverlay ? 6 : 12} className=\"mb-3\">\n                            <Card id={'delivery-options'} className=\"p-3\">\n                                <Row>\n                                    <Col xs={10}>\n                                        <h4 className=\"card-title text-info\"><i className=\"uil uil-truck\"> </i> Datos de envio</h4>\n                                    </Col>\n                                    <Col xs={2} className=\"text-right\">\n                                        <HasRole role={PERMISSIONS.ORDER_EDIT}>\n                                        {allowEdit && (\n                                        <Tooltip placement=\"bottom\" title=\"Editar envio\" aria-label=\"add\">\n                                            <button type=\"button\"\n                                                    size=\"small\"\n                                                    className=\"btn btn-sm text-primary\"\n                                                    onClick={toggleDeliveryModal}>\n                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                            </button>\n                                        </Tooltip>\n                                        )}\n                                        </HasRole>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={12}>\n                                        <label>Origen del pedido: </label>\n                                        <span className=\"p-1\">{orderData.origen}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Tipo de pedido: </label>\n                                        <span className=\"p-1\">{getDeliveryType(orderData?.orderDelivery?.deliveryType)}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Metodo de envio: </label>\n                                        <span className=\"p-1\">{orderData.deliveryMethod.name}</span>\n                                    </Col>\n                                    <Col md={12}>\n                                        <label>Costo del envio: </label>\n                                        <span className=\"p-1\">{orderData?.orderDelivery?.deliveryCost}</span>\n                                    </Col>\n                                    {DELIVERY_METHODS_PAYMENT_TYPES.includes(orderData.deliveryMethod.name) && (\n                                        <>\n                                            <Col md={12}>\n                                                <label>Forma de pago: </label>\n                                                <span className=\"p-1\">{getPaymentType()}</span>\n                                            </Col>\n                                            <Col md={12}>\n                                                <label>Prendas para cambio: </label>\n                                                <span className=\"p-1\">{orderData.piecesForChanges || 0}</span>\n                                            </Col>\n                                        </>\n                                    )}\n                                    <Col md={12}>\n                                        <label>Localidad: </label>\n                                        <span className=\"p-1\">{orderData.orderDelivery?.deliveryLocality?.name}</span>\n                                    </Col>\n                                    {orderData.orderDelivery.tracking && (\n                                        <Col md={12}>\n                                            <label>Número de guía: </label>\n                                            <span className=\"p-1\">{orderData.orderDelivery?.tracking}</span>\n                                        </Col>\n                                    )}\n                                    {orderData.orderDelivery.tracking && (\n                                        <Col md={12}>\n                                            <label>Estado de Envio: </label>\n                                            <span className=\"p-1\">{orderData.orderDelivery?.deliveryStatus}</span>\n                                        </Col>\n                                    )}\n                                </Row>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md={showOrderOverlay ? 12 : 8}>\n                    <div id={\"products-summary\"} ref={productSummaryRef}>\n                        <Row>\n                            <Col md={12} className=\"mb-3\">\n                                <Card id={'products'} className=\"p-3\">\n                                    <Row className=\"mb-2\">\n                                        <Col xs={6}>\n                                            <h4 className=\"card-title text-info\"><i className=\"uil-box me-2\"> </i> Productos</h4>\n                                        </Col>\n                                        <Col xs={6} className=\"text-right\">\n                                            {!isMobile && (\n                                                <>\n                                                    <Tooltip placement=\"bottom\" title=\"Mostar como tabla\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    setShowAsTable(true);\n                                                                }}>\n                                                            <i className=\"fa fa-list font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                    <Tooltip placement=\"bottom\" title=\"Mostrar como tarjetas\" aria-label=\"add\">\n                                                        <button type=\"button\"\n                                                                size=\"small\"\n                                                                className=\"btn btn-sm text-primary\"\n                                                                onClick={() => {\n                                                                    setShowAsTable(false);\n                                                                }}>\n                                                            <i className=\"fa fa-th font-size-18\"> </i>\n                                                        </button>\n                                                    </Tooltip>\n                                                </>\n                                            )}\n                                            <HasRole role={PERMISSIONS.ORDER_EDIT}>\n                                            {allowEdit &&\n                                            <Tooltip placement=\"bottom\" title=\"Editar products\" aria-label=\"add\">\n                                                <button type=\"button\"\n                                                        size=\"small\"\n                                                        className=\"btn btn-sm text-primary\"\n                                                        onClick={() => {\n                                                            toggleProductsModal();\n                                                        }}>\n                                                    <i className=\"uil uil-pen font-size-18\"> </i>\n                                                </button>\n                                            </Tooltip>\n                                            }\n                                            </HasRole>\n                                        </Col>\n                                    </Row>\n                                    {!showAsTable && (\n                                        <Row>\n                                            {map(orderData.orderDetails, (product, k) => (\n                                                <div key={k} className=\"col-md-6 mb-2\">\n                                                    <div className=\"prod-box\">\n                                                        <Row>\n                                                            <Col xs={2} className=\"text-center\" style={{padding: '2px 0 2px 8px'}}>\n                                                                <div className={`border-1`} id={`product-${k}`} role=\"tabpanel\">\n                                                                    <Images src={`${getImageByQuality(product.product.productImage[0], 'medium')}`}\n                                                                            alt={\"\"}\n                                                                            height={80}\n                                                                            className=\"img-fluid d-block\"\n                                                                            styles={{height: '83px', width: '53px', borderRadius: '8px', 'margin-left': '4px'}}\n                                                                    />\n                                                                </div>\n                                                            </Col>\n                                                            <Col xs={5} className=\"p-1\">\n                                                                <Row>\n                                                                    <Col md={12}>\n                                                                        <HtmlTooltip\n                                                                            placement={'right-end'}\n                                                                            title={\n                                                                                <React.Fragment>\n                                                                                    <Images src={`${getImageByQuality(product.product.productImage.length > 0 ? product.product.productImage[0] : {}, 'medium')}`}\n                                                                                            alt={\"\"}\n                                                                                            height={120}\n                                                                                            className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                                                </React.Fragment>\n                                                                            }>\n                                                                            <b className=\"text-info\">{product.product.reference}</b>\n                                                                        </HtmlTooltip>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <Tooltip placement=\"bottom\" title={product.color} aria-label=\"add\">\n                                                                            <small> {threeDots(product.color, 22)}</small>\n                                                                        </Tooltip>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Cantidad:</span> {product.quantity}</small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small className=\"badge rounded-pill bg-soft-info\">Talla: {product.size}</small>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                            <Col xs={5} className=\"p-1\">\n                                                                <Row>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Precio:</span> {priceFormat(product.price)}</small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <small><span className=\"font-weight-600\">Desc.:</span> <span\n                                                                            className=\"text-danger\">-{priceFormat(product.discount)}</span></small>\n                                                                    </Col>\n                                                                    <Col md={12}>\n                                                                        <div className=\"font-weight-600 font-size-12\"><b>Total: {priceFormat(product.total)}</b></div>\n                                                                    </Col>\n                                                                </Row>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </Row>\n                                    )}\n                                    {showAsTable && (\n                                        <Row>\n                                            <Col md={12}>\n                                                <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                                                    <thead>\n                                                    <tr>\n                                                        <th className=\"text-center\">Código</th>\n                                                        <th className=\"text-center\">Color</th>\n                                                        <th className=\"text-center\">Talla</th>\n                                                        <th className=\"text-center\">Cantidad</th>\n                                                        <th className=\"text-center\">Precio Unit.</th>\n                                                        <th className=\"text-center\">% Desc.</th>\n                                                        <th className=\"text-center\">Total Desc.</th>\n                                                        <th className=\"text-center\">SubTotal</th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                    {map(orderData.orderDetails, (product, key) => (\n                                                        <tr key={key}>\n                                                            <td style={{width: '10%'}}>\n                                                                <HtmlTooltip\n                                                                    title={\n                                                                        <React.Fragment>\n                                                                            <Images src={`${getImageByQuality(product.product.productImage.length > 0 ? product.product.productImage[0] : {}, 'medium')}`}\n                                                                                    alt={product.product.reference}\n                                                                                    height={100}\n                                                                                    className=\"img-fluid mx-auto d-block tab-img rounded\"/>\n                                                                        </React.Fragment>\n                                                                    }>\n                                                                    <div className=\"text-info\">{product.product.reference}</div>\n                                                                </HtmlTooltip>\n                                                            </td>\n                                                            <td style={{width: '25%'}} className=\"text-start\">{product.color}</td>\n                                                            <td style={{width: '15%'}} className=\"text-center\">{product.size}</td>\n                                                            <td style={{width: '10%'}} className=\"text-center\">{product.quantity}</td>\n                                                            <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.price)}</td>\n                                                            <td style={{width: '10%'}} className=\"text-center\">{product.discountPercentage || 0}%</td>\n                                                            <td style={{width: '10%'}} className=\"text-end\">{priceFormat(product.discount)}</td>\n                                                            <td style={{width: '15%'}} className=\"text-end\">{priceFormat(product.total)}</td>\n                                                        </tr>\n                                                    ))}\n                                                    </tbody>\n                                                </table>\n                                            </Col>\n                                        </Row>\n                                    )}\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12}>\n                                <Card id={'summary-detail'} className=\"p-3\">\n                                    <Row>\n                                        <Row>\n                                            <Col md={10}>\n                                            <h4 className=\"card-title text-info\"><i className=\"uil uil-bill\"> </i> Totales</h4>\n                                            </Col>\n                                            <Col md={2}>\n                                                <div className=\"card-title text-right\"><span><Tooltip placement=\"bottom\" title=\"Peso\" aria-label=\"add\">\n                                                    <i className=\"fa fa-weight text-info\"></i>\n                                                </Tooltip></span> : {priceFormat(orderData.totalWeight)}g</div>\n                                            </Col>\n                                        </Row>\n                                        <Col md={12}>\n                                            <div className=\"table-responsive\">\n                                                <table className=\"table table-sm mb-0\">\n                                                    <tbody>\n                                                    <tr>\n                                                        <td>Total sin descuento:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.subTotalAmount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Descuento:</td>\n                                                        <td className=\"text-end text-danger\">- {priceFormat(orderData.totalDiscount)}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Total con descuento:</td>\n                                                        <td className=\"text-end\">{priceFormat(parseFloat(orderData.subTotalAmount) - parseFloat(orderData.totalDiscount))}</td>\n                                                    </tr>\n                                                    <tr>\n                                                        <td>Envio:</td>\n                                                        <td className=\"text-end\">{priceFormat(orderData.orderDelivery.deliveryCost)}</td>\n                                                    </tr>\n                                                    <tr className=\"bg-light\">\n                                                        <th className=\"font-size-16\">Total :</th>\n                                                        <td className=\"text-end\"><span className=\"fw-bold font-size-16\">{priceFormat(orderData.totalAmount)}</span></td>\n                                                    </tr>\n                                                    </tbody>\n                                                </table>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </div>\n                </Col>\n            </Row>\n\n            <Row className=\"mb-3\">\n                <Col md={12}>\n                    <Card id={'order-tabs'} className=\"p-3\">\n                        <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab1\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(1)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Historial</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(2)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Observaciones del pedido</span>\n                                </a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className={`nav-link ${activeTab === 3 ? 'active' : ''}`} data-bs-toggle=\"tab\" href=\"#tab2\" role=\"tab\" aria-selected=\"false\" onClick={() => setActiveTab(3)}>\n                                    <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                    <span className=\"d-none d-sm-block\">Observaciones del cliente</span>\n                                </a>\n                            </li>\n                        </ul>\n                        <HasRole role={PERMISSIONS.COMMENT_LIST}>\n                        <div className=\"tab-content p-3 text-muted\">\n                            <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} id=\"tab1\" role=\"tabpanel\">\n                                <p className=\"mb-0\">\n                                    <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap\">\n                                        <thead>\n                                        <tr>\n                                            <th className=\"text-center\">Fecha</th>\n                                            <th className=\"text-center\">Usuario</th>\n                                            <th className=\"text-center\">Estado</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {(historic) ?\n                                            historic.map(item => <tr>\n                                                <td>\n                                                    {formatDate(item.createdAt)}\n                                                </td>\n                                                <td>\n                                                    {item.user.name}\n                                                </td>\n                                                <td>\n                                                    <StatusField color={EVENT_STATUS[item.status].color} className={\"font-size-14 mr-5\"}>\n                                                        {EVENT_STATUS[item.status].name}\n                                                    </StatusField>\n                                                </td>\n                                            </tr>)\n                                        : (\n                                            <tr>\n                                                <td colSpan={3}>\n                                                    No se encontraron datos.\n                                                </td>\n                                            </tr>\n                                        )}\n                                        </tbody>\n                                    </table>\n                                </p>\n                            </div>\n                            <div className={`tab-pane ${activeTab === 2 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                <Observations\n                                    entitySuggested={GROUPS.ORDER_OBSERVATIONS}\n                                    entity={COMMENT_ENTITIES.ORDER}\n                                    entityId={orderData.id}/>\n                            </div>\n                            <div className={`tab-pane ${activeTab === 3 ? 'active' : ''}`} id=\"tab2\" role=\"tabpanel\">\n                                <Observations\n                                    entitySuggested={GROUPS.CUSTOMER_OBSERVATIONS}\n                                    entity={COMMENT_ENTITIES.CUSTOMER}\n                                    entityId={orderData.customer?.id}/>\n                            </div>\n                        </div>\n                        </HasRole>\n                        </Card>\n                </Col>\n            </Row>\n\n            <CustomModal title={\"Confirmar\"} showFooter={false} isOpen={isNextPrint() && openPrintConfirmModal} onClose={() => setOpenPrintConfirmModal(false)}>\n                <Row>\n                    <Col md={12}>\n                        ¿Logró imprimir el pedido?\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => setOpenPrintConfirmModal(false)}>NO</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onConfirmPrintOrder}>SI</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n\n            <CustomModal title={\"Modificar cliente\"} size=\"lg\" showFooter={false} isOpen={openCustomerModal} onClose={onCloseModal}>\n                <OrderCustomer showAsModal={true}\n                               onCloseModal={onCloseModal}\n                               onAcceptModal={onAcceptModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar opciones de envio\"} size=\"lg\" showFooter={false} isOpen={openDeliveryModal} onClose={onCloseDeliveryModal}>\n                <OrderDeliveryOptions customer={orderData.customer}\n                                      showAsModal={true}\n                                      onCloseModal={onCloseDeliveryModal}\n                                      onAcceptModal={onAcceptDeliveryModal}\n                />\n            </CustomModal>\n\n            <CustomModal title={\"Modificar productos\"} size=\"lg\" showFooter={false} isOpen={openProductsModal} onClose={onCloseProductsModal}>\n                <Row>\n                    <Col md={12}>\n                        <OrderProducts/>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12}>\n                        <OrderCar/>\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={onCloseProductsModal}>Cancelar</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onAcceptProductsModal}>Guardar</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n\n        </div>\n    ) : <NoDataIndication/>;\n}\n\nconst mapStateToProps = state => {\n    const {products} = state.Product;\n    const {error, car, order, loading, custom, refresh, historic} = state.Order;\n    const print = custom.data && custom.data.print ? custom.data.print : null;\n    const resume = custom.data && custom.data.resume ? custom.data.resume : null;\n    return {error, car, order, products, print, resume, loading, refresh, historic}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onUpdateOrder: (id, payload) => dispatch(updateOrder(id, payload)),\n    onUpdateCar: (data) => dispatch(updateCard(data)),\n    onGetProducts: (ids = []) => dispatch(getProductsByIds(ids)),\n    onNextStatusOrder: (id = []) => dispatch(nextStatusOrder({order: id})),\n    onCanceledStatusOrder: (id = []) => dispatch(canceledStatusOrder({order: id})),\n    onResumeOrder: (id = []) => dispatch(resumeOrder(id)),\n    onPrintOrder: (id = []) => dispatch(printOrder(id)),\n    onGetHistoric: (id) => dispatch(historicOrder(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderEdit)\n)\n\nOrderEdit.propTypes = {\n    orderId: PropTypes.number.isRequired,\n    showOrderOverlay: PropTypes.bool,\n    onCloseOverlay: PropTypes.func,\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/productImages/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/fakebackend_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/helpers/firebase_helper.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actions.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductSize.js",["1480","1481","1482","1483","1484","1485","1486","1487","1488"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from 'prop-types'\nimport {Col, Row} from \"reactstrap\"\nimport {FieldText} from \"../../components/Fields\";\nimport {map} from \"lodash\";\nimport {Button} from \"@material-ui/core\";\nimport {updateProductSizeList} from \"../../store/productSize/actions\";\nimport {connect} from \"react-redux\";\nimport Conditionals from \"../../common/conditionals\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\n\nconst ProductSize = props => {\n    const {product, template, onGetProductSizes, productSizes, refresh} = props\n    const [productSizesList, setProductSizesList] = useState([]);\n    const [selectValues, setSelectValues] = useState([]);\n    const [sizeTotals, setSizeTotals] = useState({});\n    const form = React.createRef();\n\n    useEffect(() => {\n        if (product.productSize.length) {\n            setProductSizesList(parseList(product.productSize));\n        } else {\n            setProductSizesList([]);\n        }\n\n        fillSelectValues();\n    }, [product])\n\n    useEffect(() => {\n        calculateTotals();\n    }, [productSizesList])\n\n    const getModel = () => {\n        const model = {color: '', sizes: {}};\n        if (template && template.sizes) {\n            template.sizes.forEach(size => model.sizes[size] = 0)\n        }\n        return model;\n    }\n    const fillSelectValues = () => {\n        if (selectValues.length === 0) {\n            const valueList = [];\n            for (let i = 0; i <= 1000; i++) {\n                valueList.push({label: i, value: i});\n            }\n            setSelectValues(valueList);\n        }\n    }\n    const addColor = () => {\n        const list = [...productSizesList, getModel()];\n        setProductSizesList(list);\n        calculateTotals();\n    }\n    const removeColor = (index) => {\n        let list = [...productSizesList];\n        list.splice(index);\n        setProductSizesList(list);\n        calculateTotals();\n    }\n    const parseDefaultValue = (model, sizeName) => {\n        if (!model || !model.sizes) return 0;\n        return model.sizes[sizeName] ? model.sizes[sizeName] : 0;\n    }\n    const parseValues = () => {\n        //flat data\n        const dataList = [];\n        productSizesList.map((ps) => {\n            Object.keys(ps.sizes).forEach(sizeName => {\n                let qty = parseFloat(ps.sizes[sizeName]);\n\n                if (qty > 0) {\n                    dataList.push({name: sizeName, qty: qty, color: ps.color});\n                }\n            });\n        });\n        return dataList;\n    }\n    const parseList = (list) => {\n        let map = {};\n        list.filter(ps => null !== ps).map(ps => {\n            const key = ps.color.replace(/\\s/g, '');\n            let mapElement = map[key];\n            if (!mapElement) {\n                mapElement = {color: ps.color, sizes: {}};\n                template.sizes.forEach(size => mapElement.sizes[size] = 0)\n            }\n            mapElement.sizes[ps.name] = ps.quantity;\n            map[key] = mapElement;\n        });\n        return Object.keys(map).map((m) => map[m]);\n    }\n    const handleValidSubmit = (event, values) => {\n        const list = parseValues(values);\n        if (list && list.length > 0) {\n            props.onUpdateProductSizeList(product.id, list, props.history);\n        }\n    }\n    const handleChangeColors = (index, color) => {\n        if (!productSizesList.some(l => l.color === color)) {\n            const list = [...productSizesList];\n            list[index].color = color;\n            setProductSizesList(list);\n        }\n        validateColor(\"color_\" + index);\n    }\n    const handleChangeSizes = (index, sizeName, sizeValue) => {\n        const list = [...productSizesList];\n        list[index].sizes[sizeName] = sizeValue;\n        setProductSizesList(list);\n        calculateTotals();\n    }\n\n    const validateColorDuplicate = (color) => {\n        //TODO validar\n        if (productSizesList.some(l => l.color === color)) {\n            return 'Color repetido.';\n        }\n        return true;\n    }\n    const validateColor = (inputName) => {\n        form.current.validateInput(inputName);\n    }\n    const calculateTotals = () => {\n        const totals = {total: 0};\n        productSizesList.forEach((model) => {\n            template.sizes.forEach((size) => {\n                if (!totals[size]) totals[size] = 0;\n                totals[size] += parseInt(model.sizes[size]);\n                totals.total += parseInt(model.sizes[size]);\n            })\n        })\n        setSizeTotals(totals);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm ref={form} className=\"needs-validation\" autoComplete=\"off\"\n                    onValidSubmit={(e, v) => {\n                        handleValidSubmit(e, v)\n                    }}>\n                <Row>\n                    <Col md=\"12\">\n                        <div className={\"table-responsive\"}>\n                            <table className=\"table table-card-list table-condensed\">\n                                <thead>\n                                <tr>\n                                    <th>Color</th>\n                                    {map(template?.sizes, (size, key) => (\n                                        <th key={'th_' + key} className=\"text-center\">\n                                            {size}\n                                            {!!(product.sizeDescription) && (\n                                                <div><small className=\"text-muted\">[{product.sizeDescription}]</small></div>\n                                            )}\n                                        </th>\n                                    ))}\n                                    <th>Borrar</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {map(productSizesList, (model, k1) => (\n                                    <tr key={'tr_' + k1}>\n                                        <td>\n                                            <FieldText\n                                                id={\"field_color_\" + k1}\n                                                name={\"color_\" + k1}\n                                                placeholder={'Ingrese el color'}\n                                                minLength={3}\n                                                maxLength={20}\n                                                value={model.color}\n                                                defaultValue={model.color}\n                                                onBlur={(e) => handleChangeColors(k1, e.target.value)}\n                                                validate={{myValidation: validateColorDuplicate}}\n                                                required/>\n                                        </td>\n                                        {map(template.sizes, (size, k2) => (\n                                            <td key={'td_' + k1 + '_' + k2} style={{minWidth: '30px'}} className=\"text-center\">\n                                                <select\n                                                    id={\"select_\" + k1 + '_' + k2}\n                                                    name={\"select_\" + k1 + '_' + k2}\n                                                    value={model.sizes[size]}\n                                                    // defaultValue={parseDefaultValue(model, size)}\n                                                    onChange={(e) => handleChangeSizes(k1, size, e.target.value, model)}\n                                                    className=\"form-control\"\n                                                >\n                                                    {map(selectValues, (o, k3) => (\n                                                        <option key={k3} value={o.value}>{o.label}</option>\n                                                    ))}\n                                                </select>\n                                            </td>\n                                        ))}\n                                        <th>\n                                            <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => removeColor(k1)}>\n                                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                            </button>\n                                        </th>\n                                    </tr>\n                                ))}\n                                <tr>\n                                    <th>Totales</th>\n                                    {map(template.sizes, (size, k) => (\n                                        <th key={'td_' + k} style={{minWidth: '30px'}} className=\"text-center\">\n                                            {sizeTotals[size]}\n                                        </th>\n                                    ))}\n                                    <th>{sizeTotals.total}</th>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md=\"12\">\n                        <div className=\"text-center m-3\">\n                            <Button color=\"default\" type=\"button\" onClick={() => addColor()}>\n                                Agregar color\n                            </Button>\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <ButtonSubmit loading={props.loading}/>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nProductSize.propTypes = {\n    product: PropTypes.object,\n    productSizes: PropTypes.array,\n    onGetProductSizes: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {productSizes, loading, meta, refresh} = state.ProductSize\n    return {productSizes, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductSizes: (productId) => {\n        const conditions = new Conditionals.Condition;\n        if (productId) {\n            conditions.add('product', productId, Conditionals.OPERATORS.EQUAL);\n        }\n        //dispatch(getProductSizes(conditions.all(), null, 0))\n    },\n    onUpdateProductSizeList: (id, data, history) => dispatch(updateProductSizeList(id, data, history))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ProductSize)\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/customer_status.js",["1489","1490"],"import React from \"react\";\n\nexport const CUSTOMER_STATUS = {\n    ACTIVE: true,\n    INACTIVE: false\n};\n\nexport const ConverterCustomerStatus = (status) => {\n    switch(status) {\n        case CUSTOMER_STATUS.ACTIVE:\n            return 'Si';\n            break;\n        default:\n            return 'No';\n    }\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/OrderCardList.js",["1491","1492","1493","1494","1495","1496","1497","1498","1499"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Row} from \"reactstrap\"\nimport {Link, withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {map} from \"lodash\";\nimport {getOrder, getOrders} from \"../../store/order/actions\";\nimport Conditionals from \"../../common/conditionals\";\nimport {formatDate, priceFormat} from \"../../common/utils\";\nimport {Tooltip} from \"@material-ui/core\";\nimport {DELIVERY_TYPES, ORDER_STATUS} from \"../../common/constants\";\nimport {StatusField} from \"../../components/StatusField\";\n\nconst OrderCardList = (props) => {\n\n    const {onGetOrder, onGetOrders, order, orders, productId, customerId} = props;\n    const [ordersList, setOrdersList] = useState([]);\n    const [openCustomerModal, setOpenCustomerModal] = useState(false);\n\n    useEffect(() => {\n        if (customerId) {\n            const conditions = new Conditionals.Condition;\n            conditions.add(\"customer\", customerId, Conditionals.OPERATORS.EQUAL);\n            onGetOrders(conditions);\n        }\n    }, [customerId]);\n\n    useEffect(() => {\n        if (orders && orders.length > 0) {\n            setOrdersList(orders);\n        }\n        //console.log('orders', orders)\n    }, [orders]);\n\n    const getDeliveryType = (delivery) => {\n        const deliveryType = delivery ? delivery.deliveryType : '';\n        let find = DELIVERY_TYPES.find(dt => dt.id === deliveryType);\n        return find ? find.label : '';\n    }\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col md={12}>\n                    <h4 className=\"card-title text-info\"><i className=\"uil-shopping-cart-alt me-2\"> </i> Pedidos recientes</h4>\n                </Col>\n                {ordersList.sort((a,b) => a.id < b.id).map((order, k) => (\n                    <div key={k} className=\"order-box\">\n                        <Row>\n                            <Col md={6} className=\"\">\n                                <div>\n                                    <Link to={`/order/${order.id}`} className=\"text-primary\">\n                                        <small className=\"font-weight-600 text-info\">Pedido #: {order.id}</small>\n                                    </Link>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Origen:</span> {order.origen}</small>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Tipo de entrega:</span> {getDeliveryType(order.orderDelivery)}</small>\n                                    <br/>\n                                    <small><span className=\"font-weight-600\">Método de entrega:</span> {order.deliveryMethod.name}</small>\n                                </div>\n                            </Col>\n                            <Col md={6} className=\"text-right\">\n                                <div>\n                                    <div>\n                                        <span className=\"m-2 mb-4\">\n                                            <Tooltip placement=\"bottom\" title=\"Estado\" aria-label=\"add\">\n                                                <StatusField color={ORDER_STATUS[order.status].color}>{ORDER_STATUS[order.status].name}</StatusField>\n                                            </Tooltip>\n                                        </span>\n                                        <span className=\"m-2 mb-4\">\n                                            <Tooltip placement=\"bottom\" title=\"Fecha creación\" aria-label=\"add\">\n                                                <small className=\"badge rounded-pill bg-light p-2\">{formatDate(order.createdAt)}</small>\n                                            </Tooltip>\n                                        </span>\n                                    </div>\n                                    <div className=\"m-1\">\n                                        <Tooltip placement=\"bottom\" title=\"Cantidad de prendas\" aria-label=\"add\">\n                                             <small className=\"badge rounded-pill bg-light p-2\"><span className=\"font-weight-600\">Cant. prendas :</span> {order.quantity}</small>\n                                        </Tooltip>\n                                    </div>\n                                    <div>\n                                        <small className=\"m-2 fw-bold font-size-16\">{priceFormat(order.totalAmount)}</small>\n                                    </div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </div>\n                ))}\n            </Row>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {products, product} = state.Product\n    const {error, car, order, orders, loading} = state.Order;\n    return {error, car, order, orders, products, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetOrder: (id) => dispatch(getOrder(id)),\n    onGetOrders: (conditions) => dispatch(getOrders(conditions.all(), 5, 0)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OrderCardList)\n)\n\nOrderCardList.propTypes = {\n    customerId: PropTypes.number,\n    error: PropTypes.any,\n    history: PropTypes.object\n}","/Users/ramon/Repositories/lucy-moie/src/pages/ProductEdit/ProductsPending.js",["1500"],"import React, {useEffect} from \"react\";\nimport {Col, Row} from \"reactstrap\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {Card} from \"@material-ui/core\";\nimport {map} from \"lodash\";\nimport {pendingProducts} from \"../../store/product/actions\";\nimport {StatusField} from \"../../components/StatusField\";\nimport {ORDER_STATUS} from \"../../common/constants\";\n\nconst ProductsPendingList = ({onGetProductsPending, product, pendingProducts}) => {\n\n    useEffect(() => {\n        if(product && product.id) {\n            onGetProductsPending(product.id);\n        }\n    }, [product]);\n\n    return (\n        <React.Fragment>\n            <Card className=\"p-3\">\n                <Row>\n                    <Col md={12}>\n                        <h4 className=\"card-title text-info\">Ordenes pendientes</h4>\n                    </Col>\n                </Row>\n                <Row>\n                   <Col md={12}>\n                       <table className=\"table table-sm table-striped table-bordered table-centered table-nowrap font-size-11\">\n                           <thead>\n                           <tr>\n                               <th style={{width: '25%'}} className=\"text-center\">Pedido #</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Color</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Talla</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Cantidad</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Cliente</th>\n                               <th style={{width: '25%'}} className=\"text-center\">Estado del pedido</th>\n                           </tr>\n                           </thead>\n                           <tbody>\n                           {map(pendingProducts, (prod, key) => (\n                               <tr key={key}>\n                                   <td className=\"text-center\">\n                                       <Link to={`/order/${prod.order.id}`} className=\"text-primary\">\n                                           <small className=\"font-weight-600 text-info\">{prod.order.id}</small>\n                                       </Link>\n                                   </td>\n                                   <td className=\"text-center\">{prod.color}</td>\n                                   <td className=\"text-center\">{prod.size}</td>\n                                   <td className=\"text-center\">{prod.quantity}</td>\n                                   <td className=\"text-center\">{prod.customer.name}</td>\n                                   <td className=\"text-center\">\n                                       <StatusField color={ORDER_STATUS[prod.order.status].color} className={\"font-size-16\"}>\n                                           {ORDER_STATUS[prod.order.status].name}\n                                       </StatusField>\n                                   </td>\n                               </tr>\n                           ))}\n                           {pendingProducts.length === 0 && (\n                               <tr>\n                                   <td colSpan={8} className=\"text-center text-muted\">No hay ordenes pendientes</td>\n                               </tr>\n                           )}\n                           </tbody>\n                       </table>\n                   </Col>\n                </Row>\n            </Card>\n        </React.Fragment>\n    ) ;\n}\n\nconst mapStateToProps = state => {\n    const {error, product, custom, loading} = state.Product\n    const pendingProducts = custom.data && custom.data.pendingProducts ? custom.data.pendingProducts:[];\n    return {error, product, pendingProducts: pendingProducts, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGetProductsPending: (id) => dispatch(pendingProducts(id)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(ProductsPendingList)\n)\n\nProductsPendingList.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object,\n    product: PropTypes.object,\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-users.js",["1501","1502","1503","1504","1505","1506","1507","1508"],"import React, {useEffect, useState} from \"react\";\nimport {Card, CardBody, Table} from \"reactstrap\"\n\n//Simple bar\nimport SimpleBar from \"simplebar-react\"\n\n//Import Image\nimport avatar4 from \"../../assets/images/users/avatar-4.jpg\"\nimport avatar5 from \"../../assets/images/users/avatar-5.jpg\"\nimport avatar6 from \"../../assets/images/users/avatar-6.jpg\"\nimport avatar7 from \"../../assets/images/users/avatar-7.jpg\"\nimport avatar8 from \"../../assets/images/users/avatar-8.jpg\"\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {connect} from \"react-redux\";\n\nconst TopUsers = (props) => {\n    const {users, meta, onGetUsers, loading, refresh} = props;\n    const [usersList, setCategoriesList] = useState([])\n\n    useEffect(() => {\n        onGetUsers()\n    }, [onGetUsers])\n\n    useEffect(() => {\n        setCategoriesList(users)\n    }, [users])\n\n    return (\n        <React.Fragment>\n            <Card>\n                <CardBody>\n                    <div className=\"float-end\">\n                    </div>\n                    <h4 className=\"card-title mb-4\">Usuarios</h4>\n                    <SimpleBar style={{maxHeight: \"336px\"}}>\n                        <div className=\"table-responsive\">\n                            <Table className=\"table-borderless table-centered table-nowrap\">\n                                <tbody>\n                                {usersList.map((user, k) => (\n                                    <tr key={k}>\n                                        <td style={{width: \"20px\"}}>\n                                            <i className=\"mdi mdi-account-circle m-0 font-size-20 text-primary\"></i>\n                                        </td>\n                                        <td>\n                                            <h6 className=\"font-size-15 mb-1 fw-normal\">{`${user.name} ${user.lastname}`}</h6>\n                                            <p className=\"text-muted font-size-13 mb-0\">\n                                                <i className=\"mdi mdi-mail\"> </i> {user.email}\n                                            </p>\n                                        </td>\n                                        <td className=\"text-muted fw-semibold text-end\">\n                                            {user.username}\n                                        </td>\n                                    </tr>\n                                ))}\n                                </tbody>\n                            </Table>\n                        </div>\n                    </SimpleBar>\n                </CardBody>\n            </Card>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users, loading, meta, refresh} = state.User\n    return {users, loading, meta, refresh}\n}\nconst mapDispatchToProps = dispatch => ({\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, 6, page)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TopUsers)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/latest-transaction.js",["1509","1510"],"import React from \"react\"\nimport { Card, CardBody, Table, CardTitle, Label ,Input ,Row, Col, Button} from \"reactstrap\"\nimport { Link } from \"react-router-dom\"\n\nconst LatestTransaction = () => {\n    return (\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <CardBody>\n                        <CardTitle className=\"h4 mb-4\">Pedidos Retrazados</CardTitle>\n                        <div className=\"table-responsive\">\n                            <Table className=\"table-centered table-nowrap mb-0\">\n                                <thead className=\"table-light\">\n                                <tr>\n                                    <th>ID</th>\n                                    <th>Cliente</th>\n                                    <th>Fecha</th>\n                                    <th>Monto</th>\n                                    <th>Estado</th>\n                                    <th>Metodo de Envio</th>\n                                    <th></th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2540</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $400\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2541</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $380\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                       Interrapidismo\n                                    </td>\n                                    <td>\n\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2542</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $384\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2543</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $412\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2544</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $404\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-danger font-size-12\">Reservado</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td><Link to=\"#\" className=\"text-body fw-bold\">#MB2545</Link> </td>\n                                    <td>Ramon Olmos</td>\n                                    <td>\n                                        16 Mar, 2021\n                                    </td>\n                                    <td>\n                                        $392\n                                    </td>\n                                    <td>\n                                        <span className=\"badge rounded-pill bg-soft-warning font-size-12\">Impresa</span>\n                                    </td>\n                                    <td>\n                                        Interrapidismo\n                                    </td>\n                                    <td>\n                                        <Button type=\"button\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </Table>\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default LatestTransaction\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/mini-widget.js",["1511","1512","1513","1514"],"import PropTypes from 'prop-types'\nimport React from \"react\"\nimport { Col, Card, CardBody } from \"reactstrap\"\nimport CountUp from 'react-countup';\nimport ReactApexChart from \"react-apexcharts\"\nimport WidgetCard from \"../../components/Common/WidgetCard\";\n\nconst MiniWidget = props => {\n    return (\n        <React.Fragment>\n            {props.reports.map((report, key) => (\n                <Col md={6} xl={3} key={key}>\n                    <WidgetCard report={report}/>\n                </Col>\n            ))}\n        </React.Fragment>\n    )\n}\n\nexport default MiniWidget\n\nMiniWidget.propTypes = {\n    reports: PropTypes.array\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Dashboard/top-vendors.js",[],"/Users/ramon/Repositories/lucy-moie/src/config.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/VerticalLayout/SidebarContent.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customers-list.js",["1515","1516","1517","1518","1519","1520"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\n\nimport customerColumn from \"./customerColumn\"\nimport {Link} from \"react-router-dom\"\nimport {deleteCustomer, getCustomerRegistereds, getCustomers, resetCustomer} from \"../../../store/customer/actions\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport {countCustomersByStatus, countMayoristas, statsCustomerRegistered, statsCustomerRegisteredToday} from \"../../../helpers/service\";\nimport StatsStatusCard from \"../../../components/Common/StatsStatusCard\";\nimport StatsRegisteredCard from \"../../../components/Common/StatsRegisteredCard\";\nimport CountUp from \"react-countup\";\nimport ReactApexChart from \"react-apexcharts\";\nimport {resetProduct} from \"../../../store/product/actions\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasRole from \"../../../components/HasRole\";\n\nconst CustomersList = props => {\n    const {customers, meta, onGetCustomers, onResetCustomers, onDeleteCustomer, onGetCustomerRegistereds, refresh, countCustomersByStatus, registereds} = props;\n    const [customerList, setCustomerList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n    const [countMayorista, setCountMayorista] = useState(0);\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        totalSize: meta?.totalRegisters,\n        custom: true,\n    }\n\n    useEffect(() => {\n        onGetCustomers();\n        onGetCustomerRegistereds();\n        countMayoristas().then(data => {\n            if(data[1]){\n                setCountMayorista(data[1])\n            }\n        })\n    }, [refresh])\n\n    useEffect(() => {\n        onResetCustomers();\n        onGetCustomerRegistereds();\n        onGetCustomers();\n    }, [onGetCustomers])\n\n    useEffect(() => {\n        setCustomerList(customers)\n    }, [customers])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetCustomers(conditional, DEFAULT_PAGE_LIMIT, (page - 1) * DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetCustomers(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        onDeleteCustomer(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar Cliente?',\n            description: 'Usted está eliminado este cliente, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n\n    const columns = customerColumn(onDelete);\n\n    return (\n        <>\n            <Row className=\"text-center\">\n                <Col md={4}>\n                    <StatsStatusCard title=\"Clientes\" getData={countCustomersByStatus}/>\n                </Col>\n                <Col md={4}>\n                    <StatsRegisteredCard title=\"Clientes Registrados esta semana\" getData={registereds.lastWeek} getDataToday={registereds.today}/>\n                </Col>\n                <Col md={4}>\n                    <Card>\n                        <CardBody>\n                            <div className=\"float-end mt-2\">\n                                <Tooltip placement=\"bottom\" title=\"Clientes mayoristas\" aria-label=\"add\">\n                                    <i className=\"mdi mdi-crown font-size-24 mr-1 text-warning p-3\"> </i>\n                                </Tooltip>\n                            </div>\n                           <div>\n                               <h4 className=\"mb-1 mt-2\">\n                                   <CountUp end={countMayorista} separator=\",\" decimals={0}/>\n                               </h4>\n                               <p className=\"text-muted mb-0\">{\"Clientes mayoristas\"}</p>\n                           </div>\n                            <p className=\"text-muted mb-0 mt-3\">\n                            </p>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider\n                                pagination={paginationFactory(pageOptions)}\n                            >\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={customerList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-users-alt me-2\"></i> Clientes</h4>\n                                                                {/* {!filter && (\n                                                                            <div className=\"position-relative\">\n                                                                                <SearchBar {...toolkitProps.searchProps}/>\n                                                                                <i className=\"mdi mdi-magnify search-icon\"></i>\n                                                                            </div>\n                                                                        )}*/}\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            <Tooltip\n                                                                placement=\"bottom\"\n                                                                title=\"Filtros Avanzados\" aria-label=\"add\"\n                                                            >\n                                                                <Button onClick={() => setFilter(!filter)}>\n                                                                    <i className={\"mdi mdi-filter\"}></i></Button>\n                                                            </Tooltip>\n                                                            <HasRole role={PERMISSIONS.CUSTOMER_CREATE}>\n                                                            <Link to={\"/customer\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nuevo Cliente\n                                                            </Link>\n                                                            </HasRole>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps}/>\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nCustomersList.propTypes = {\n    customers: PropTypes.array,\n    onGetCustomers: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {customers, loading, meta, refresh, custom, registereds} = state.Customer\n    return {customData: custom, customers, loading, meta, refresh, registereds}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetCustomers: () => {\n        dispatch(resetCustomer());\n    },\n    onGetCustomerRegistereds: ()  => {\n        dispatch(getCustomerRegistereds());\n    },\n    countCustomersByStatus,\n    countMayoristas,\n    onGetCustomers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCustomers(conditional, limit, page)),\n    onDeleteCustomer: (id) => dispatch(deleteCustomer(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CustomersList)\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/NotificationDropdown.js",["1521"],"import React, { useState } from \"react\"\nimport PropTypes from 'prop-types'\nimport { Link } from \"react-router-dom\"\nimport { Dropdown, DropdownToggle, DropdownMenu, Row, Col } from \"reactstrap\"\nimport SimpleBar from \"simplebar-react\"\n\n//Import images\nimport avatar3 from \"../../../assets/images/users/avatar-3.jpg\"\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\"\n\n//i18n\nimport { withTranslation } from \"react-i18next\"\nimport PrintBatchRequest from \"../../../pages/Orders/PrintBatchRequest\";\nimport CatalogPrintBatchRequest from \"../../../pages/Category/CatalogPrintBatchRequest\";\n\nconst NotificationDropdown = props => {\n  // Declare a new state variable, which we'll call \"menu\"\n  const [menu, setMenu] = useState(false)\n\n  return (\n    <>\n      <Dropdown\n        isOpen={menu}\n        toggle={() => setMenu(!menu)}\n        className=\"dropdown d-inline-block\"\n        tag=\"li\"\n      >\n        <DropdownToggle\n          className=\"btn header-item noti-icon waves-effect\"\n          tag=\"button\"\n          id=\"page-header-notifications-dropdown\"\n        >\n          <i className=\"uil-bell\"></i>\n          <span className=\"badge bg-danger rounded-pill\">3</span>\n        </DropdownToggle>\n\n        <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\n          <div className=\"p-3\">\n            <Row className=\"align-items-center\">\n              <Col>\n                <h6 className=\"m-0 font-size-16\"> {props.t(\"Notifications\")} </h6>\n              </Col>\n              <div className=\"col-auto\">\n                <a href=\"#!\" className=\"small\">\n                  {\" \"}\n                  {props.t(\"Mark all as read\")}\n                </a>\n              </div>\n            </Row>\n          </div>\n\n          <SimpleBar style={{ height: \"230px\" }}>\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <div className=\"avatar-xs me-3\">\n                  <span className=\"avatar-title bg-primary rounded-circle font-size-16\">\n                  <i className=\"uil-shopping-basket\"></i>\n                  </span>\n                </div>\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">\n                    Cambio de clave\n                  </h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      Se registro un cambio de clave en su cuenta\n                    </p>\n                    <p className=\"mb-0\">\n                    <i className=\"mdi mdi-clock-outline\"></i>{\" \"}\n                      {props.t(\"3 min ago\")}{\" \"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <img\n                  src={avatar3}\n                  className=\"me-3 rounded-circle avatar-xs\"\n                  alt=\"user-pic\"\n                />\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">Pedido completado</h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      Pedido completado\n                    </p>\n                    <p className=\"mb-0\">\n                      <i className=\"mdi mdi-clock-outline\"/>{\" \"}\n                      {props.t(\"3 min ago\")}{\" \"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <div className=\"avatar-xs me-3\">\n                  <span className=\"avatar-title bg-success rounded-circle font-size-16\">\n                    <i className=\"bx bx-badge-check\"/>\n                  </span>\n                </div>\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">\n                    {props.t(\"Your item is shipped\")}\n                  </h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      {props.t(\"If several languages coalesce the grammar\")}\n                    </p>\n                    <p className=\"mb-0\">\n                      <i className=\"mdi mdi-clock-outline\"/>{\" \"}\n                      {props.t(\"3 min ago\")}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n\n            <Link to=\"\" className=\"text-reset notification-item\">\n              <div className=\"d-flex\">\n                <img\n                    src={avatar3}\n                    className=\"me-3 rounded-circle avatar-xs\"\n                    alt=\"user-pic\"\n                />\n                <div className=\"flex-1\">\n                  <h6 className=\"mt-0 mb-1\">Pedido completado</h6>\n                  <div className=\"font-size-12 text-muted\">\n                    <p className=\"mb-1\">\n                      Pedido completado\n                    </p>\n                    <p className=\"mb-0\">\n                      <i className=\"mdi mdi-clock-outline\"/>{\" \"}\n                      {props.t(\"4 min ago\")}{\" \"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Link>\n          </SimpleBar>\n          <div className=\"p-2 border-top d-grid\">\n            <Link\n              className=\"btn btn-sm btn-link font-size-14 text-center\"\n              to=\"#\"\n            ><i className=\"uil-arrow-circle-right me-1\"></i>\n              {\" \"}\n              {props.t(\"View all\")}{\" \"}\n            </Link>\n          </div>\n        </DropdownMenu>\n      </Dropdown>\n\n      <PrintBatchRequest />\n      <CatalogPrintBatchRequest />\n    </>\n  )\n}\n\nexport default withTranslation()(NotificationDropdown)\n\nNotificationDropdown.propTypes = {\n  t: PropTypes.any\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/ProfileMenu.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/bill/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/office/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/postSale/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/user/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/comment/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/order/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productSize/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/productImages/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/sizes/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/deliveryLocality/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/category/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/product/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/location/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/customer/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/profile/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/forgetpwd/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/register/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/auth/login/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/layout/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerFilter/index.js",["1522","1523","1524"],"import React, {useState} from \"react\";\nimport {Button, Card, CardBody, Col, Label, Row} from \"reactstrap\";\nimport {FieldEmail, FieldText, FieldSelect,FieldDate} from \"../../../components/Fields\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {DATE_MODES} from \"../../../components/Fields/InputDate\";\nimport PropTypes from \"prop-types\";\nimport Conditionals from \"../../../common/conditionals\";\nimport moment from 'moment';\nimport {Button as ButtonMaterial} from \"@material-ui/core\";\nimport ButtonSubmit from \"../../../components/Common/ButtonSubmit\";\n\nexport const CustomerFilter = (props) => {\n\n    const form = React.createRef();\n    const [filters, setFilters] = useState({isMayorist: null, _status: null, createdAt:null})\n\n    if(!props.isActive){\n        return false;\n    }\n    const yesNoOptions = [\n        {label: '-', value: null},\n        {label: 'Si', value: true},\n        {label: 'No', value: false}];\n\n    const ActiveInactive = [\n        {label: '-', value: null},\n        {label: 'Activo', value: true},\n        {label: 'Inactivo', value: false}];\n    /* retorna  - Conditionals.all - Array */\n    const handleValidSubmit = (event,values) => {\n        if (props.onSubmit) {\n            setFilters(values);\n            const conditions = new Conditionals.Condition;\n            const {name, email, _status, isMayorist, createdAt} = values;\n\n            if (name) {\n                conditions.add('name', name, Conditionals.OPERATORS.LIKE);\n            }\n            if (email) {\n                conditions.add('email', email, Conditionals.OPERATORS.EQUAL);\n            }\n            if (yesNoOptions.filter(o => o.value !== null).map(o => o.value).includes(isMayorist.value)) {\n                    conditions.add('isMayorist', null, isMayorist.value ? Conditionals.OPERATORS.TRUE : Conditionals.OPERATORS.FALSE);\n            }\n            if (createdAt) {\n                if(moment(createdAt[0]).isSame(moment(createdAt[1]))){\n                    conditions.add('createdAt',\n                        moment(createdAt[0]).format(\"YYYY-MM-DD[T]HH:mm:ss\"),\n                        Conditionals.OPERATORS.LESS_THAN_OR_EQUAL\n                    );\n                }\n                else {\n                    conditions.add('createdAt',\n                        moment(createdAt[0]).format(\"YYYY-MM-DD[T]HH:mm:ss\"),\n                        Conditionals.OPERATORS.BETWEEN,\n                        [moment(createdAt[1]).format(\"YYYY-MM-DD[T]HH:mm:ss\")]\n                    );\n                }\n            }\n\n            if (ActiveInactive.filter(o => o.value !== null).map(o => o.value).includes(_status.value)){\n                conditions.add('status', null,\n                    _status.value ?\n                    Conditionals.OPERATORS.TRUE :\n                    Conditionals.OPERATORS.FALSE);\n            }\n            props.onSubmit(conditions.all());\n        }\n    }\n    const cleanFilters = () => {\n        setFilters({isMayorist: null, _status: null, createdAt:null});\n        const conditions = new Conditionals.Condition;\n        props.onSubmit(conditions.all());\n        form && form.current && form.current.reset();\n    }\n    return (<div className=\"col-md-4\">\n                <Card>\n                    <CardBody>\n                        {props.onPressDisabled && (\n                            <div className={\"float-end\"}>\n                                <ButtonMaterial color=\"primary\" size=\"small\" onClick={props.onPressDisabled}>\n                                    <i className={\"mdi mdi-minus\"}></i>\n                                </ButtonMaterial>\n                            </div>\n                        )}\n                        <div className=\"mb-4\">\n                            <h5><i className={\"mdi mdi-filter-menu\"}></i> Filtros Avanzados &nbsp;</h5>\n                        </div>\n                        <AvForm className=\"needs-validation\"\n                                onValidSubmit={(e, v) => {\n                                    handleValidSubmit(e, v)\n                                }}\n                                ref={form}>\n                            <Row>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">Nombre</Label>\n                                        <FieldText\n                                            name={\"name\"}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">Email</Label>\n                                        <FieldEmail\n                                            name={\"email\"}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">¿Es Mayorista?</Label>\n                                        <FieldSelect\n                                            name={\"isMayorist\"}\n                                            options={yesNoOptions}\n                                            defaultValue={filters.isMayorist}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"name\">Fecha de Creación</Label>\n                                        <FieldDate\n                                            name={\"createdAt\"}\n                                            mode={DATE_MODES.RANGE}\n                                            defaultValue={filters.createdAt}\n                                            onChange={(e)=> {\n                                                let newVar = {...filters, createdAt:e};\n                                                setFilters(newVar )\n                                            }}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md=\"12\">\n                                    <div className=\"mb-3\">\n                                        <Label htmlFor=\"_status\">Estado</Label>\n                                        <FieldSelect\n                                            name={\"_status\"}\n                                            options={ActiveInactive}\n                                            defaultValue={filters._status}\n                                        />\n                                    </div>\n                                </Col>\n                                <Col md={\"12\"}>\n                                    <div className={\"float-end\"}>\n                                        <Button type=\"submit\" color=\"primary\" className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            <i className={\"mdi mdi-magnify\"}></i> Buscar\n                                        </Button>\n                                    </div>\n                                    <div className={\"float-end ml-5\"}>\n                                        <Button type=\"button\"\n                                                onClick={cleanFilters.bind(this)}\n                                                color=\"default\"\n                                                className=\"btn-sm btn-rounded waves-effect waves-light\">\n                                            Limpiar\n                                        </Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </AvForm>\n                    </CardBody>\n                </Card>\n            </div>)\n}\n\nCustomerFilter.propTypes = {\n    isActive: PropTypes.bool,\n    onSubmit: PropTypes.func,\n    onPressDisabled: PropTypes.func\n};\n","/Users/ramon/Repositories/lucy-moie/src/pages/Customer/CustomerList/customerColumn.js",["1525"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {ConverterCustomerStatus} from \"../customer_status\";\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {formatDate, STATUS_OPTIONS, YES_NO_OPTIONS} from \"../../../common/utils\";\nimport {PERMISSIONS} from \"../../../helpers/security_rol\";\nimport HasRole from \"../../../components/HasRole\";\n\nconst customerListColumns = (onDelete = false) => [\n    {\n        text: \"Nombre\",\n        dataField: \"name\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n        formatter: (cellContent, item) => (\n            <>\n                {!item.img ? (\n                    <div className=\"avatar-xs d-inline-block me-2\">\n                        <div className=\"avatar-title bg-soft-primary rounded-circle text-primary\">\n                            <i className=\"mdi mdi-account-circle m-0\"></i>\n                        </div>\n                    </div>\n                ) : (\n                    <img\n                        className=\"avatar-xs rounded-circle me-2\"\n                        src={item.img}\n                        alt={item.name}\n                    />\n                )}\n                <HasRole role={PERMISSIONS.CUSTOMER_SHOW}>\n                <Link to={`/customer/detail/${item.id}`} className=\"text-body\">\n                    {item.name}\n                    {item.isMayorist === true && (\n                        <Tooltip placement=\"bottom\" title=\"Cliente mayorista\" aria-label=\"add\">\n                            <i className={\"mdi mdi-crown font-size-18 mr-1 text-warning\"}> </i>\n                        </Tooltip>\n                    )}\n                </Link>\n                </HasRole>\n            </>\n        ),\n    },\n    {\n        text: \"Email\",\n        dataField: \"email\",\n        sort: true,\n        filter: true,\n        filterType: \"text\",\n    },\n    {\n        text: \"Télefonos\",\n        dataField: \"phone\",\n        sort: false,\n        formatter: (cellContent, item) => (\n            <>\n                <div>Cel.: {item.cellphone && item.cellphone.length > 3 ? item.cellphone : ''}</div>\n                <div>Res.: {item.phone && item.phone.length > 3 ? item.phone : ''}</div>\n            </>\n        ),\n    },\n    {\n        text: \"Fecha creación\",\n        dataField: \"createdAt\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>\n                {formatDate(item.createdAt)}\n            </div>\n        ),\n    },\n    {\n        text: \"¿Es Mayorista?\",\n        dataField: \"isMayorist\",\n        sort: true,\n        hidden: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: YES_NO_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n    },\n    {\n        text: \"ContraPago\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterCustomerStatus(item.status)}\n            </StatusField>\n        ),\n    },\n    {\n        dataField: \"menu\",\n        isDummyField: true,\n        text: \"Acción\",\n        formatter: (cellContent, item) => (\n            <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                <li className=\"list-inline-item\">\n                    <HasRole role={PERMISSIONS.CUSTOMER_EDIT}>\n                    <Link to={`/customer/${item.id}`} className=\"px-2 text-primary\"><i className=\"uil uil-pen font-size-18\"></i></Link>\n                    </HasRole>\n                </li>\n                <HasRole role={PERMISSIONS.CUSTOMER_EDIT}>\n                {onDelete && (\n                    <li className=\"list-inline-item\">\n                        <button size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onDelete(item.id)}>\n                            <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                        </button>\n                    </li>\n                )}\n                </HasRole>\n            </ul>\n        ),\n    },\n]\n\nexport default customerListColumns\n","/Users/ramon/Repositories/lucy-moie/src/pages/Orders/PrintBatchRequest.js",["1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Col, Row} from \"reactstrap\"\nimport {Button, Card, Tooltip} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CustomizedTimeline from \"../CustomerEdit/TimeLine\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {ConfirmationModalAction} from \"../../components/Modal/ConfirmationModal\";\nimport {printPartOfPage, threeDots} from \"../../common/utils\";\nimport {deleteComment, getCommentsByEntity, registerComment} from \"../../store/comment/actions\";\nimport {findFieldOptionByGroup} from \"../../helpers/service\";\nimport order from \"../../store/order/reducer\";\nimport {doPrintBatchRequest, nextStatusOrder, printBatchRequest, resetBatchRequest} from \"../../store/order/actions\";\nimport CustomModal from \"../../components/Modal/CommosModal\";\n\nconst PrintBatchRequest = (props) => {\n\n    const {batch, conditionals, doRequest} = props;\n    const [openPrintConfirmModal, setOpenPrintConfirmModal] = useState(false);\n\n    useEffect(() => {\n        if (conditionals && doRequest) {\n            props.onPrintBatchRequest(conditionals);\n        }\n    }, [conditionals, doRequest]);\n\n    useEffect(() => {\n        if (batch && batch.body) {\n            let html = null;\n            batch.body.forEach((body) => {\n                if (html) {\n                    html += '<br/>';\n                } else {\n                    html = '';\n                }\n                html += body.html;\n            })\n            printOrder(html)\n        }\n    }, [batch]);\n\n    const printOrder = (text) => {\n        printPartOfPage(text);\n        setTimeout(() => setOpenPrintConfirmModal(true), 3000);\n    }\n\n    const onConfirmPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        props.onNextStatusOrder(batch.id);\n    }\n\n    const onCancelPrintOrder = () => {\n        setOpenPrintConfirmModal(false);\n        props.onResetBatchRequest();\n    }\n\n    return (\n        <React.Fragment>\n            <CustomModal title={\"Confirmar impresión de la(s) orden(s)\"} showFooter={false} isOpen={openPrintConfirmModal} onClose={() => onCancelPrintOrder()}>\n                <Row>\n                    <Col md={12}>\n                        ¿Logró imprimir lo(s) pedidos(s)?\n                    </Col>\n                </Row>\n                <hr/>\n                <Row>\n                    <Col md={12} className=\"text-right\">\n                        <button type=\"button\" className=\"btn btn-light\" onClick={() => onCancelPrintOrder()}>NO</button>\n                        <Button color=\"primary\" type=\"button\" onClick={onConfirmPrintOrder}>SI</Button>\n                    </Col>\n                </Row>\n            </CustomModal>\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {batchRequest} = state.Order\n    const {batch, error, meta, conditionals, doRequest, loading} = batchRequest\n    return {batch, error, meta, conditionals, doRequest, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onPrintBatchRequest: (conditional) => dispatch(printBatchRequest(conditional)),\n    onNextStatusOrder: (id = []) => dispatch(nextStatusOrder({batch: id})),\n    onResetBatchRequest: (id = []) => dispatch(resetBatchRequest()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(PrintBatchRequest)\n)\n\nPrintBatchRequest.propTypes = {\n    conditionals: PropTypes.array,\n}\n","/Users/ramon/Repositories/lucy-moie/src/pages/Category/CatalogPrintBatchRequest.js",["1540","1541"],"import React, {useEffect, useState} from \"react\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {downloadFile, getMoment} from \"../../common/utils\";\nimport {printCatalogBatchRequest, refreshCategory, resetCatalogBatchRequest} from \"../../store/category/actions\";\nimport {BATCH_TYPES, FILE_NAMES} from \"../../common/constants\";\n\nconst CatalogPrintBatchRequest = (props) => {\n\n    const {batch, conditionals, doRequest, onPrintBatchRequest, onResetBatchRequest, onRefreshCategory} = props;\n\n    useEffect(() => {\n        if (conditionals && doRequest) {\n            onPrintBatchRequest(conditionals);\n        }\n    }, [conditionals, doRequest, onPrintBatchRequest]);\n\n\n    useEffect(() => {\n        if (batch && batch.body) {\n            let html = batch.body;\n            let name = FILE_NAMES.CATALOGO_SINGLE;\n            if(batch.type === BATCH_TYPES.CATALOG_WITH_REFERENCES){\n                name = FILE_NAMES.CATALOG_WITH_REFERENCES;\n            }\n\n            const filename = `${name}-${getMoment().format(\"YYYY-MM-DD\")}.pdf`;\n\n            downloadFile(html, filename).then(() =>{\n                onResetBatchRequest();\n                onRefreshCategory();\n            });\n        }\n    }, [batch]);\n\n    return (\n        <React.Fragment>\n\n        </React.Fragment>\n    );\n}\n\nconst mapStateToProps = state => {\n    const {batchRequest} = state.Category\n    const {batch, error, meta, conditionals, doRequest, loading} = batchRequest\n    return {batch, error, meta, conditionals, doRequest, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onPrintBatchRequest: (conditional) => dispatch(printCatalogBatchRequest(conditional)),\n    onResetBatchRequest: (id = []) => dispatch(resetCatalogBatchRequest()),\n    onRefreshCategory: () => dispatch(refreshCategory()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(CatalogPrintBatchRequest)\n)\n\nCatalogPrintBatchRequest.propTypes = {\n    conditionals: PropTypes.array,\n}\n","/Users/ramon/Repositories/lucy-moie/src/i18n.js",[],"/Users/ramon/Repositories/lucy-moie/src/common/languages.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigList.js",["1542","1543"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport paginationFactory, {PaginationListStandalone, PaginationProvider,} from \"react-bootstrap-table2-paginator\"\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport {Button, Tooltip} from \"@material-ui/core\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {ConfirmationModalAction} from \"../../../components/Modal/ConfirmationModal\";\nimport {getBillConfigs, registerBillConfig, resetBillConfig} from \"../../../store/billConfig/actions\";\nimport {TableFilter} from \"../../../components/TableFilter\";\nimport billConfigColumns from \"./billConfigColumns\";\nimport {normalizeColumnsList} from \"../../../common/converters\";\nimport NoDataIndication from \"../../../components/Common/NoDataIndication\";\nimport {Link} from \"react-router-dom\";\n\nconst BillConfigList = props => {\n    const {billConfigs, onGetBillConfigs, onResetBillConfig, refresh} = props; //onDeleteBillConfig,\n    const [billConfigList, setBillConfigList] = useState([])\n    const [filter, setFilter] = useState(false);\n    const [conditional, setConditional] = useState(null);\n\n    const pageOptions = {\n        sizePerPage: DEFAULT_PAGE_LIMIT,\n        custom: true,\n    }\n    useEffect(() => {\n        onGetBillConfigs();\n    }, [refresh])\n\n    useEffect(() => {\n        onResetBillConfig();\n        onGetBillConfigs();\n        //getStates();\n    }, [onGetBillConfigs])\n\n    useEffect(() => {\n        setBillConfigList(billConfigs);\n    }, [billConfigs])\n\n    // eslint-disable-next-line no-unused-vars\n    const handleTableChange = (type, {page, searchText}) => {\n        onGetBillConfigs(conditional, DEFAULT_PAGE_LIMIT, (page - 1)*DEFAULT_PAGE_LIMIT);\n    }\n\n    const onFilterAction = (condition) => {\n        setConditional(condition);\n        onGetBillConfigs(condition, DEFAULT_PAGE_LIMIT, 0);\n    }\n    const onConfirmDelete = (id) => {\n        //onDeleteBillConfig(id);\n    };\n\n    const onDelete = (id) => {\n        ConfirmationModalAction({\n            title: '¿Seguro desea eliminar el Municipio?',\n            description: 'Usted está eliminado este Municipio, una vez eliminado no podrá ser recuperado.',\n            id: '_clienteModal',\n            onConfirm: () => onConfirmDelete(id)\n        });\n    };\n    const columns = billConfigColumns(onDelete);\n\n    return (\n        <>\n            <Row>\n\n                <TableFilter\n                    onPressDisabled={() => setFilter(false)}\n                    isActive={filter}\n                    fields={columns}\n                    onSubmit={onFilterAction.bind(this)}/>\n\n                <Col lg={filter ? \"8\" : \"12\"}>\n                    <Card>\n                        <CardBody>\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\n                                {({paginationProps, paginationTableProps}) => (\n                                    <ToolkitProvider\n                                        keyField=\"id\"\n                                        data={billConfigList || []}\n                                        columns={normalizeColumnsList(columns)}\n                                        bootstrap4\n                                        search\n                                    >\n                                        {toolkitProps => (\n                                            <React.Fragment>\n                                                <Row className=\"row mb-2\">\n                                                    <Col md={6}>\n                                                        <div className=\"form-inline mb-3\">\n                                                            <div className=\"search-box ms-2\">\n                                                                <h4 className=\"text-info\"><i className=\"uil-billConfig me-2\"></i> Resoluciones </h4>\n                                                            </div>\n                                                        </div>\n                                                    </Col>\n                                                    <Col md={6}>\n                                                        <div className=\"mb-3 float-md-end\">\n                                                            {columns.some(s => s.filter) && (\n                                                                <Tooltip placement=\"bottom\" title=\"Filtros Avanzados\" aria-label=\"add\">\n                                                                    <Button onClick={() => setFilter(!filter)}>\n                                                                        <i className={\"mdi mdi-filter\"}> </i>\n                                                                    </Button>\n                                                                </Tooltip>\n                                                            )}\n                                                            <Link to={\"/billConfig\"} className=\"btn btn-primary waves-effect waves-light text-light\">\n                                                                <i className=\"mdi mdi-plus\"></i> Nueva resolución\n                                                            </Link>\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <Row>\n                                                    <Col xl=\"12\">\n                                                        <div className=\"table-responsive mb-4\">\n                                                            <BootstrapTable\n                                                                remote\n                                                                responsive\n                                                                loading={true}\n                                                                bordered={false}\n                                                                striped={true}\n                                                                classes={\"table table-centered table-nowrap mb-0\"}\n                                                                noDataIndication={() => <NoDataIndication/>}\n                                                                {...toolkitProps.baseProps}\n                                                                onTableChange={handleTableChange}\n                                                                {...paginationTableProps}\n                                                            />\n                                                        </div>\n                                                    </Col>\n                                                </Row>\n                                                <div className=\"float-sm-start\">\n                                                    <PaginationListStandalone {...paginationProps} />\n                                                </div>\n                                            </React.Fragment>\n                                        )}\n                                    </ToolkitProvider>\n                                )}\n                            </PaginationProvider>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nBillConfigList.propTypes = {\n    states: PropTypes.array,\n    onGetBillConfigs: PropTypes.func,\n    //onDeleteBillConfig: PropTypes.func,\n}\n\nconst mapStateToProps = state => {\n    const {states, billConfigs, loading, meta, refresh} = state.BillConfig\n    return {states, billConfigs, loading, meta, refresh}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetBillConfig: () => {\n        dispatch(resetBillConfig());\n    },\n    onGetBillConfigs: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getBillConfigs(conditional, limit, page)),\n    onCreateBillConfig: (ids) => dispatch(registerBillConfig(ids)),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BillConfigList)\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfig/list/billConfigColumns.js",["1544"],"import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport {STATUS_COLORS, StatusField} from \"../../../components/StatusField\";\nimport {buildOptions} from \"../../../common/converters\";\nimport Conditionals from \"../../../common/conditionals\";\nimport {DATE_FORMAT, formatDate, STATUS_OPTIONS} from \"../../../common/utils\";\nimport {ConverterCustomerStatus} from \"../../Customer/customer_status\";\n\n//const statusOptions = buildOptions(STATUS_OPTIONS);\n\n\nconst billConfigColumns = (onDelete = false) => [\n    {\n        text: \"#\",\n        dataField: \"id\",\n        sort: true,\n        formatter: (cellContent, item) => (\n            <>\n                <Link to={`/billConfig/${item.id}`} className=\"text-body\">\n                    <b className=\"text-info\">{item.id}</b>\n                </Link>\n            </>\n        ),\n        filter: true,\n        filterType: \"text\",\n        filterCondition: Conditionals.OPERATORS.LIKE,\n    },\n    {\n        text: \"Resolución\",\n        dataField: \"number\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Num. Inicial\",\n        dataField: \"startNumber\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Num. Final\",\n        dataField: \"finalNumber\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Prefijo\",\n        dataField: \"prefix\",\n        sort: true,\n        filter: true,\n        filterType: \"text\"\n    },\n    {\n        text: \"Fecha de resolución\",\n        dataField: \"resolution_date\",\n        sort: true,\n        filter: true,\n        filterType: \"dateRange\",\n        formatter: (cellContent, item) => (\n            <div>{formatDate(item.createdAt, DATE_FORMAT.ONLY_DATE)}</div>\n        ),\n    },\n    {\n        text: \"Estado\",\n        dataField: \"status\",\n        sort: true,\n        filter: true,\n        filterType: \"select\",\n        filterOptions: STATUS_OPTIONS,\n        filterDefaultOption: STATUS_OPTIONS[0],\n        formatter: (cellContent, item) => (\n            <StatusField color={item.status === true ? STATUS_COLORS.SUCCESS : STATUS_COLORS.DANGER}>\n                {ConverterCustomerStatus(item.status)}\n            </StatusField>\n        ),\n    },\n]\n\nexport default billConfigColumns;\n","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actions.js",["1545"],"import {\n    BILL_CONFIG_LIST_REFRESH,\n    DELETE_BILL_CONFIG,\n    DELETE_BILL_CONFIG_FAILED,\n    DELETE_BILL_CONFIG_SUCCESS,\n    GET_BILL_CONFIG,\n    GET_BILL_CONFIG_FAILED,\n    GET_BILL_CONFIG_SUCCESS,\n    GET_BILL_CONFIGS,\n    GET_BILL_CONFIGS_FAILED,\n    GET_BILL_CONFIGS_SUCCESS,\n    QUERY_BILL_CONFIGS,\n    QUERY_BILL_CONFIGS_FAILED,\n    QUERY_BILL_CONFIGS_SUCCESS,\n    REGISTER_BILL_CONFIG,\n    REGISTER_BILL_CONFIG_FAILED,\n    REGISTER_BILL_CONFIG_SUCCESS,\n    RESET_BILL_CONFIG,\n    UPDATE_BILL_CONFIG,\n    UPDATE_BILL_CONFIG_FAILED,\n    UPDATE_BILL_CONFIG_SUCCESS\n} from \"./actionTypes\";\nimport Conditionals from \"../../common/conditionals\";\n\nexport const resetBillConfig = () => ({\n    type: RESET_BILL_CONFIG,\n})\n\nexport const getBillConfigs = (conditional, limit, offset) => ({\n    type: GET_BILL_CONFIGS,\n    conditional: conditional,\n    limit: limit,\n    offset: offset\n})\n\nexport const getBillConfigsByIds = (ids, offset) => {\n    const conditions = new Conditionals.Condition;\n    if (ids.length > 0) conditions.add(\"id\", ids.join(\"::\"), Conditionals.OPERATORS.IN);\n    return getBillConfigs(conditions.all(), ids.length, offset);\n}\n\nexport const getBillConfigsSuccess = (data, meta) => ({\n    type: GET_BILL_CONFIGS_SUCCESS,\n    meta: meta,\n    payload: data,\n})\n\nexport const getBillConfigsFailed = error => ({\n    type: GET_BILL_CONFIGS_FAILED,\n    payload: error,\n})\n\nexport const getBillConfig = id => ({\n    type: GET_BILL_CONFIG,\n    id\n})\n\nexport const getBillConfigSuccess = data => ({\n    type: GET_BILL_CONFIG_SUCCESS,\n    payload: data,\n})\n\nexport const getBillConfigFailed = error => ({\n    type: GET_BILL_CONFIG_FAILED,\n    payload: error,\n})\n\nexport const registerBillConfig = (data, history) => {\n    return {\n        type: REGISTER_BILL_CONFIG,\n        payload: {data, history},\n    }\n}\n\nexport const registerBillConfigSuccess = data => {\n    return {\n        type: REGISTER_BILL_CONFIG_SUCCESS,\n        payload: data.bill,\n    }\n}\n\n\nexport const registerBillConfigFailed = data => {\n    return {\n        type: REGISTER_BILL_CONFIG_FAILED,\n        payload: data,\n    }\n}\n\nexport const updateBillConfig = (id, data, history) => {\n    return {\n        type: UPDATE_BILL_CONFIG,\n        payload: {id, data, history},\n    }\n}\n\nexport const updateBillConfigSuccess = data => {\n    return {\n        type: UPDATE_BILL_CONFIG_SUCCESS,\n        payload: data,\n    }\n}\n\n\nexport const updateBillConfigFail = error => {\n    return {\n        type: UPDATE_BILL_CONFIG_FAILED,\n        payload: error,\n    }\n}\n\nexport const deleteBillConfig = (id, history) => ({\n    type: DELETE_BILL_CONFIG,\n    payload: {id, history}\n})\n\nexport const deleteBillConfigSuccess = () => ({\n    type: DELETE_BILL_CONFIG_SUCCESS\n})\n\nexport const deleteBillConfigFailed = error => ({\n    type: DELETE_BILL_CONFIG_FAILED,\n    payload: error,\n})\n\nexport const countBillConfigByStatus = () => {\n    const params = {operation: 'id::count', group: \"status\"};\n    return queryBillConfigs(params, 'statusGroup');\n}\n\nexport const queryBillConfigs = (params, node) => ({\n    type: QUERY_BILL_CONFIGS,\n    params: params,\n    node: node,\n})\nexport const queryBillConfigsFailed = error => ({\n    type: QUERY_BILL_CONFIGS_FAILED,\n    payload: error,\n})\nexport const queryBillConfigsSuccess = (data, meta, node) => ({\n    type: QUERY_BILL_CONFIGS_SUCCESS,\n    meta: meta,\n    payload: data,\n    node: node,\n})\n\nexport const refreshList = () => {\n    return {type: BILL_CONFIG_LIST_REFRESH}\n}\n","/Users/ramon/Repositories/lucy-moie/src/store/billConfig/actionTypes.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/billConfig/saga.js",[],"/Users/ramon/Repositories/lucy-moie/src/store/billConfig/reducer.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/index.js",["1546"],"import React, {useEffect} from \"react\"\nimport {CardBody, Container} from \"reactstrap\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getBillConfig} from \"../../store/billConfig/actions\";\nimport Breadcrumb from \"../../components/Common/Breadcrumb\";\nimport {Card} from \"@material-ui/core\";\nimport BillConfigForm from \"./BillConfigForm\";\n\nconst BillConfigEdit = (props) => {\n    const {getBillConfig, billConfig} = props;\n    const isEdit = props.match.params.id;\n\n    //carga inicial\n    useEffect(() => {\n        if (isEdit && getBillConfig) {\n            getBillConfig(props.match.params.id);\n        }\n    }, [getBillConfig]);\n\n    return (\n        <React.Fragment>\n            <div className=\"page-content\">\n                <Container fluid>\n                    <Breadcrumb hasBack path=\"/billConfigs\" title={billConfig.name} item={\"Resolución\"}/>\n                    <Card>\n                        <CardBody>\n                            <BillConfigForm billConfig={billConfig}/>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, billConfig, loading} = state.BillConfig\n    return {error, billConfig, loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, getBillConfig})(BillConfigEdit)\n)\n\nBillConfigEdit.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/BillConfigEdit/BillConfigForm.js",["1547","1548","1549"],"import React, {useEffect, useState} from \"react\"\nimport {Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport {apiError} from \"../../store/auth/login/actions\";\nimport PropTypes from \"prop-types\";\nimport {getBillConfig, registerBillConfig, updateBillConfig} from \"../../store/billConfig/actions\";\nimport {getMunicipalities, getStates} from \"../../store/location/actions\";\nimport {FieldDate, FieldSwitch, FieldText} from \"../../components/Fields\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\n\nconst BillConfigForm = (props) => {\n    const {getBillConfig, billConfig, showAsModal = false, onCloseModal= false, onAcceptModal= false} = props;\n    const [billConfigData, setBillConfigData] = useState({_status: \"true\"});\n\n    //carga inicial\n    useEffect(() => {\n        if (props.match.params.id && getBillConfig) {\n            getBillConfig(props.match.params.id);\n        }\n    }, [getBillConfig]);\n\n    //cargar la información del cliente\n    useEffect(() => {\n        if (billConfig.id) {\n            setBillConfigData(billConfig);\n        }\n    }, [billConfig]);\n\n    const handleValidSubmit = (event, values) => {\n        console.log(\"VALUES\", values);\n        const data = filteredValues(values);\n\n        if (!billConfig.id) {\n            props.registerBillConfig(data, props.history)\n        } else {\n            props.updateBillConfig(billConfig.id, data, props.history)\n        }\n\n        if(showAsModal && onAcceptModal){\n            onAcceptModal(billConfig.id);\n        }\n    }\n\n    const filteredValues = (values) => {\n        const data = {...values};\n\n        data.status = values._status === \"true\" ? true : false;\n        delete data._status;\n        return data;\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Row>\n                    <Col xl={12}>\n                        {!showAsModal && (\n                            <div className={\"mt-1 mb-5\"} style={{position: \"relative\"}}>\n                                <div className={\"float-end\"}>\n                                    <Row>\n                                        <Col>\n                                            ¿Activo?\n                                        </Col>\n                                        <Col>\n                                            <FieldSwitch\n                                                id={\"_status\"}\n                                                defaultValue={billConfigData._status}\n                                                name={\"_status\"}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </div>\n                            </div>\n                        )}\n                        <Row>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"name\">Número Resolución<span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id={\"number\"}\n                                        name={\"number\"}\n                                        value={billConfigData.number}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"6\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"prefix\">Prefijo<span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='prefix'\n                                        name={\"prefix\"}\n                                        value={billConfigData.prefix}\n                                        required />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"_startNumber\">Numero Inicial <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='_startNumber'\n                                        name={\"startNumber\"}\n                                        value={billConfigData.startNumber}\n                                        minLength={1}\n                                        maxLength={255}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"_finalNumber\">Numero Final <span className=\"text-danger\">*</span></Label>\n                                    <FieldText\n                                        id='_finalNumber'\n                                        name={\"finalNumber\"}\n                                        value={billConfigData.finalNumber}\n                                        minLength={1}\n                                        maxLength={255}\n                                        required/>\n                                </div>\n                            </Col>\n                            <Col md=\"4\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"resolutionDate\">Fecha de Resolución</Label>\n                                    <FieldDate\n                                        name={\"resolutionDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                        defaultValue={billConfigData.createdAt}\n                                    />\n                                </div>\n                            </Col>\n\n                        </Row>\n\n                        <hr/>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                {showAsModal && onCloseModal && (\n                                    <button type=\"button\" className=\"btn btn-light\" onClick={() => props.onCloseModal()}>Cancelar</button>\n                                )}\n                                <ButtonSubmit loading={props.loading}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {error, loading} = state.BillConfig\n    return {error,loading}\n}\n\nexport default withRouter(\n    connect(mapStateToProps, {apiError, registerBillConfig, updateBillConfig, getBillConfig})(BillConfigForm)\n)\n\nBillConfigForm.propTypes = {\n    error: PropTypes.any,\n    history: PropTypes.object\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/OfficeReportForm.js",["1550"],"import React, {useEffect} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport ButtonSubmit from \"../../components/Common/ButtonSubmit\";\nimport {formatDateToServer} from \"../../common/utils\";\nimport {OFFICE_REPORT_TYPE_LIST, REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport, generateReportRestart} from \"../../store/reports/actions\";\n\nconst OfficeReportForm = ({onCloseModal, loading, error, success, onGenerateReport, onRestartReport}) => {\n\n\n    useEffect(() => {\n        if (onRestartReport) {\n            onRestartReport();\n        }\n    }, [onRestartReport]);\n\n    useEffect(() => {\n        if (success && !error) {\n            onCloseModal(true);\n        }\n    }, [success]);\n\n\n    const handleValidSubmit = (e, values) => {\n        const payload = {\n            type: values.type.value,\n            date: formatDateToServer(values.reportDate[0])\n        };\n        console.log(payload);\n        onGenerateReport(payload);\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => handleValidSubmit(e, v)}>\n                <Card>\n                    <CardBody>\n                        <Row>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Tipo<span className=\"text-danger\">*</span></Label>\n                                    <FieldSelect\n                                        id={\"type\"}\n                                        name={\"type\"}\n                                        options={OFFICE_REPORT_TYPE_LIST}\n                                        defaultValue={OFFICE_REPORT_TYPE_LIST[0]}\n                                        required\n                                    />\n                                </div>\n                            </Col>\n                            <Col md=\"12\">\n                                <div className=\"mb-3\">\n                                    <Label htmlFor=\"field_name\">Fecha <span className=\"text-danger\">*</span></Label>\n                                    <FieldDate\n                                        name={\"reportDate\"}\n                                        mode={DATE_MODES.SINGLE}\n                                    />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-center\">\n                                {!!(!success && error) && (\n                                    <div className=\"alert alert-danger\">{error}</div>\n                                )}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={12} className=\"text-right\">\n                                <ButtonSubmit loading={loading} disabled={loading}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {report} = state.PostSale;\n    const {deliveryMethods} = state.Order;\n    return {deliveryMethods: deliveryMethods.data, loading: report.loading, error: report.error, success: report.success}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.OFFICE, data)),\n    onRestartReport: () => dispatch(generateReportRestart()),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(OfficeReportForm)\n)\n\nOfficeReportForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/batchQueries/BatchQueriesForm.js",["1551","1552","1553"],"import React, {useEffect, useState} from \"react\"\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {Card, Tooltip} from \"@material-ui/core\";\nimport {CardBody, Col, Label, Row} from \"reactstrap\";\nimport {FieldSelect, FieldText} from \"../../components/Fields\";\nimport Conditionals from \"../../common/conditionals\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {getProducts, resetProduct} from \"../../store/product/actions\";\nimport {map} from \"lodash\";\nimport {arrayToOptions} from \"../../common/converters\";\nimport {getCategories} from \"../../store/category/actions\";\nimport {getSizes} from \"../../store/sizes/actions\";\nimport {ButtonCopy} from \"../../components/Common/ButtonCopy\";\n\n\nconst BatchQueriesForm = (props) => {\n    const {onGetProducts, products, onResetProduct, loading, categories, sizes, onGetSizes, onGetCategories} = props;\n    const [productRefs, setProductRefs] = useState([]);\n    const [productList, setProductList] = useState([]);\n    const [categoriesList, setCategoriesList] = useState([]);\n    const [sizesList, setSizesList] = useState([]);\n    const [sizeSelected, setSizeSelected] = useState(null);\n    const [categorySelected, setCategorySelected] = useState(null);\n    const [textToCopy, setTextToCopy] = useState(null);\n    const [form, setForm] = useState(null);\n    const [defaultValue, setDefaultValue] = useState(null);\n\n    useEffect(() => {\n        onResetProduct();\n        onGetCategories();\n        onGetSizes();\n    }, [onResetProduct])\n\n    useEffect(() => {\n        if (categories && categories.length > 0) {\n            const list = [emptyOptions('Todos'), ...arrayToOptions(categories)]\n            setCategoriesList(list);\n        } else {\n            setCategoriesList([emptyOptions('Todos')]);\n        }\n    }, [categories])\n\n    useEffect(() => {\n        if (sizes && sizes.length > 0) {\n            const list = [emptyOptions('Todos'), ...arrayToOptions(sizes)]\n            setSizesList(list);\n        } else {\n            setSizesList([emptyOptions('Todos')]);\n        }\n    }, [sizes])\n\n    useEffect(() => {\n        if (products && products.length > 0) {\n            const list = products\n                .filter((p) => p.productSize.length > 0)\n                .map((p) => {\n                    return {\n                        reference: p.reference,\n                        productSize: p.productSize.map((s) => {\n                            return {\n                                name: s.name,\n                                quantity: s.quantity,\n                                color: s.color,\n                                label: s.quantity > 0 ? s.color : 'AGOTADO',\n                            }\n                        })\n                    }\n                });\n\n            const listToCopy = list.map(p => {\n                const ll = p.productSize.filter((s) => s.quantity > 0).map(s => {\n                    return `TALLA ${s.name}: ${s.label}`\n                })\n                return `${p.reference}\\n${ll.join(\"\\n\")}`\n            })\n\n            console.log('YG listToCopy', listToCopy)\n            setTextToCopy(listToCopy.join(\"\\n\"));\n            setProductList(list);\n        } else {\n            setProductList([]);\n        }\n        console.log('YG values', products);\n    }, [products])\n\n    const emptyOptions = (label) => {\n        return {label: label ? label : '-', value: -1};\n    }\n\n    const onSearchRefs = () => {\n        if (productRefs.length === 0) {\n            return;\n        }\n        const refs = productRefs.split(\" \");\n        console.log('YG values', refs);\n\n        const conditions = new Conditionals.Condition;\n        if (productRefs.length > 0) conditions.add(\"reference\", refs.join(\"::\"), Conditionals.OPERATORS.IN);\n        onGetProducts(conditions.all(), refs.length);\n        setProductList([]);\n    }\n\n    const onSearch = () => {\n        console.log('YG onSearch', categorySelected, sizeSelected);\n        const conditions = new Conditionals.Condition;\n        if (sizeSelected && sizeSelected.value && sizeSelected.value > 0) {\n            conditions.add(\"size.id\", sizeSelected.value, Conditionals.OPERATORS.EQUAL);\n        }\n        if (categorySelected && categorySelected.value && categorySelected.value > 0) {\n            conditions.add(\"category.id\", categorySelected.value, Conditionals.OPERATORS.EQUAL);\n        }\n        onGetProducts(conditions.all());\n        setProductList([]);\n    }\n\n    const clearFilters = () => {\n        setProductList([]);\n        setTextToCopy([]);\n        setCategorySelected(null)\n        setSizeSelected(null)\n        setProductRefs([])\n        setDefaultValue(-1)\n        if (form) form.reset();\n    }\n    console.log('YG listToCopy', props)\n\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\" ref={c => setForm(c)}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col xs={6}>\n                                <h4 className=\"text-info\"><i className=\"fa fa-search\"></i> Consultas Masivas</h4>\n                            </Col>\n                            <Col xs={6} className=\"text-right\">\n                                <Tooltip placement=\"bottom\" title=\"Limpiar\" aria-label=\"add\">\n                                    <button onClick={clearFilters} className=\"btn btn-xs btn-primary mr-5\">\n                                        <i className=\"fa fa-eraser\"></i> Limpiar\n                                    </button>\n                                </Tooltip>\n                                <Tooltip placement=\"bottom\" title=\"Copiar\" aria-label=\"add\">\n                                    <ButtonCopy text={textToCopy} disabled={productList.length === 0}/>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row className=\"mb-3\">\n                            <Col xs={10}>\n                                <Label htmlFor=\"orders\">Productos</Label>\n                                <FieldText\n                                    id={\"products\"}\n                                    name={\"products\"}\n                                    onKeyPress={e => {\n                                        if (e.key === \"Enter\") {\n                                            onSearchRefs();\n                                        }\n                                    }}\n                                    onChange={(e) => {\n                                        setProductRefs(e.target.value);\n                                    }}\n                                />\n                            </Col>\n                            <Col xs={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Consultar\" aria-label=\"add\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={loading}\n                                            onClick={onSearchRefs}>\n                                        <i className=\"mdi mdi-text-box-search-outline\"> </i>\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row className=\"mb-3\">\n                            <Col xs=\"5\">\n                                <Label className=\"control-label\">Categoria <span className=\"text-danger\">*</span></Label>\n                                <FieldSelect\n                                    id={\"field_category\"}\n                                    name={\"category\"}\n                                    options={categoriesList}\n                                    defaultValue={defaultValue}\n                                    isClearable={true}\n                                    onChange={(e) => {\n                                        setCategorySelected(e);\n                                    }}\n                                    isSearchable\n                                />\n                            </Col>\n                            <Col xs=\"5\">\n                                <Label className=\"control-label\">Tallas</Label>\n                                <FieldSelect\n                                    id={\"field_sizes\"}\n                                    name={\"size\"}\n                                    options={sizesList}\n                                    defaultValue={defaultValue}\n                                    isClearable={true}\n                                    onChange={(e) => {\n                                        setSizeSelected(e);\n                                    }}\n                                    isSearchable\n                                />\n                            </Col>\n                            <Col xs={2} style={{display: 'flex', 'alignItems': 'flex-end'}}>\n                                <Tooltip placement=\"bottom\" title=\"Consultar\" aria-label=\"add\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block waves-effect waves-light mt-2 me-1 w-100\"\n                                            disabled={loading}\n                                            onClick={onSearch}>\n                                        <i className=\"mdi mdi-text-box-search-outline\"> </i>\n                                    </button>\n                                </Tooltip>\n                            </Col>\n                        </Row>\n                        <hr/>\n                        <Row>\n                            <Col sx={12}>\n\n                                {loading && <div className=\"text-center\"><i className=\"fa fa-spinner fa-spin\"> </i></div>}\n                                {map(productList, (prod, k) => (\n                                    <div key={k}>\n                                        <table className=\"table table-condensed table-bordered text-center table-striped\">\n                                            <thead>\n                                            <tr style={{background: '#50a5f1', color: '#FFF'}}>\n                                                <th colSpan={prod.productSize.length}>{prod.reference}</th>\n                                            </tr>\n                                            </thead>\n                                            <tbody>\n                                            <tr>\n                                                {map(prod.productSize, (pSize, k2) => (\n                                                    <td key={k2}>{pSize.name}</td>\n                                                ))}\n                                            </tr>\n                                            <tr>\n                                                {map(prod.productSize, (pSize, k2) => (\n                                                    <td key={k2}>{pSize.label}</td>\n                                                ))}\n                                            </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                ))}\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {products, error, loading} = state.Product\n    const {categories} = state.Category\n    const {sizes} = state.Sizes\n    return {categories, sizes, products, error, loading}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onResetProduct: () => dispatch(resetProduct()),\n    onGetCategories: (conditional = null, limit = 100, page) => dispatch(getCategories(conditional, limit, page)),\n    onGetSizes: (conditional = null, limit = 100, page) => dispatch(getSizes(conditional, limit, page)),\n    onGetProducts: (conditional = null, limit = 1000, page) => dispatch(getProducts(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(BatchQueriesForm)\n)\n\nBatchQueriesForm.propTypes = {\n    error: PropTypes.any,\n    onCloseModal: PropTypes.func\n}\n","/Users/ramon/Repositories/lucy-moie/src/components/Common/ButtonCopy.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/CommonForBoth/TopbarDropdown/GeneralSearch.js",["1554","1555","1556","1557","1558"],"import React, {useEffect, useState} from \"react\"\nimport Conditionals from \"../../../common/conditionals\";\nimport {generateReportRestart} from \"../../../store/reports/actions\";\nimport {withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {fetchCategoriesApi, fetchCustomersApi, fetchProductsApi} from \"../../../helpers/backend_helper\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../../common/pagination\";\nimport {getProducts} from \"../../../store/product/actions\";\nimport {getCustomers} from \"../../../store/customer/actions\";\nimport {getCategories} from \"../../../store/category/actions\";\n\nconst PREFIXES = {\n    PRODUCT: \"p:\",\n    CUSTOMER: \"c:\",\n    CATEGORY: \"ca:\"\n}\n\nconst GeneralSearch = (props) => {\n    const [text, setText] = useState(null)\n    const [prefix, setPrefix] = useState(null)\n\n    useEffect(() => {\n        if (prefix === PREFIXES.PRODUCT) {\n            findProduct();\n        }\n        if (prefix === PREFIXES.CUSTOMER) {\n            findCustomer();\n        }\n        if (prefix === PREFIXES.CATEGORY) {\n            findCategory();\n        }\n    }, [prefix])\n\n    const search = (e) => {\n        e.preventDefault();\n        let pref = null;\n        Object.keys(PREFIXES).forEach(pre => {\n            if (text.toLowerCase().startsWith(PREFIXES[pre])) {\n                pref = PREFIXES[pre];\n            }\n        })\n        if (null === pref) {\n            if (props.history.location.pathname === '/products') {\n                props.onGetProducts(multipleConditions([\"reference\", \"name\", \"provider\", \"providerReference\"]));\n            } else if (props.history.location.pathname === '/customers') {\n                props.onGetCustomers(multipleConditions([\"name\", \"email\", \"phone\", \"cellphone\"]));\n            } else if (props.history.location.pathname === '/categories') {\n                props.onGetCategories(singleConditions(\"name\"));\n            }\n        }\n        setPrefix(pref)\n    };\n\n    const findProduct = () => {\n        const params = parseConditions(\"reference\");\n        fetchProductsApi(params).then((p => {\n            if (p && p.data && p.data.length > 0) {\n                props.history.push(`/product/detail/${p.data[0].id}`);\n            }\n        }))\n    };\n\n    const findCustomer = () => {\n        const params = parseConditions(\"name\");\n        fetchCustomersApi(params).then((p => {\n            if (p && p.data && p.data.length > 0) {\n                props.history.push(`/customer/detail/${p.data[0].id}`);\n            }\n        }))\n    };\n\n    const findCategory = () => {\n        const params = parseConditions(\"name\");\n        fetchCategoriesApi(params).then((p => {\n            if (p && p.data && p.data.length > 0) {\n                props.history.push(`/category/${p.data[0].id}`);\n            }\n        }))\n    };\n\n    const parseConditions = (fieldName) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(fieldName, text.replace(prefix, \"\"), Conditionals.OPERATORS.EQUAL);\n        const cond = Conditionals.getConditionalFormat(conditions.all());\n        return Conditionals.buildHttpGetQuery(cond, 1);\n    };\n\n    const singleConditions = (fieldName) => {\n        const conditions = new Conditionals.Condition;\n        conditions.add(fieldName, text.replace(prefix, \"\"), Conditionals.OPERATORS.LIKE);\n        return conditions.all();\n    };\n\n    const multipleConditions = (fieldNames) => {\n        const conditions = new Conditionals.Condition;\n        fieldNames.map(fieldName => {\n            conditions.add(fieldName, text.replace(prefix, \"\"), Conditionals.OPERATORS.LIKE);\n            if(fieldName !== fieldNames[fieldNames.length - 1]) {\n                conditions.addOr();\n            }\n        });\n        return conditions.all();\n    };\n\n    return (\n        <>\n            <form className=\"app-search d-none d-lg-block\" onSubmit={search}>\n                <div className=\"position-relative\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Buscar...\"\n                        onChange={(e) => setText(e.target.value)}\n                    />\n                    <span className=\"uil-search\"></span>\n                </div>\n            </form>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onRestartReport: () => dispatch(generateReportRestart()),\n    onGetProducts: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getProducts(conditional, limit, page)),\n    onGetCustomers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCustomers(conditional, limit, page)),\n    onGetCategories: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getCategories(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(GeneralSearch)\n)\n\n\n\n","/Users/ramon/Repositories/lucy-moie/src/pages/Reports/Stats.js",["1559","1560","1561","1562","1563","1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580"],"import React, {useEffect, useState} from \"react\"\nimport {CardBody, Col, Label, Row} from \"reactstrap\"\nimport {AvForm} from \"availity-reactstrap-validation\"\nimport {Card} from \"@material-ui/core\";\nimport {withRouter} from \"react-router-dom\"\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {DATE_FORMAT, formatDate} from \"../../common/utils\";\nimport {REPORT_TYPES} from \"../../common/constants\";\nimport {generateReport} from \"../../store/reports/actions\";\nimport {statsApi} from \"../../helpers/backend_helper\";\n\nimport Highcharts from 'highcharts'\nimport {FieldDate, FieldSelect} from \"../../components/Fields\";\nimport {DATE_MODES} from \"../../components/Fields/InputDate\";\nimport {DEFAULT_PAGE_LIMIT} from \"../../common/pagination\";\nimport {getUsers} from \"../../store/user/actions\";\nimport {getEmptyOptions} from \"../../common/converters\";\nimport HighChartsWrapper from \"../../components/Common/HishChartsWrapper\";\n\nconst showByList = [getEmptyOptions(), ...['dia', 'Semana', 'Mes', 'Año'].map((g) => ({label: g, value: g}))]\nconst hoy = new Date();\nconst defaultDates = [new Date(hoy.getTime() - 518400000), new Date()];\nconst initialState = {\n    cargando: '',\n    usuarios: [],\n    ventas: {\n        data: {\n            title: {\n                text: 'Ventas'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            },\n                {\n                    labels: {\n                        format: '{value} Pz.'\n                    },\n                    title: {\n                        text: 'Piezas'\n                    },\n                    opposite: true\n                }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            },\n                {\n                    name: 'Ganancia ($)',\n                    data: []\n                },\n                {\n                    name: 'Piezas',\n                    yAxis: 1,\n                    dashStyle: 'shortdot',\n                    data: []\n                }]\n        },\n        opciones: {\n            usuario: '',\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime())\n        },\n    },\n    ventasEstado: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Ventas por departamento'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n    ventasOrigen: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Ventas por origen'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [\n                {\n                    name: 'Página Web',\n                    data: []\n                },\n                {\n                    name: 'Facebook',\n                    data: []\n                },\n                {\n                    name: 'Whatsapp',\n                    data: []\n                },\n                {\n                    name: 'Otros',\n                    data: []\n                }\n            ]\n        },\n        opciones: {\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n    reincidencias: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Reincidencias'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [{\n                name: 'Clientes',\n                data: []\n            },\n                {\n                    name: 'Reincidentes',\n                    data: []\n                }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime())\n        }\n    },\n    ventasWhatsapp: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Ventas por Whatsapp'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }],\n            series: [{\n                name: 'Venta ($)',\n                data: []\n            }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n    ventasTipo: {\n        data: {\n            title: {\n                text: 'Ventas por tipo'\n            },\n            subtitle: {\n                text: null\n            },\n            tooltip: {\n                shared: true\n            },\n            xAxis: {\n                crosshair: true,\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '$ {value}'\n                },\n                title: {\n                    text: 'Monto'\n                }\n            }, {\n                labels: {\n                    format: '{value}'\n                },\n                title: {\n                    text: 'Pedidos'\n                },\n                opposite: true\n            }],\n            series: [\n                {\n                    name: 'Monto Previo Pago',\n                    type: 'column',\n                    color: '#aad0f3',\n                    data: []\n                },\n                {\n                    name: 'Monto Contra Entrega',\n                    type: 'column',\n                    color: '#5b5b62',\n                    data: []\n                },\n                {\n                    name: 'Pedidos Previo Pago',\n                    yAxis: 1,\n                    color: '#7CB5EC',\n                    data: []\n                },\n                {\n                    name: 'Pedidos Contra Entrega',\n                    yAxis: 1,\n                    color: '#434348',\n                    data: []\n                }]\n        },\n        opciones: {\n            grupo: 'dia'\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    },\n    masVendidos: {\n        data: {\n            chart: {\n                type: 'column'\n            },\n            title: {\n                text: 'Productos más vendidos'\n            },\n            subtitle: {\n                text: null\n            },\n            xAxis: {\n                categories: []\n            },\n            yAxis: [{\n                labels: {\n                    format: '{value}'\n                },\n                title: {\n                    text: 'Piezas'\n                }\n            }],\n            series: [{\n                name: 'Cantidad',\n                data: []\n            },\n                {\n                    name: 'Existencia',\n                    data: []\n                }]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        },\n    },\n    horas: {\n        data: {\n            chart: {\n                zoomType: 'xy'\n            },\n            title: {\n                text: 'Pedidos por hora'\n            },\n            subtitle: {\n                text: \"sub\"\n            },\n            xAxis: {\n                categories: [],\n                crosshair: true\n            },\n            yAxis: [\n                {\n                    labels: {\n                        format: '$ {value}',\n                        style: {\n                            color: Highcharts.getOptions().colors[1]\n                        }\n                    },\n                    title: {\n                        text: 'Monto',\n                        style: {\n                            color: Highcharts.getOptions().colors[1]\n                        }\n                    }\n                },\n                // Secondary yAxis\n                {\n                    labels: {\n                        format: '{value}',\n                        style: {\n                            color: Highcharts.getOptions().colors[0]\n                        }\n                    },\n                    title: {\n                        text: 'Pedidos',\n                        style: {\n                            color: Highcharts.getOptions().colors[0]\n                        }\n                    },\n                    opposite: true\n                }],\n            series: [\n                {\n                    name: 'Monto',\n                    type: 'column',\n                    yAxis: 1,\n                    data: []\n                },\n                {\n                    name: 'Cantidad',\n                    type: 'spline',\n                    data: []\n                }\n            ]\n        },\n        fecha: {\n            inicial: new Date(hoy.getTime() - 518400000),\n            final: new Date(hoy.getTime()),\n        }\n    }\n}\n\nconst Stats = ({users, onGetUsers}) => {\n\n    const [stats, setStats] = useState(initialState);\n    const [ventasOrigenReload, setVentasOrigenReload] = useState(false);\n\n    useEffect(() => {\n        if (ventasOrigenReload) {\n            setVentasOrigenReload(false);\n        }\n    }, [ventasOrigenReload]);\n\n    useEffect(() => {\n        if (onGetUsers) {\n            onGetUsers();\n        }\n    }, [onGetUsers]);\n\n    useEffect(() => {\n        if (stats.ventas) {\n            cargarVentas()\n        }\n    }, [stats.ventas.fecha]);\n\n    useEffect(() => {\n        if (stats.ventas) {\n            cargarVentas()\n        }\n    }, [stats.ventas.opciones]);\n\n    useEffect(() => {\n        if (stats.ventasEstado) {\n            ventasEstadoCargar()\n        }\n    }, [stats.ventasEstado.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasWhatsapp) {\n            ventasWhatsappCargar()\n        }\n    }, [stats.ventasWhatsapp.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasOrigen) {\n            ventasOrigenCargar()\n        }\n    }, [stats.ventasOrigen.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasOrigen) {\n            ventasOrigenCargar()\n        }\n    }, [stats.ventasOrigen.opciones]);\n\n    useEffect(() => {\n        if (stats.ventasTipo) {\n            ventasTipoCargar()\n        }\n    }, [stats.ventasTipo.fecha]);\n\n    useEffect(() => {\n        if (stats.ventasTipo) {\n            ventasTipoCargar()\n        }\n    }, [stats.ventasTipo.opciones]);\n\n    useEffect(() => {\n        if (stats.masVendidos) {\n            masVendidosCargar()\n        }\n    }, [stats.masVendidos.fecha]);\n\n    useEffect(() => {\n        if (stats.horas) {\n            horasCargar()\n        }\n    }, [stats.horas.fecha]);\n\n    useEffect(() => {\n        if (stats.reincidencias) {\n            reincidenciasCargar()\n        }\n    }, [stats.reincidencias.fecha]);\n\n    useEffect(() => {\n        if (users) {\n            const options = users.map((user) => ({label: user.name, value: user.id}))\n            setStats({...stats, usuarios: [getEmptyOptions(), ...options]});\n            console.log('users', users)\n        }\n    }, [users]);\n\n    const cargarVentas = () => {\n        if (valida(stats.ventas.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas';\n            url += '/' + parserServerDate(stats.ventas.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventas.fecha.final);\n            url += '/' + stats.ventas.opciones.grupo;\n            url += '/' + stats.ventas.opciones.usuario;\n            //leer estadisticas de ventas\n            statsApi(url).then((resp) => {\n                var fechas = [];\n                var datosVentas = [];\n                var datosGanancias = [];\n                var datosPiezas = [];\n\n                var keys = Object.keys(resp);\n\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    datosVentas[i] = parseFloat(data.monto);\n                    datosGanancias[i] = parseFloat(data.ganancia);\n                    datosPiezas[i] = parseFloat(data.piezas);\n                }\n                const newStats = {...stats};\n                newStats.ventas.data.subtitle.text = parserClientDate(stats.ventas.fecha.inicial) + ' a ' + parserClientDate(stats.ventas.fecha.final)\n                newStats.ventas.data.xAxis.categories = fechas;\n                newStats.ventas.data.series[0].data = datosVentas;\n                newStats.ventas.data.series[1].data = datosGanancias;\n                newStats.ventas.data.series[2].data = datosPiezas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            console.error(data.error);\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const ventasEstadoCargar = () => {\n        if (valida(stats.ventasEstado.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_estado';\n            url += '/' + parserServerDate(stats.ventasEstado.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasEstado.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var estados = [];\n                var datosVentas = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    estados[i] = data.estado;\n                    datosVentas[i] = parseFloat(data.monto);\n                }\n                const newStats = {...stats};\n                newStats.ventasEstado.data.subtitle.text = parserClientDate(stats.ventasEstado.fecha.inicial) + ' a ' + parserClientDate(stats.ventasEstado.fecha.final)\n                newStats.ventasEstado.data.xAxis.categories = estados;\n                newStats.ventasEstado.data.series[0].data = datosVentas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const ventasOrigenCargar = () => {\n        if (valida(stats.ventasOrigen.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_origen';\n            url += '/' + parserServerDate(stats.ventasOrigen.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasOrigen.fecha.final);\n            url += '/' + stats.ventasOrigen.opciones.grupo;\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var fechas = [];\n                var series = [];\n                var datosWeb = [];\n                var datosWebMovil = [];\n                var datosFacebook = [];\n                var datosApp = [];\n                var datosWhatsapp = [];\n                var datosBlackberry = [];\n                var datosOtros = [];\n\n                var seriesList = [];\n                for (var i = 0; i < resp.length; i++) {\n                    var r = resp[i];\n                    Object.keys(r).filter(k => k !== 'fecha').forEach(k => {\n                        if (!seriesList.includes(k)) {\n                            seriesList.push(k);\n                        }\n                    });\n                }\n\n                var seriesMap = {};\n\n                for (var i = 0; i < resp.length; i++) {\n                    var data = resp[i];\n                    fechas[i] = data.fecha;\n\n                    seriesList.forEach(serieName => {\n                        if (!seriesMap[serieName]) {\n                            seriesMap[serieName] = {name: serieName, data: []};\n                        }\n                        if (!data[serieName]) {\n                            seriesMap[serieName].data.push(parseFloat(0));\n                        } else {\n                            seriesMap[serieName].data.push(parseFloat(data[serieName]));\n                        }\n                    })\n\n                    /* datosWeb[i] = parseFloat(data.web);\n                    datosWebMovil[i] = parseFloat(data.webMovil);\n                    datosFacebook[i] = parseFloat(data.facebook);\n                    datosApp[i] = parseFloat(data.app);\n                    datosWhatsapp[i] = parseFloat(data.whatsapp);\n                    datosBlackberry[i] = parseFloat(data.blackberry);\n                    datosOtros[i] = parseFloat(data.otros);*/\n                }\n                Object.keys(seriesMap).filter(k => k !== 'fecha').forEach(k => {\n                    series.push(seriesMap[k]);\n                });\n\n                if (series.length === 0) {\n                    series = initialState.ventasOrigen.data.series;\n                }\n\n                const newStats = {...stats};\n                newStats.ventasOrigen.data.subtitle.text = parserClientDate(stats.ventasOrigen.fecha.inicial) + ' a ' + parserClientDate(stats.ventasOrigen.fecha.final)\n                newStats.ventasOrigen.data.xAxis.categories = fechas;\n                newStats.ventasOrigen.data.series = series;\n                /*newStats.ventasOrigen.data.series[0].data = datosWeb;\n                newStats.ventasOrigen.data.series[1].data = datosWebMovil;\n                newStats.ventasOrigen.data.series[2].data = datosFacebook;\n                newStats.ventasOrigen.data.series[3].data = datosApp;\n                newStats.ventasOrigen.data.series[4].data = datosWhatsapp;\n                newStats.ventasOrigen.data.series[5].data = datosBlackberry;\n                newStats.ventasOrigen.data.series[6].data = datosOtros;*/\n                newStats.cargando = '';\n                setStats(newStats);\n                setVentasOrigenReload(true);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const reincidenciasCargar = () => {\n        if (valida(stats.reincidencias.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_reincidencias';\n            url += '/' + parserServerDate(stats.reincidencias.fecha.inicial);\n            url += '/' + parserServerDate(stats.reincidencias.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (data) {\n                var fechas = [];\n                var datosClientes = data.clientes;\n                var datosReincidentes = data.reincidentes;\n\n                const newStats = {...stats};\n                newStats.reincidencias.data.subtitle.text = parserClientDate(stats.reincidencias.fecha.inicial) + ' a ' + parserClientDate(stats.reincidencias.fecha.final)\n                newStats.reincidencias.data.xAxis.categories = ['Total'];\n                newStats.reincidencias.data.series[0].data = datosClientes;\n                newStats.reincidencias.data.series[1].data = datosReincidentes;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const ventasWhatsappCargar = () => {\n        if (valida(stats.ventasWhatsapp.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_whatsapp';\n            url += '/' + parserServerDate(stats.ventasWhatsapp.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasWhatsapp.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var whatsapp = [];\n                var datosVentas = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    whatsapp[i] = data.origen;\n                    datosVentas[i] = parseFloat(data.monto);\n                }\n                const newStats = {...stats};\n                newStats.ventasWhatsapp.data.subtitle.text = parserClientDate(stats.ventasWhatsapp.fecha.inicial) + ' a ' + parserClientDate(stats.ventasWhatsapp.fecha.final)\n                newStats.ventasWhatsapp.data.xAxis.categories = whatsapp;\n                newStats.ventasWhatsapp.data.series[0].data = datosVentas;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const ventasTipoCargar = () => {\n        if (valida(stats.ventasTipo.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_ventas_tipo';\n            url += '/' + parserServerDate(stats.ventasTipo.fecha.inicial);\n            url += '/' + parserServerDate(stats.ventasTipo.fecha.final);\n            url += '/' + stats.ventasTipo.opciones.grupo;\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var fechas = [];\n                var cantidadPrevioPago = [];\n                var montoPrevioPago = [];\n                var cantidadContraEntrega = [];\n                var montoContraEntrega = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    fechas[i] = data.fecha;\n                    cantidadPrevioPago[i] = parseFloat(data.cantidadPrevioPago);\n                    montoPrevioPago[i] = parseFloat(data.montoPrevioPago);\n                    cantidadContraEntrega[i] = parseFloat(data.cantidadContraEntrega);\n                    montoContraEntrega[i] = parseFloat(data.montoContraEntrega);\n                }\n                const newStats = {...stats};\n                newStats.ventasTipo.data.subtitle.text = parserClientDate(stats.ventasTipo.fecha.inicial) + ' a ' + parserClientDate(stats.ventasTipo.fecha.final)\n                newStats.ventasTipo.data.xAxis.categories = fechas;\n                newStats.ventasTipo.data.series[0].data = montoPrevioPago;\n                newStats.ventasTipo.data.series[1].data = montoContraEntrega;\n                newStats.ventasTipo.data.series[2].data = cantidadPrevioPago;\n                newStats.ventasTipo.data.series[3].data = cantidadContraEntrega;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const masVendidosCargar = () => {\n        if (valida(stats.masVendidos.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_mas_vendidos';\n            url += '/' + parserServerDate(stats.masVendidos.fecha.inicial);\n            url += '/' + parserServerDate(stats.masVendidos.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var ids = [];\n                var cantidad = [];\n                var existencia = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    ids[i] = data.id;\n                    cantidad[i] = parseFloat(data.cantidad);\n                    existencia[i] = parseFloat(data.existencia);\n                }\n                const newStats = {...stats};\n                newStats.masVendidos.data.subtitle.text = parserClientDate(stats.masVendidos.fecha.inicial) + ' a ' + parserClientDate(stats.masVendidos.fecha.final)\n                newStats.masVendidos.data.xAxis.categories = ids;\n                newStats.masVendidos.data.series[0].data = cantidad;\n                newStats.masVendidos.data.series[1].data = existencia;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const horasCargar = () => {\n        if (valida(stats.horas.fecha)) {\n            stats.cargando = 'Cargando estadisticas de ventas...';\n            //definir la url para la consulta a la API\n            var url = '/stats/estadistica_horas';\n            url += '/' + parserServerDate(stats.horas.fecha.inicial);\n            url += '/' + parserServerDate(stats.horas.fecha.final);\n            //leer estadisticas de ventas\n            statsApi(url).then(function (resp) {\n                var horas = [];\n                var cantidad = [];\n                var monto = [];\n                var keys = Object.keys(resp);\n                for (var i = 0; i < keys.length; i++) {\n                    var data = resp[keys[i]];\n                    horas[i] = data.hora;\n                    cantidad[i] = parseInt(data.cantidad);\n                    monto[i] = parseFloat(data.monto);\n                }\n                const newStats = {...stats};\n                newStats.horas.data.subtitle.text = parserClientDate(stats.horas.fecha.inicial) + ' a ' + parserClientDate(stats.horas.fecha.final)\n                newStats.horas.data.xAxis.categories = horas;\n                newStats.horas.data.series[0].data = monto;\n                newStats.horas.data.series[1].data = cantidad;\n                newStats.cargando = '';\n                setStats(newStats);\n            })\n            /*.error(function(data,status){\n            if(status===403){\n                estadisticas.logout();\n            }\n            swal(\"Error\", data.error, \"error\");\n            estadisticas.cargando = '';\n        });*/\n        }\n    }\n\n    const parserServerDate = (date) => {\n        return formatDate(date, DATE_FORMAT.ONLY_DATE);\n    }\n\n    const valida = (node) => {\n        if (!node) return;\n        let v = false;\n        if (node.inicial <= node.final) {\n            v = true;\n        }\n        return v;\n    }\n\n    const parserClientDate = (date) => {\n        return formatDate(date, DATE_FORMAT.DD_MM_YYYY);\n    }\n\n    const onChangeDate = (dates, node) => {\n        if (dates.length > 0) {\n            const s = {...stats}\n            if (dates.length === 1) {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0]}}\n            } else {\n                s[node] = {...stats[node], fecha: {...stats[node].fecha, inicial: dates[0], final: dates[1]}}\n            }\n            setStats(s);\n        }\n    }\n\n    const onChangeUser = (user, node) => {\n        if (user && user.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, usuario: user.value}}\n            setStats(s);\n        }\n    }\n\n    const onChangeGrupo = (grupo, node) => {\n        if (grupo && grupo.value) {\n            const s = {...stats}\n            s[node] = {...stats[node], opciones: {...stats[node].opciones, grupo: grupo.value}}\n            setStats(s);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"ventas\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Total de ventas</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"ventas_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"ventas\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Mostrar por</Label>\n                                    <FieldSelect\n                                        name=\"ventas_grupo\"\n                                        options={showByList}\n                                        defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                        onChange={(data) => onChangeGrupo(data, \"ventas\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Usuarios</Label>\n                                    <FieldSelect\n                                        name=\"ventas_users\"\n                                        options={stats.usuarios}\n                                        defaultValue={stats.usuarios.length > 0 ? stats.usuarios[0] : null}\n                                        onChange={(data) => onChangeUser(data, \"ventas\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.ventas.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"ventasEstado\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Ventas por departamento</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"ventasEstado_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"ventasEstado\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.ventasEstado.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"ventasOrigen\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Ventas por origen</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"ventasOrigen_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"ventasOrigen\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Mostrar por</Label>\n                                    <FieldSelect\n                                        name=\"ventasOrigen_grupo\"\n                                        options={showByList}\n                                        defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                        onChange={(data) => onChangeGrupo(data, \"ventasOrigen\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                {!ventasOrigenReload && (\n                                    <HighChartsWrapper options={stats.ventasOrigen.data}/>\n                                )}\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"ventasWhatsapp\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Ventas por Whatsapp</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"ventasWhatsapp_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"ventasWhatsapp\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.ventasWhatsapp.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"ventasTipo\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Ventas por tipo</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"ventasTipo_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"ventasTipo\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Mostrar por</Label>\n                                    <FieldSelect\n                                        name=\"ventasTipo_grupo\"\n                                        options={showByList}\n                                        defaultValue={showByList.length > 0 ? showByList[0] : null}\n                                        onChange={(data) => onChangeGrupo(data, \"ventasTipo\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.ventasTipo.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"masVendidos\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Productos más vendidos</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"masVendidos_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"masVendidos\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.masVendidos.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"horas\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Pedidos por hora</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"horas_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"horas\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.horas.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n                <Card className=\"mb-2\">\n                    <CardBody>\n                        <Row id=\"reincidencias\">\n                            <Col md={12}>\n                                <h4 className=\"card-title text-info\"> Reincidencias</h4>\n                            </Col>\n                            <Col md={4}>\n                                <div className=\"mb-3\">\n                                    <Label>Fecha</Label>\n                                    <FieldDate\n                                        name=\"reincidencias_dates\"\n                                        mode={DATE_MODES.RANGE}\n                                        defaultValue={defaultDates}\n                                        onChange={(dates) => onChangeDate(dates, \"reincidencias\")}\n                                    />\n                                </div>\n                            </Col>\n                            <Col md={12}>\n                                <HighChartsWrapper options={stats.reincidencias.data}/>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </AvForm>\n        </React.Fragment>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {users} = state.User\n    return {users}\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onGenerateReport: (data) => dispatch(generateReport(REPORT_TYPES.CONCILIATION, data)),\n    onGetUsers: (conditional = null, limit = DEFAULT_PAGE_LIMIT, page) => dispatch(getUsers(conditional, limit, page)),\n})\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Stats)\n)\n\nStats.propTypes = {\n    error: PropTypes.any,\n}\n\n","/Users/ramon/Repositories/lucy-moie/src/components/HasRole.js",[],"/Users/ramon/Repositories/lucy-moie/src/components/Common/HishChartsWrapper.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Security/index.js",[],"/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityManagement.js",["1581","1582","1583"],"import React, {useState} from \"react\"\nimport {connect} from \"react-redux\"\nimport {Card, Col, Row} from \"reactstrap\"\nimport SecurityPermissions from \"./SecurityPermissions\";\nimport SecurityRoles from \"./SecurityRoles\";\n\nconst SecurityManagement = ({}) => {\n\n    const [activeTab, setActiveTab] = useState(1);\n    const [reloadPermissions, setReloadPermissions] = useState(false);\n\n    const onChangeTab = (tab) => {\n        if (tab === 1) {\n            setReloadPermissions(true);\n        } else {\n            setReloadPermissions(false);\n        }\n        setActiveTab(tab);\n    }\n\n    return (\n        <Row>\n            <Col md={12}>\n                <Card id={'order-tabs'} className=\"p-3\">\n                    <ul className=\"nav nav-tabs nav-tabs-custom nav-justified\" role=\"tablist\">\n                        <li className=\"nav-item\">\n                            <a className={`nav-link ${activeTab === 1 ? 'active' : ''}`} data-bs-toggle=\"tab\" role=\"tab\" aria-selected=\"false\" onClick={() => onChangeTab(1)}>\n                                <span className=\"d-block d-sm-none\"><i className=\"fas fa-home\"> </i></span>\n                                <span className=\"d-none d-sm-block\">Roles</span>\n                            </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className={`nav-link ${activeTab === 2 ? 'active' : ''}`} data-bs-toggle=\"tab\" role=\"tab\" aria-selected=\"false\" onClick={() => onChangeTab(2)}>\n                                <span className=\"d-block d-sm-none\"><i className=\"far fa-user\"> </i></span>\n                                <span className=\"d-none d-sm-block\">Permisos</span>\n                            </a>\n                        </li>\n                    </ul>\n                    <div className=\"tab-content p-3 text-muted\">\n                        <div className={`tab-pane ${activeTab === 1 ? 'active' : ''}`} role=\"tabpanel\">\n                            <SecurityRoles reloadPermissions={reloadPermissions}/>\n                        </div>\n                        <div className={`tab-pane ${activeTab === 2 ? 'active' : ''}`} role=\"tabpanel\">\n                            <SecurityPermissions/>\n                        </div>\n                    </div>\n                </Card>\n            </Col>\n\n        </Row>\n    )\n}\n\nSecurityManagement.propTypes = {}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityManagement)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityRoles.js",["1584","1585","1586"],"import React, {useEffect, useState} from \"react\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Label, Row} from \"reactstrap\"\nimport {map} from \"lodash\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {deleteDataApi, fetchDataApi, postApi, registerDataApi, updateDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {FieldSelect, FieldText} from \"../../components/Fields\";\nimport PropTypes from \"prop-types\";\nimport {sortList} from \"../../common/utils\";\n\nconst SecurityRoles = ({reloadPermissions}) => {\n\n    const [permissions, setPermissions] = useState([]);//list\n    const [permissionsOptions, setPermissionsOptions] = useState([]);\n    const [permissionsOptionSelected, setPermissionsOptionSelected] = useState({});\n    const [roles, setRoles] = useState([]);//group\n    const [roleSelected, setRoleSelected] = useState({});\n    const [rolEdited, setRolEdited] = useState(null);\n\n    useEffect(() => {\n        getPermissions();\n        getRoles();\n    }, [setPermissions]);\n\n    useEffect(() => {\n        if (reloadPermissions && permissions && permissions.length > 0) {\n            filterPermissionsOptions();\n        }\n    }, [permissions]);\n\n    useEffect(() => {\n        if (roleSelected && roleSelected.id) {\n            filterPermissionsOptions();\n        }\n    }, [roleSelected]);\n\n    useEffect(() => {\n        if (reloadPermissions) {\n            getPermissions();\n        }\n    }, [reloadPermissions]);\n\n    const filterPermissionsOptions = () => {\n        if (!roleSelected || !roleSelected.permissions) return;\n        setPermissionsOptions(permissions.filter(p => !roleSelected.permissions.includes(p.permission)).map(p => ({label: p.permission, value: p.id})));\n    };\n\n    const getRoles = (rol) => {\n        fetchDataApi(url.SECURITY_ROLES).then(resp => {\n            let data = sortList(resp.data, 'name');\n            setRoles(data);\n            let selected = null;\n            if (rol && rol.id && (!roleSelected || roleSelected.id !== rol.id)) {\n                selected = data.find(d => d.id === rol.id);\n            } else if (roleSelected && roleSelected.id) {\n                selected = data.find(d => d.id === roleSelected.id);\n            }\n            setRoleSelected(selected || {});\n        })\n    };\n\n    const getPermissions = () => {\n        fetchDataApi(url.SECURITY_PERMISSIONS).then(resp => {\n            setPermissions(sortList(resp.data, 'permission'));\n        })\n    };\n\n    const onAddPermission = (data) => {\n        if (!data || !data.label) return;\n        const payload = {permission: data.label};\n        postApi(`${url.SECURITY_ROLES}/${roleSelected.id}/addPermission`, payload).then(resp => {\n            if (resp.status === 200) {\n                getRoles();\n                filterPermissionsOptions();\n                setPermissionsOptionSelected(-1);\n            }\n        })\n    };\n\n    const onRemovePermission = (permission) => {\n        postApi(`${url.SECURITY_ROLES}/${roleSelected.id}/removePermission`, {permission: permission}).then(resp => {\n            if (resp.status === 200) {\n                getRoles();\n                filterPermissionsOptions();\n                setPermissionsOptionSelected(-1);\n            }\n        })\n    };\n\n    const onAddRole = () => {\n        setRolEdited(null);\n        const list = [...roles];\n        list.unshift({id: null, name: ''});\n        setRoles(list);\n    };\n\n    const onSaveRole = (ev, data) => {\n        let func;\n        if (rolEdited) {\n            func = updateDataApi(url.SECURITY_ROLES, rolEdited, {name: data.name});\n        } else {\n            func = registerDataApi(url.SECURITY_ROLES, {name: data.name});\n        }\n\n        func.then(resp => {\n            if (resp.status === 200) {\n                getRoles(resp.securityrol);\n            }\n            setRolEdited(null)\n        })\n    };\n\n    const onDeleteRole = (role) => {\n        deleteDataApi(url.SECURITY_ROLES, role.id, {}).then(resp => {\n            if (resp.status === 200) {\n                if (roleSelected && roleSelected.id === role.id) {\n                    setRoleSelected({});\n                }\n                getRoles();\n            }\n        })\n    };\n\n    const onCancel = (index) => {\n        const list = [...roles];\n        list.splice(index, 1);\n        setRoles(list);\n    };\n\n    return (\n        <Row>\n            <Col md={6}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col sm={12}>\n                                <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary float-md-end\" onClick={() => onAddRole()}>\n                                    <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                </button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onSaveRole(e, v)}>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '70%'}}>Rol</th>\n                                            <th style={{width: '30%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(roles, (rol, key) => (\n                                            <tr key={key} className={rol.id === roleSelected.id ? 'bg-light font-weight-600' : ''}>\n                                                <td>\n                                                    {rolEdited !== rol.id && (\n                                                        <>\n                                                            {rol.name}\n                                                        </>\n                                                    )}\n                                                    {rolEdited === rol.id && (\n                                                        <>\n                                                            <FieldText id={\"name\"} name={\"name\"} value={rol.name} required/>\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <div className=\"btn-group\">\n                                                                <div className=\"btn-group\">\n\n                                                                    {(rolEdited !== rol.id && rol.id) && (\n                                                                        <div>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={rolEdited}\n                                                                                    onClick={() => setRoleSelected(rol)}>\n                                                                                <i className=\"uil uil-eye font-size-18\"> </i>\n                                                                            </button>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={rolEdited}\n                                                                                    onClick={() => setRolEdited(rol.id)}>\n                                                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                            </button>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={rolEdited}\n                                                                                    onClick={() => onDeleteRole(rol)}>\n                                                                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                            </button>\n                                                                        </div>\n                                                                    )}\n                                                                    {(rolEdited === rol.id || !rol.id) && (\n                                                                        <div>\n                                                                            <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                                <i className=\"uil uil-check font-size-18\"> </i>\n                                                                            </button>\n                                                                            {!rol.id && (\n                                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onCancel(key)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                            {rol.id && (\n                                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setRolEdited(null)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                        </div>\n                                                                    )}\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                    </ul>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </AvForm>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n            <Col md={6}>\n                <Card>\n                    <CardBody>\n                        <AvForm className=\"needs-validation\" autoComplete=\"off\">\n                            <Row className=\"mb-3\">\n                                <Col sm={12}>\n                                    <Label className=\"control-label\">Permisos</Label>\n                                    <FieldSelect\n                                        id={\"permission\"}\n                                        name={\"permission\"}\n                                        options={permissionsOptions}\n                                        defaultValue={permissionsOptionSelected}\n                                        onChange={(e) => onAddPermission(e)}\n                                        isSearchable\n                                        disabled={!(roleSelected && roleSelected.id)}\n                                    />\n                                </Col>\n                            </Row>\n                        </AvForm>\n                        <Row>\n                            <Col>\n                                <table className=\"table table-bordered table-condensed\">\n                                    <thead>\n                                    <tr>\n                                        <th>Nombre</th>\n                                        <th style={{width: '20%'}}>Acciones</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {map(roleSelected.permissions, (permission, key) => (\n                                        <tr key={key}>\n                                            <td>{permission}</td>\n                                            <td className=\"text-center\">\n                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onRemovePermission(permission)}>\n                                                    <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                </button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nSecurityRoles.propTypes = {\n    reloadPermissions: PropTypes.bool\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityRoles)\n","/Users/ramon/Repositories/lucy-moie/src/pages/Security/SecurityPermissions.js",["1587"],"import React, {useEffect, useState} from \"react\"\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport {Card, CardBody, Col, Row} from \"reactstrap\"\nimport {map} from \"lodash\";\nimport {AvForm} from \"availity-reactstrap-validation\";\nimport {deleteDataApi, fetchDataApi, registerDataApi, updateDataApi} from \"../../helpers/backend_helper\";\nimport * as url from \"../../helpers/url_helper\";\nimport {FieldText} from \"../../components/Fields\";\n\nconst SecurityPermissions = (props) => {\n\n    const [permissions, setPermissions] = useState([]);\n    const [permissionEdited, setPermissionEdited] = useState(null);\n\n    useEffect(() => {\n        getPermissions();\n    }, [setPermissions]);\n\n    const getPermissions = () => {\n        fetchDataApi(url.SECURITY_PERMISSIONS).then(resp => {\n            setPermissions(sort(resp.data, 'permission'));\n        });\n    };\n\n    const sort = (data, fieldName) => {\n        return (data || []).sort((a, b) => a[fieldName] === b[fieldName] ? 0 : (a[fieldName] > b[fieldName]) ? 1 : -1)\n    };\n\n    const onDelete = (permission) => {\n        deleteDataApi(url.SECURITY_PERMISSIONS, permission.id, {}).then(resp => {\n            if (resp.status === 200) {\n                getPermissions();\n            }\n        })\n    };\n\n    const onAdd = () => {\n        setPermissionEdited(null);\n        const list = [...permissions];\n        list.unshift({id: null, name: ''});\n        setPermissions(list);\n    };\n\n    const onSave = (ev, data) => {\n        let payload = {permission: data.permission, description: data.description};\n\n        let func;\n        if (permissionEdited) {\n            func = updateDataApi(url.SECURITY_PERMISSIONS, permissionEdited, payload);\n        } else {\n            func = registerDataApi(url.SECURITY_PERMISSIONS, payload);\n        }\n\n        func.then(resp => {\n            if (resp.status === 200) {\n                getPermissions();\n            }\n            setPermissionEdited(null)\n        })\n    };\n\n    const onCancel = (index) => {\n        const list = [...permissions];\n        list.splice(index, 1);\n        setPermissions(list);\n    };\n\n    return (\n        <Row>\n            <Col md={12}>\n                <Card>\n                    <CardBody>\n                        <Row className=\"mb-3\">\n                            <Col sm={12}>\n                                <button size=\"small\" type=\"button\" className=\"btn btn-sm text-primary float-md-end\" onClick={() => onAdd()}>\n                                    <i className=\"uil uil-plus font-size-18\"> </i> Agregar\n                                </button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <AvForm className=\"needs-validation\" autoComplete=\"off\" onValidSubmit={(e, v) => onSave(e, v)}>\n                                    <table className=\"table table-bordered table-condensed\">\n                                        <thead>\n                                        <tr>\n                                            <th style={{width: '30%'}}>Permiso</th>\n                                            <th style={{width: '55%'}}>Descripcion</th>\n                                            <th style={{width: '15%'}}>Acciones</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {map(permissions, (permission, key) => (\n                                            <tr key={key}>\n                                                <td>\n                                                    {permissionEdited !== permission.id && (\n                                                        <>\n                                                            {permission.permission}\n                                                        </>\n                                                    )}\n                                                    {permissionEdited === permission.id && (\n                                                        <>\n                                                            <FieldText id={\"permission\"} name={\"permission\"} value={permission.permission} required/>\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td>\n                                                    {permissionEdited !== permission.id && (\n                                                        <>\n                                                            {permission.description}\n                                                        </>\n                                                    )}\n                                                    {permissionEdited === permission.id && (\n                                                        <>\n                                                            <FieldText id={\"description\"} name={\"description\"} value={permission.description} required/>\n                                                        </>\n                                                    )}\n                                                </td>\n                                                <td className=\"text-center\">\n                                                    <ul className=\"list-inline font-size-20 contact-links mb-0\">\n                                                        <li className=\"list-inline-item\">\n                                                            <div className=\"btn-group\">\n                                                                <div className=\"btn-group\">\n\n                                                                    {(permissionEdited !== permission.id && permission.id) && (\n                                                                        <div>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" disabled={permissionEdited}\n                                                                                    onClick={() => setPermissionEdited(permission.id)}>\n                                                                                <i className=\"uil uil-pen font-size-18\"> </i>\n                                                                            </button>\n                                                                            <button type=\"button\" size=\"small\" className=\"btn btn-sm text-danger\" disabled={permissionEdited}\n                                                                                    onClick={() => onDelete(permission)}>\n                                                                                <i className=\"uil uil-trash-alt font-size-18\"> </i>\n                                                                            </button>\n                                                                        </div>\n                                                                    )}\n                                                                    {(permissionEdited === permission.id || !permission.id) && (\n                                                                        <div>\n                                                                            <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-success\">\n                                                                                <i className=\"uil uil-check font-size-18\"> </i>\n                                                                            </button>\n                                                                            {!permission.id && (\n                                                                                <button type=\"submit\" size=\"small\" className=\"btn btn-sm text-danger\" onClick={() => onCancel(key)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                            {permission.id && (\n                                                                                <button type=\"button\" size=\"small\" className=\"btn btn-sm text-primary\" onClick={() => setPermissionEdited(null)}>\n                                                                                    <i className=\"uil uil-multiply font-size-18\"> </i>\n                                                                                </button>\n                                                                            )}\n                                                                        </div>\n                                                                    )}\n                                                                </div>\n                                                            </div>\n                                                        </li>\n                                                    </ul>\n\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </AvForm>\n                            </Col>\n                        </Row>\n                    </CardBody>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nSecurityPermissions.propTypes = {\n    onChange: PropTypes.func\n}\n\nconst mapStateToProps = state => {\n    return {}\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SecurityPermissions)\n","/Users/ramon/Repositories/lucy-moie/src/helpers/security_rol.js",["1588","1589"],"import React from 'react';\nimport {connect} from \"react-redux\";\n\nexport const PERMISSIONS = {\n    PRODUCT_CREATE: 'product.create',\n    PRODUCT_EDIT: 'product.edit',\n    PRODUCT_SHOW: 'product.show',\n    PRODUCT_LIST: 'product.list',\n    CATEGORY_CREATE: 'category.create',\n    CATEGORY_EDIT: 'category.edit',\n    CATEGORY_SHOW: 'category.show',\n    CATEGORY_LIST: 'category.list',\n    CUSTOMER_CREATE: 'customer.create',\n    CUSTOMER_EDIT: 'customer.edit',\n    CUSTOMER_SHOW: 'customer.show',\n    CUSTOMER_LIST: 'customer.list',\n    ORDER_EDIT: 'order.edit',\n    ORDER_SHOW: 'order.show',\n    ORDER_LIST: 'order.list',\n    ORDER_CREATE: 'office.create',\n    OFFICE_CREATE: 'office.create',\n    OFFICE_EDIT: 'office.edit',\n    OFFICE_SHOW: 'office.show',\n    OFFICE_LIST: 'office.list',\n    BILL_CREATE: 'bill.create',\n    BILL_EDIT: 'bill.edit',\n    BILL_SHOW: 'bill.show',\n    BILL_LIST: 'bill.list',\n    POSTSALE_CREATE: 'postsale.create',\n    POSTSALE_EDIT: 'postsale.edit',\n    POSTSALE_SHOW: 'postsale.show',\n    POSTSALE_LIST: 'postsale.list',\n    PAYMENT_CREATE: 'payment.create',\n    PAYMENT_EDIT: 'payment.edit',\n    PAYMENT_SHOW: 'payment.show',\n    PAYMENT_LIST: 'payment.list',\n    REPORT_CREATE: 'report.create',\n    REPORT_EDIT: 'report.edit',\n    REPORT_SHOW: 'report.show',\n    REPORT_LIST: 'report.list',\n    USER_CREATE: 'user.create',\n    USER_EDIT: 'user.edit',\n    USER_SHOW: 'user.show',\n    USER_LIST: 'user.list',\n    SECURITY_CREATE: 'security.create',\n    SECURITY_EDIT: 'security.edit',\n    SECURITY_SHOW: 'security.show',\n    SECURITY_LIST: 'security.list',\n    LOCALITY_CREATE: 'locality.create',\n    LOCALITY_EDIT: 'locality.edit',\n    LOCALITY_SHOW: 'locality.show',\n    LOCALITY_LIST: 'locality.list',\n    TEMPLATE_CREATE: 'template.create',\n    TEMPLATE_EDIT: 'template.edit',\n    TEMPLATE_SHOW: 'template.show',\n    TEMPLATE_LIST: 'template.list',\n    RESOLUTION_CREATE: 'resolution.create',\n    RESOLUTION_EDIT: 'resolution.edit',\n    RESOLUTION_SHOW: 'resolution.show',\n    RESOLUTION_LIST: 'resolution.list',\n    CONFIG_CREATE: 'config.create',\n    CONFIG_EDIT: 'config.edit',\n    CONFIG_SHOW: 'config.show',\n    CONFIG_LIST: 'config.list',\n    COMMENT_CREATE: 'comment.create',\n    COMMENT_EDIT: 'comment.edit',\n    COMMENT_SHOW: 'comment.show',\n    COMMENT_LIST: 'comment.list',\n    ORDER_PERSONAL: 'order.personal',\n    OFFICE_DOWNLOAD: 'office.download',\n    BILL_DOWNLOAD: 'bill.download',\n    POSTSALE_DOWNLOAD: 'postsale.download',\n    CATEGORY_DOWNLOAD: 'category.download'\n};\nexport const hasPermissionAccess = (roles, permission) => {\n    return true;\n    //return roles.includes(permission);\n}\n",{"ruleId":"1590","replacedBy":"1591"},{"ruleId":"1592","replacedBy":"1593"},{"ruleId":"1594","severity":1,"message":"1595","line":13,"column":10,"nodeType":"1596","messageId":"1597","endLine":13,"endColumn":12},{"ruleId":"1594","severity":1,"message":"1598","line":13,"column":14,"nodeType":"1596","messageId":"1597","endLine":13,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1599","line":14,"column":10,"nodeType":"1596","messageId":"1597","endLine":14,"endColumn":13},{"ruleId":"1594","severity":1,"message":"1600","line":14,"column":15,"nodeType":"1596","messageId":"1597","endLine":14,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1601","line":15,"column":10,"nodeType":"1596","messageId":"1597","endLine":15,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1602","line":15,"column":17,"nodeType":"1596","messageId":"1597","endLine":15,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1603","line":16,"column":10,"nodeType":"1596","messageId":"1597","endLine":16,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1604","line":16,"column":21,"nodeType":"1596","messageId":"1597","endLine":16,"endColumn":33},{"ruleId":"1594","severity":1,"message":"1605","line":17,"column":10,"nodeType":"1596","messageId":"1597","endLine":17,"endColumn":17},{"ruleId":"1594","severity":1,"message":"1606","line":17,"column":19,"nodeType":"1596","messageId":"1597","endLine":17,"endColumn":29},{"ruleId":"1594","severity":1,"message":"1607","line":18,"column":10,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1608","line":18,"column":21,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":33},{"ruleId":"1594","severity":1,"message":"1609","line":19,"column":10,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1610","line":19,"column":16,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1611","line":20,"column":10,"nodeType":"1596","messageId":"1597","endLine":20,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1612","line":20,"column":17,"nodeType":"1596","messageId":"1597","endLine":20,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1613","line":21,"column":10,"nodeType":"1596","messageId":"1597","endLine":21,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1614","line":21,"column":17,"nodeType":"1596","messageId":"1597","endLine":21,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1615","line":22,"column":10,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1616","line":22,"column":16,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1617","line":23,"column":10,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":13},{"ruleId":"1594","severity":1,"message":"1618","line":23,"column":15,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1619","line":24,"column":17,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1620","line":25,"column":10,"nodeType":"1596","messageId":"1597","endLine":25,"endColumn":17},{"ruleId":"1594","severity":1,"message":"1621","line":25,"column":19,"nodeType":"1596","messageId":"1597","endLine":25,"endColumn":29},{"ruleId":"1594","severity":1,"message":"1622","line":5,"column":31,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":34},{"ruleId":"1594","severity":1,"message":"1623","line":5,"column":36,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":39},{"ruleId":"1594","severity":1,"message":"1624","line":13,"column":8,"nodeType":"1596","messageId":"1597","endLine":13,"endColumn":24},{"ruleId":"1594","severity":1,"message":"1625","line":22,"column":8,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1626","line":23,"column":8,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":17},{"ruleId":"1594","severity":1,"message":"1627","line":24,"column":8,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":16},{"ruleId":"1594","severity":1,"message":"1628","line":25,"column":8,"nodeType":"1596","messageId":"1597","endLine":25,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1629","line":26,"column":8,"nodeType":"1596","messageId":"1597","endLine":26,"endColumn":18},{"ruleId":"1594","severity":1,"message":"1630","line":27,"column":8,"nodeType":"1596","messageId":"1597","endLine":27,"endColumn":13},{"ruleId":"1594","severity":1,"message":"1631","line":42,"column":10,"nodeType":"1596","messageId":"1597","endLine":42,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1632","line":42,"column":21,"nodeType":"1596","messageId":"1597","endLine":42,"endColumn":33},{"ruleId":"1594","severity":1,"message":"1633","line":5,"column":8,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":18},{"ruleId":"1634","severity":1,"message":"1635","line":24,"column":8,"nodeType":"1636","endLine":24,"endColumn":20,"suggestions":"1637"},{"ruleId":"1594","severity":1,"message":"1638","line":24,"column":9,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":17},{"ruleId":"1594","severity":1,"message":"1639","line":24,"column":19,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1640","line":54,"column":9,"nodeType":"1596","messageId":"1597","endLine":54,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1641","line":62,"column":9,"nodeType":"1596","messageId":"1597","endLine":62,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1642","line":5,"column":9,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1643","line":13,"column":52,"nodeType":"1596","messageId":"1597","endLine":13,"endColumn":63},{"ruleId":"1634","severity":1,"message":"1635","line":23,"column":8,"nodeType":"1636","endLine":23,"endColumn":29,"suggestions":"1644"},{"ruleId":"1594","severity":1,"message":"1645","line":19,"column":42,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":49},{"ruleId":"1594","severity":1,"message":"1646","line":26,"column":12,"nodeType":"1596","messageId":"1597","endLine":26,"endColumn":24},{"ruleId":"1594","severity":1,"message":"1647","line":26,"column":26,"nodeType":"1596","messageId":"1597","endLine":26,"endColumn":41},{"ruleId":"1634","severity":1,"message":"1635","line":34,"column":8,"nodeType":"1636","endLine":34,"endColumn":23,"suggestions":"1648"},{"ruleId":"1634","severity":1,"message":"1635","line":22,"column":8,"nodeType":"1636","endLine":22,"endColumn":28,"suggestions":"1649"},{"ruleId":"1634","severity":1,"message":"1650","line":21,"column":8,"nodeType":"1636","endLine":21,"endColumn":21,"suggestions":"1651"},{"ruleId":"1594","severity":1,"message":"1652","line":54,"column":12,"nodeType":"1596","messageId":"1597","endLine":54,"endColumn":27},{"ruleId":"1594","severity":1,"message":"1653","line":54,"column":29,"nodeType":"1596","messageId":"1597","endLine":54,"endColumn":47},{"ruleId":"1594","severity":1,"message":"1654","line":55,"column":12,"nodeType":"1596","messageId":"1597","endLine":55,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1655","line":55,"column":25,"nodeType":"1596","messageId":"1597","endLine":55,"endColumn":39},{"ruleId":"1634","severity":1,"message":"1656","line":72,"column":8,"nodeType":"1636","endLine":72,"endColumn":22,"suggestions":"1657"},{"ruleId":"1634","severity":1,"message":"1658","line":80,"column":8,"nodeType":"1636","endLine":80,"endColumn":24,"suggestions":"1659"},{"ruleId":"1634","severity":1,"message":"1660","line":100,"column":8,"nodeType":"1636","endLine":100,"endColumn":17,"suggestions":"1661"},{"ruleId":"1634","severity":1,"message":"1662","line":121,"column":8,"nodeType":"1636","endLine":121,"endColumn":15,"suggestions":"1663"},{"ruleId":"1634","severity":1,"message":"1664","line":145,"column":8,"nodeType":"1636","endLine":145,"endColumn":29,"suggestions":"1665"},{"ruleId":"1666","severity":1,"message":"1667","line":307,"column":86,"nodeType":"1668","messageId":"1669","endLine":307,"endColumn":88},{"ruleId":"1666","severity":1,"message":"1667","line":307,"column":131,"nodeType":"1668","messageId":"1669","endLine":307,"endColumn":133},{"ruleId":"1594","severity":1,"message":"1670","line":2,"column":47,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":54},{"ruleId":"1594","severity":1,"message":"1671","line":3,"column":17,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":24},{"ruleId":"1594","severity":1,"message":"1672","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1673","line":5,"column":21,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":25},{"ruleId":"1634","severity":1,"message":"1674","line":29,"column":8,"nodeType":"1636","endLine":29,"endColumn":25,"suggestions":"1675"},{"ruleId":"1634","severity":1,"message":"1660","line":39,"column":8,"nodeType":"1636","endLine":39,"endColumn":22,"suggestions":"1676"},{"ruleId":"1634","severity":1,"message":"1650","line":25,"column":8,"nodeType":"1636","endLine":25,"endColumn":21,"suggestions":"1677"},{"ruleId":"1634","severity":1,"message":"1660","line":32,"column":8,"nodeType":"1636","endLine":32,"endColumn":18,"suggestions":"1678"},{"ruleId":"1594","severity":1,"message":"1679","line":22,"column":12,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":17},{"ruleId":"1634","severity":1,"message":"1650","line":31,"column":8,"nodeType":"1636","endLine":31,"endColumn":17,"suggestions":"1680"},{"ruleId":"1634","severity":1,"message":"1660","line":41,"column":8,"nodeType":"1636","endLine":41,"endColumn":14,"suggestions":"1681"},{"ruleId":"1594","severity":1,"message":"1670","line":2,"column":47,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":54},{"ruleId":"1594","severity":1,"message":"1671","line":3,"column":17,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":24},{"ruleId":"1594","severity":1,"message":"1672","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1673","line":5,"column":21,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":25},{"ruleId":"1634","severity":1,"message":"1650","line":25,"column":8,"nodeType":"1636","endLine":25,"endColumn":18,"suggestions":"1682"},{"ruleId":"1634","severity":1,"message":"1660","line":32,"column":8,"nodeType":"1636","endLine":32,"endColumn":16,"suggestions":"1683"},{"ruleId":"1634","severity":1,"message":"1684","line":34,"column":8,"nodeType":"1636","endLine":34,"endColumn":23,"suggestions":"1685"},{"ruleId":"1634","severity":1,"message":"1686","line":42,"column":8,"nodeType":"1636","endLine":42,"endColumn":18,"suggestions":"1687"},{"ruleId":"1634","severity":1,"message":"1688","line":51,"column":8,"nodeType":"1636","endLine":51,"endColumn":19,"suggestions":"1689"},{"ruleId":"1634","severity":1,"message":"1660","line":72,"column":8,"nodeType":"1636","endLine":72,"endColumn":16,"suggestions":"1690"},{"ruleId":"1634","severity":1,"message":"1691","line":79,"column":8,"nodeType":"1636","endLine":79,"endColumn":30,"suggestions":"1692"},{"ruleId":"1634","severity":1,"message":"1693","line":88,"column":8,"nodeType":"1636","endLine":88,"endColumn":16,"suggestions":"1694"},{"ruleId":"1634","severity":1,"message":"1695","line":92,"column":8,"nodeType":"1636","endLine":92,"endColumn":32,"suggestions":"1696"},{"ruleId":"1697","severity":1,"message":"1698","line":135,"column":28,"nodeType":"1699","messageId":"1700","endLine":135,"endColumn":54,"fix":"1701"},{"ruleId":"1697","severity":1,"message":"1698","line":141,"column":32,"nodeType":"1699","messageId":"1700","endLine":141,"endColumn":58,"fix":"1702"},{"ruleId":"1697","severity":1,"message":"1698","line":194,"column":28,"nodeType":"1699","messageId":"1700","endLine":194,"endColumn":54,"fix":"1703"},{"ruleId":"1594","severity":1,"message":"1704","line":220,"column":11,"nodeType":"1596","messageId":"1597","endLine":220,"endColumn":22},{"ruleId":"1634","severity":1,"message":"1705","line":29,"column":8,"nodeType":"1636","endLine":29,"endColumn":23,"suggestions":"1706"},{"ruleId":"1634","severity":1,"message":"1650","line":26,"column":8,"nodeType":"1636","endLine":26,"endColumn":22,"suggestions":"1707"},{"ruleId":"1634","severity":1,"message":"1660","line":32,"column":8,"nodeType":"1636","endLine":32,"endColumn":17,"suggestions":"1708"},{"ruleId":"1666","severity":1,"message":"1709","line":164,"column":107,"nodeType":"1668","messageId":"1669","endLine":164,"endColumn":109},{"ruleId":"1594","severity":1,"message":"1645","line":9,"column":12,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1710","line":11,"column":12,"nodeType":"1596","messageId":"1597","endLine":11,"endColumn":20},{"ruleId":"1697","severity":1,"message":"1698","line":50,"column":24,"nodeType":"1699","messageId":"1700","endLine":50,"endColumn":50,"fix":"1711"},{"ruleId":"1594","severity":1,"message":"1712","line":3,"column":32,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":51},{"ruleId":"1594","severity":1,"message":"1713","line":5,"column":9,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1714","line":19,"column":12,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":16},{"ruleId":"1634","severity":1,"message":"1715","line":27,"column":8,"nodeType":"1636","endLine":27,"endColumn":18,"suggestions":"1716"},{"ruleId":"1634","severity":1,"message":"1717","line":35,"column":8,"nodeType":"1636","endLine":35,"endColumn":30,"suggestions":"1718"},{"ruleId":"1634","severity":1,"message":"1719","line":35,"column":9,"nodeType":"1720","endLine":35,"endColumn":29},{"ruleId":"1697","severity":1,"message":"1698","line":9,"column":24,"nodeType":"1699","messageId":"1700","endLine":9,"endColumn":50,"fix":"1721"},{"ruleId":"1697","severity":1,"message":"1698","line":40,"column":24,"nodeType":"1699","messageId":"1700","endLine":40,"endColumn":50,"fix":"1722"},{"ruleId":"1697","severity":1,"message":"1698","line":79,"column":24,"nodeType":"1699","messageId":"1700","endLine":79,"endColumn":50,"fix":"1723"},{"ruleId":"1697","severity":1,"message":"1698","line":92,"column":24,"nodeType":"1699","messageId":"1700","endLine":92,"endColumn":50,"fix":"1724"},{"ruleId":"1697","severity":1,"message":"1698","line":98,"column":24,"nodeType":"1699","messageId":"1700","endLine":98,"endColumn":50,"fix":"1725"},{"ruleId":"1697","severity":1,"message":"1698","line":117,"column":24,"nodeType":"1699","messageId":"1700","endLine":117,"endColumn":50,"fix":"1726"},{"ruleId":"1697","severity":1,"message":"1698","line":128,"column":24,"nodeType":"1699","messageId":"1700","endLine":128,"endColumn":50,"fix":"1727"},{"ruleId":"1634","severity":1,"message":"1728","line":46,"column":8,"nodeType":"1636","endLine":46,"endColumn":17,"suggestions":"1729"},{"ruleId":"1634","severity":1,"message":"1730","line":53,"column":8,"nodeType":"1636","endLine":53,"endColumn":26,"suggestions":"1731"},{"ruleId":"1634","severity":1,"message":"1732","line":59,"column":8,"nodeType":"1636","endLine":59,"endColumn":22,"suggestions":"1733"},{"ruleId":"1634","severity":1,"message":"1734","line":67,"column":8,"nodeType":"1636","endLine":67,"endColumn":21,"suggestions":"1735"},{"ruleId":"1594","severity":1,"message":"1736","line":115,"column":11,"nodeType":"1596","messageId":"1597","endLine":115,"endColumn":31},{"ruleId":"1594","severity":1,"message":"1737","line":2,"column":8,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1738","line":3,"column":9,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":17},{"ruleId":"1594","severity":1,"message":"1670","line":3,"column":36,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":43},{"ruleId":"1594","severity":1,"message":"1739","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":20},{"ruleId":"1594","severity":1,"message":"1740","line":4,"column":22,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":33},{"ruleId":"1594","severity":1,"message":"1741","line":4,"column":48,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":57},{"ruleId":"1594","severity":1,"message":"1742","line":8,"column":9,"nodeType":"1596","messageId":"1597","endLine":8,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1672","line":9,"column":9,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1743","line":15,"column":25,"nodeType":"1596","messageId":"1597","endLine":15,"endColumn":39},{"ruleId":"1634","severity":1,"message":"1744","line":21,"column":8,"nodeType":"1636","endLine":21,"endColumn":17,"suggestions":"1745"},{"ruleId":"1594","severity":1,"message":"1738","line":3,"column":15,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1670","line":3,"column":35,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":42},{"ruleId":"1594","severity":1,"message":"1672","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1746","line":21,"column":21,"nodeType":"1596","messageId":"1597","endLine":21,"endColumn":38},{"ruleId":"1594","severity":1,"message":"1747","line":21,"column":55,"nodeType":"1596","messageId":"1597","endLine":21,"endColumn":62},{"ruleId":"1594","severity":1,"message":"1748","line":22,"column":12,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":28},{"ruleId":"1594","severity":1,"message":"1749","line":24,"column":12,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":30},{"ruleId":"1594","severity":1,"message":"1750","line":24,"column":32,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":53},{"ruleId":"1697","severity":1,"message":"1698","line":25,"column":24,"nodeType":"1699","messageId":"1700","endLine":25,"endColumn":50,"fix":"1751"},{"ruleId":"1697","severity":1,"message":"1698","line":31,"column":24,"nodeType":"1699","messageId":"1700","endLine":31,"endColumn":50,"fix":"1752"},{"ruleId":"1697","severity":1,"message":"1698","line":41,"column":24,"nodeType":"1699","messageId":"1700","endLine":41,"endColumn":50,"fix":"1753"},{"ruleId":"1697","severity":1,"message":"1698","line":35,"column":24,"nodeType":"1699","messageId":"1700","endLine":35,"endColumn":50,"fix":"1754"},{"ruleId":"1697","severity":1,"message":"1698","line":40,"column":24,"nodeType":"1699","messageId":"1700","endLine":40,"endColumn":50,"fix":"1755"},{"ruleId":"1634","severity":1,"message":"1756","line":29,"column":8,"nodeType":"1636","endLine":29,"endColumn":38,"suggestions":"1757"},{"ruleId":"1634","severity":1,"message":"1758","line":40,"column":8,"nodeType":"1636","endLine":40,"endColumn":21,"suggestions":"1759"},{"ruleId":"1634","severity":1,"message":"1760","line":50,"column":8,"nodeType":"1636","endLine":50,"endColumn":18,"suggestions":"1761"},{"ruleId":"1634","severity":1,"message":"1762","line":61,"column":8,"nodeType":"1636","endLine":61,"endColumn":38,"suggestions":"1763"},{"ruleId":"1634","severity":1,"message":"1764","line":78,"column":8,"nodeType":"1636","endLine":78,"endColumn":22,"suggestions":"1765"},{"ruleId":"1634","severity":1,"message":"1766","line":86,"column":8,"nodeType":"1636","endLine":86,"endColumn":24,"suggestions":"1767"},{"ruleId":"1634","severity":1,"message":"1768","line":93,"column":8,"nodeType":"1636","endLine":93,"endColumn":25,"suggestions":"1769"},{"ruleId":"1634","severity":1,"message":"1770","line":103,"column":8,"nodeType":"1636","endLine":103,"endColumn":23,"suggestions":"1771"},{"ruleId":"1634","severity":1,"message":"1772","line":107,"column":8,"nodeType":"1636","endLine":107,"endColumn":91,"suggestions":"1773"},{"ruleId":"1634","severity":1,"message":"1774","line":111,"column":8,"nodeType":"1636","endLine":111,"endColumn":22,"suggestions":"1775"},{"ruleId":"1634","severity":1,"message":"1776","line":131,"column":8,"nodeType":"1636","endLine":131,"endColumn":29,"suggestions":"1777"},{"ruleId":"1778","severity":1,"message":"1779","line":9,"column":43,"nodeType":"1780","messageId":"1781","endLine":9,"endColumn":45},{"ruleId":"1666","severity":1,"message":"1709","line":10,"column":21,"nodeType":"1668","messageId":"1669","endLine":10,"endColumn":23},{"ruleId":"1697","severity":1,"message":"1698","line":55,"column":24,"nodeType":"1699","messageId":"1700","endLine":55,"endColumn":50,"fix":"1782"},{"ruleId":"1594","severity":1,"message":"1783","line":77,"column":196,"nodeType":"1596","messageId":"1597","endLine":77,"endColumn":204},{"ruleId":"1594","severity":1,"message":"1784","line":3,"column":8,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1785","line":20,"column":7,"nodeType":"1596","messageId":"1597","endLine":20,"endColumn":11},{"ruleId":"1594","severity":1,"message":"1645","line":34,"column":60,"nodeType":"1596","messageId":"1597","endLine":34,"endColumn":67},{"ruleId":"1634","severity":1,"message":"1786","line":48,"column":8,"nodeType":"1636","endLine":48,"endColumn":17,"suggestions":"1787"},{"ruleId":"1594","severity":1,"message":"1788","line":72,"column":11,"nodeType":"1596","messageId":"1597","endLine":72,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1789","line":19,"column":9,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1790","line":22,"column":12,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":18},{"ruleId":"1594","severity":1,"message":"1791","line":22,"column":29,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":33},{"ruleId":"1594","severity":1,"message":"1792","line":22,"column":35,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":44},{"ruleId":"1594","severity":1,"message":"1645","line":22,"column":76,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":83},{"ruleId":"1594","severity":1,"message":"1793","line":32,"column":12,"nodeType":"1596","messageId":"1597","endLine":32,"endColumn":21},{"ruleId":"1634","severity":1,"message":"1794","line":36,"column":8,"nodeType":"1636","endLine":36,"endColumn":17,"suggestions":"1795"},{"ruleId":"1634","severity":1,"message":"1796","line":42,"column":8,"nodeType":"1636","endLine":42,"endColumn":22,"suggestions":"1797"},{"ruleId":"1594","severity":1,"message":"1798","line":71,"column":9,"nodeType":"1596","messageId":"1597","endLine":71,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1799","line":20,"column":9,"nodeType":"1596","messageId":"1597","endLine":20,"endColumn":20},{"ruleId":"1594","severity":1,"message":"1790","line":23,"column":12,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":18},{"ruleId":"1594","severity":1,"message":"1791","line":23,"column":27,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":31},{"ruleId":"1594","severity":1,"message":"1792","line":23,"column":33,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":42},{"ruleId":"1594","severity":1,"message":"1645","line":23,"column":69,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":76},{"ruleId":"1634","severity":1,"message":"1800","line":37,"column":8,"nodeType":"1636","endLine":37,"endColumn":17,"suggestions":"1801"},{"ruleId":"1634","severity":1,"message":"1802","line":43,"column":8,"nodeType":"1636","endLine":43,"endColumn":20,"suggestions":"1803"},{"ruleId":"1697","severity":1,"message":"1698","line":73,"column":28,"nodeType":"1699","messageId":"1700","endLine":73,"endColumn":54,"fix":"1804"},{"ruleId":"1594","severity":1,"message":"1791","line":19,"column":23,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":27},{"ruleId":"1594","severity":1,"message":"1645","line":19,"column":77,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":84},{"ruleId":"1594","severity":1,"message":"1793","line":29,"column":12,"nodeType":"1596","messageId":"1597","endLine":29,"endColumn":21},{"ruleId":"1634","severity":1,"message":"1805","line":33,"column":8,"nodeType":"1636","endLine":33,"endColumn":17,"suggestions":"1806"},{"ruleId":"1634","severity":1,"message":"1807","line":38,"column":8,"nodeType":"1636","endLine":38,"endColumn":24,"suggestions":"1808"},{"ruleId":"1594","severity":1,"message":"1645","line":23,"column":39,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":46},{"ruleId":"1634","severity":1,"message":"1809","line":40,"column":8,"nodeType":"1636","endLine":40,"endColumn":17,"suggestions":"1810"},{"ruleId":"1634","severity":1,"message":"1811","line":47,"column":8,"nodeType":"1636","endLine":47,"endColumn":21,"suggestions":"1812"},{"ruleId":"1634","severity":1,"message":"1813","line":55,"column":8,"nodeType":"1636","endLine":55,"endColumn":22,"suggestions":"1814"},{"ruleId":"1634","severity":1,"message":"1815","line":38,"column":8,"nodeType":"1636","endLine":38,"endColumn":17,"suggestions":"1816"},{"ruleId":"1634","severity":1,"message":"1817","line":43,"column":8,"nodeType":"1636","endLine":43,"endColumn":20,"suggestions":"1818"},{"ruleId":"1594","severity":1,"message":"1790","line":19,"column":12,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":18},{"ruleId":"1594","severity":1,"message":"1791","line":19,"column":36,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":40},{"ruleId":"1594","severity":1,"message":"1645","line":19,"column":113,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":120},{"ruleId":"1594","severity":1,"message":"1793","line":29,"column":12,"nodeType":"1596","messageId":"1597","endLine":29,"endColumn":21},{"ruleId":"1634","severity":1,"message":"1819","line":33,"column":8,"nodeType":"1636","endLine":33,"endColumn":17,"suggestions":"1820"},{"ruleId":"1634","severity":1,"message":"1821","line":39,"column":8,"nodeType":"1636","endLine":39,"endColumn":29,"suggestions":"1822"},{"ruleId":"1594","severity":1,"message":"1645","line":20,"column":71,"nodeType":"1596","messageId":"1597","endLine":20,"endColumn":78},{"ruleId":"1594","severity":1,"message":"1793","line":31,"column":12,"nodeType":"1596","messageId":"1597","endLine":31,"endColumn":21},{"ruleId":"1634","severity":1,"message":"1823","line":35,"column":8,"nodeType":"1636","endLine":35,"endColumn":17,"suggestions":"1824"},{"ruleId":"1634","severity":1,"message":"1825","line":40,"column":8,"nodeType":"1636","endLine":40,"endColumn":21,"suggestions":"1826"},{"ruleId":"1634","severity":1,"message":"1827","line":45,"column":8,"nodeType":"1636","endLine":45,"endColumn":17,"suggestions":"1828"},{"ruleId":"1634","severity":1,"message":"1829","line":51,"column":8,"nodeType":"1636","endLine":51,"endColumn":25,"suggestions":"1830"},{"ruleId":"1594","severity":1,"message":"1831","line":22,"column":7,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1832","line":24,"column":7,"nodeType":"1596","messageId":"1597","endLine":24,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1833","line":52,"column":7,"nodeType":"1596","messageId":"1597","endLine":52,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1834","line":54,"column":7,"nodeType":"1596","messageId":"1597","endLine":54,"endColumn":15},{"ruleId":"1634","severity":1,"message":"1835","line":159,"column":8,"nodeType":"1636","endLine":159,"endColumn":17,"suggestions":"1836"},{"ruleId":"1634","severity":1,"message":"1837","line":164,"column":8,"nodeType":"1636","endLine":164,"endColumn":23,"suggestions":"1838"},{"ruleId":"1697","severity":1,"message":"1698","line":21,"column":24,"nodeType":"1699","messageId":"1700","endLine":21,"endColumn":50,"fix":"1839"},{"ruleId":"1634","severity":1,"message":"1840","line":27,"column":8,"nodeType":"1636","endLine":27,"endColumn":25,"suggestions":"1841"},{"ruleId":"1634","severity":1,"message":"1842","line":33,"column":8,"nodeType":"1636","endLine":33,"endColumn":17,"suggestions":"1843"},{"ruleId":"1634","severity":1,"message":"1844","line":33,"column":8,"nodeType":"1636","endLine":33,"endColumn":21,"suggestions":"1845"},{"ruleId":"1697","severity":1,"message":"1698","line":79,"column":32,"nodeType":"1699","messageId":"1700","endLine":79,"endColumn":58,"fix":"1846"},{"ruleId":"1634","severity":1,"message":"1847","line":83,"column":8,"nodeType":"1636","endLine":83,"endColumn":15,"suggestions":"1848"},{"ruleId":"1594","severity":1,"message":"1849","line":7,"column":9,"nodeType":"1596","messageId":"1597","endLine":7,"endColumn":22},{"ruleId":"1634","severity":1,"message":"1840","line":27,"column":8,"nodeType":"1636","endLine":27,"endColumn":25,"suggestions":"1850"},{"ruleId":"1634","severity":1,"message":"1842","line":33,"column":8,"nodeType":"1636","endLine":33,"endColumn":17,"suggestions":"1851"},{"ruleId":"1634","severity":1,"message":"1852","line":28,"column":8,"nodeType":"1636","endLine":28,"endColumn":25,"suggestions":"1853"},{"ruleId":"1634","severity":1,"message":"1842","line":44,"column":8,"nodeType":"1636","endLine":44,"endColumn":17,"suggestions":"1854"},{"ruleId":"1634","severity":1,"message":"1855","line":31,"column":8,"nodeType":"1636","endLine":31,"endColumn":14,"suggestions":"1856"},{"ruleId":"1634","severity":1,"message":"1857","line":37,"column":8,"nodeType":"1636","endLine":37,"endColumn":25,"suggestions":"1858"},{"ruleId":"1634","severity":1,"message":"1859","line":13,"column":8,"nodeType":"1636","endLine":13,"endColumn":17,"suggestions":"1860"},{"ruleId":"1594","severity":1,"message":"1849","line":7,"column":21,"nodeType":"1596","messageId":"1597","endLine":7,"endColumn":34},{"ruleId":"1594","severity":1,"message":"1861","line":1,"column":16,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1862","line":1,"column":27,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":35},{"ruleId":"1594","severity":1,"message":"1784","line":3,"column":8,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":14},{"ruleId":"1594","severity":1,"message":"1863","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":20},{"ruleId":"1594","severity":1,"message":"1864","line":5,"column":8,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":16},{"ruleId":"1594","severity":1,"message":"1865","line":6,"column":9,"nodeType":"1596","messageId":"1597","endLine":6,"endColumn":17},{"ruleId":"1594","severity":1,"message":"1866","line":6,"column":19,"nodeType":"1596","messageId":"1597","endLine":6,"endColumn":28},{"ruleId":"1594","severity":1,"message":"1867","line":9,"column":8,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":29},{"ruleId":"1594","severity":1,"message":"1868","line":10,"column":9,"nodeType":"1596","messageId":"1597","endLine":10,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1869","line":7,"column":36,"nodeType":"1596","messageId":"1597","endLine":7,"endColumn":51},{"ruleId":"1594","severity":1,"message":"1870","line":48,"column":39,"nodeType":"1596","messageId":"1597","endLine":48,"endColumn":47},{"ruleId":"1594","severity":1,"message":"1861","line":1,"column":16,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":25},{"ruleId":"1594","severity":1,"message":"1862","line":1,"column":27,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":35},{"ruleId":"1594","severity":1,"message":"1870","line":43,"column":43,"nodeType":"1596","messageId":"1597","endLine":43,"endColumn":51},{"ruleId":"1697","severity":1,"message":"1698","line":35,"column":32,"nodeType":"1699","messageId":"1700","endLine":35,"endColumn":58,"fix":"1871"},{"ruleId":"1697","severity":1,"message":"1698","line":133,"column":28,"nodeType":"1699","messageId":"1700","endLine":133,"endColumn":54,"fix":"1872"},{"ruleId":"1634","severity":1,"message":"1873","line":78,"column":8,"nodeType":"1636","endLine":78,"endColumn":21,"suggestions":"1874"},{"ruleId":"1634","severity":1,"message":"1873","line":136,"column":8,"nodeType":"1636","endLine":136,"endColumn":21,"suggestions":"1875"},{"ruleId":"1594","severity":1,"message":"1737","line":2,"column":8,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1876","line":3,"column":9,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":13},{"ruleId":"1594","severity":1,"message":"1738","line":3,"column":15,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1877","line":4,"column":8,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1878","line":5,"column":8,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":15},{"ruleId":"1634","severity":1,"message":"1879","line":88,"column":8,"nodeType":"1636","endLine":88,"endColumn":21,"suggestions":"1880"},{"ruleId":"1594","severity":1,"message":"1737","line":2,"column":8,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1876","line":3,"column":9,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":13},{"ruleId":"1594","severity":1,"message":"1738","line":3,"column":15,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1877","line":4,"column":8,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1878","line":5,"column":8,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":15},{"ruleId":"1634","severity":1,"message":"1879","line":82,"column":8,"nodeType":"1636","endLine":82,"endColumn":20,"suggestions":"1881"},{"ruleId":"1882","severity":1,"message":"1883","line":1,"column":1,"nodeType":"1884","endLine":8,"endColumn":3},{"ruleId":"1594","severity":1,"message":"1737","line":2,"column":8,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1849","line":7,"column":9,"nodeType":"1596","messageId":"1597","endLine":7,"endColumn":22},{"ruleId":"1634","severity":1,"message":"1842","line":29,"column":8,"nodeType":"1636","endLine":29,"endColumn":17,"suggestions":"1885"},{"ruleId":"1594","severity":1,"message":"1886","line":19,"column":12,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":23},{"ruleId":"1634","severity":1,"message":"1887","line":25,"column":8,"nodeType":"1636","endLine":25,"endColumn":34,"suggestions":"1888"},{"ruleId":"1697","severity":1,"message":"1698","line":30,"column":28,"nodeType":"1699","messageId":"1700","endLine":30,"endColumn":54,"fix":"1889"},{"ruleId":"1594","severity":1,"message":"1713","line":5,"column":9,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":21},{"ruleId":"1634","severity":1,"message":"1890","line":54,"column":8,"nodeType":"1636","endLine":54,"endColumn":15,"suggestions":"1891"},{"ruleId":"1634","severity":1,"message":"1892","line":67,"column":8,"nodeType":"1636","endLine":67,"endColumn":29,"suggestions":"1893"},{"ruleId":"1666","severity":1,"message":"1667","line":72,"column":49,"nodeType":"1668","messageId":"1669","endLine":72,"endColumn":51},{"ruleId":"1697","severity":1,"message":"1698","line":88,"column":32,"nodeType":"1699","messageId":"1700","endLine":88,"endColumn":58,"fix":"1894"},{"ruleId":"1895","severity":1,"message":"1896","line":281,"column":49,"nodeType":"1897","endLine":281,"endColumn":136},{"ruleId":"1895","severity":1,"message":"1896","line":323,"column":53,"nodeType":"1897","endLine":323,"endColumn":125},{"ruleId":"1594","severity":1,"message":"1898","line":2,"column":14,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1899","line":36,"column":12,"nodeType":"1596","messageId":"1597","endLine":36,"endColumn":23},{"ruleId":"1634","severity":1,"message":"1900","line":55,"column":8,"nodeType":"1636","endLine":55,"endColumn":26,"suggestions":"1901"},{"ruleId":"1634","severity":1,"message":"1902","line":113,"column":8,"nodeType":"1636","endLine":113,"endColumn":15,"suggestions":"1903"},{"ruleId":"1594","severity":1,"message":"1904","line":287,"column":11,"nodeType":"1596","messageId":"1597","endLine":287,"endColumn":29},{"ruleId":"1594","severity":1,"message":"1905","line":14,"column":31,"nodeType":"1596","messageId":"1597","endLine":14,"endColumn":48},{"ruleId":"1594","severity":1,"message":"1906","line":14,"column":50,"nodeType":"1596","messageId":"1597","endLine":14,"endColumn":62},{"ruleId":"1594","severity":1,"message":"1747","line":14,"column":64,"nodeType":"1596","messageId":"1597","endLine":14,"endColumn":71},{"ruleId":"1634","severity":1,"message":"1907","line":28,"column":8,"nodeType":"1636","endLine":28,"endColumn":17,"suggestions":"1908"},{"ruleId":"1634","severity":1,"message":"1909","line":32,"column":8,"nodeType":"1636","endLine":32,"endColumn":26,"suggestions":"1910"},{"ruleId":"1594","severity":1,"message":"1911","line":61,"column":11,"nodeType":"1596","messageId":"1597","endLine":61,"endColumn":28},{"ruleId":"1778","severity":1,"message":"1912","line":68,"column":35,"nodeType":"1780","messageId":"1913","endLine":68,"endColumn":37},{"ruleId":"1778","severity":1,"message":"1912","line":81,"column":47,"nodeType":"1780","messageId":"1913","endLine":81,"endColumn":49},{"ruleId":"1697","severity":1,"message":"1698","line":245,"column":28,"nodeType":"1699","messageId":"1700","endLine":245,"endColumn":54,"fix":"1914"},{"ruleId":"1594","severity":1,"message":"1915","line":1,"column":8,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":13},{"ruleId":"1916","severity":1,"message":"1917","line":12,"column":13,"nodeType":"1918","messageId":"1919","endLine":12,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1920","line":7,"column":9,"nodeType":"1596","messageId":"1597","endLine":7,"endColumn":12},{"ruleId":"1594","severity":1,"message":"1921","line":17,"column":12,"nodeType":"1596","messageId":"1597","endLine":17,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1922","line":17,"column":37,"nodeType":"1596","messageId":"1597","endLine":17,"endColumn":42},{"ruleId":"1594","severity":1,"message":"1923","line":17,"column":52,"nodeType":"1596","messageId":"1597","endLine":17,"endColumn":61},{"ruleId":"1594","severity":1,"message":"1924","line":19,"column":12,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":29},{"ruleId":"1594","severity":1,"message":"1925","line":19,"column":31,"nodeType":"1596","messageId":"1597","endLine":19,"endColumn":51},{"ruleId":"1697","severity":1,"message":"1698","line":23,"column":32,"nodeType":"1699","messageId":"1700","endLine":23,"endColumn":58,"fix":"1926"},{"ruleId":"1634","severity":1,"message":"1927","line":27,"column":8,"nodeType":"1636","endLine":27,"endColumn":20,"suggestions":"1928"},{"ruleId":"1594","severity":1,"message":"1929","line":97,"column":22,"nodeType":"1596","messageId":"1597","endLine":97,"endColumn":29},{"ruleId":"1634","severity":1,"message":"1930","line":18,"column":8,"nodeType":"1636","endLine":18,"endColumn":17,"suggestions":"1931"},{"ruleId":"1594","severity":1,"message":"1932","line":8,"column":8,"nodeType":"1596","messageId":"1597","endLine":8,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1933","line":9,"column":8,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1934","line":10,"column":8,"nodeType":"1596","messageId":"1597","endLine":10,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1935","line":11,"column":8,"nodeType":"1596","messageId":"1597","endLine":11,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1936","line":12,"column":8,"nodeType":"1596","messageId":"1597","endLine":12,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1791","line":18,"column":19,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":23},{"ruleId":"1594","severity":1,"message":"1645","line":18,"column":37,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":44},{"ruleId":"1594","severity":1,"message":"1747","line":18,"column":46,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":53},{"ruleId":"1594","severity":1,"message":"1937","line":2,"column":44,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":49},{"ruleId":"1594","severity":1,"message":"1938","line":2,"column":51,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":56},{"ruleId":"1594","severity":1,"message":"1876","line":3,"column":15,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":19},{"ruleId":"1594","severity":1,"message":"1738","line":3,"column":21,"nodeType":"1596","messageId":"1597","endLine":3,"endColumn":29},{"ruleId":"1594","severity":1,"message":"1878","line":4,"column":8,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1877","line":5,"column":8,"nodeType":"1596","messageId":"1597","endLine":5,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1939","line":18,"column":50,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":73},{"ruleId":"1594","severity":1,"message":"1940","line":18,"column":75,"nodeType":"1596","messageId":"1597","endLine":18,"endColumn":103},{"ruleId":"1594","severity":1,"message":"1877","line":22,"column":8,"nodeType":"1596","messageId":"1597","endLine":22,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1941","line":23,"column":9,"nodeType":"1596","messageId":"1597","endLine":23,"endColumn":21},{"ruleId":"1634","severity":1,"message":"1942","line":47,"column":8,"nodeType":"1636","endLine":47,"endColumn":17,"suggestions":"1943"},{"ruleId":"1634","severity":1,"message":"1944","line":53,"column":8,"nodeType":"1636","endLine":53,"endColumn":24,"suggestions":"1945"},{"ruleId":"1594","severity":1,"message":"1932","line":9,"column":8,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1946","line":10,"column":8,"nodeType":"1596","messageId":"1597","endLine":10,"endColumn":20},{"ruleId":"1697","severity":1,"message":"1698","line":33,"column":32,"nodeType":"1699","messageId":"1700","endLine":33,"endColumn":58,"fix":"1947"},{"ruleId":"1697","severity":1,"message":"1698","line":72,"column":28,"nodeType":"1699","messageId":"1700","endLine":72,"endColumn":54,"fix":"1948"},{"ruleId":"1594","severity":1,"message":"1672","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1949","line":2,"column":9,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":15},{"ruleId":"1594","severity":1,"message":"1876","line":4,"column":17,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":21},{"ruleId":"1594","severity":1,"message":"1950","line":4,"column":23,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":30},{"ruleId":"1594","severity":1,"message":"1951","line":8,"column":8,"nodeType":"1596","messageId":"1597","endLine":8,"endColumn":26},{"ruleId":"1594","severity":1,"message":"1946","line":9,"column":8,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":20},{"ruleId":"1594","severity":1,"message":"1952","line":10,"column":9,"nodeType":"1596","messageId":"1597","endLine":10,"endColumn":32},{"ruleId":"1594","severity":1,"message":"1953","line":11,"column":26,"nodeType":"1596","messageId":"1597","endLine":11,"endColumn":35},{"ruleId":"1594","severity":1,"message":"1954","line":12,"column":9,"nodeType":"1596","messageId":"1597","endLine":12,"endColumn":22},{"ruleId":"1594","severity":1,"message":"1955","line":12,"column":24,"nodeType":"1596","messageId":"1597","endLine":12,"endColumn":43},{"ruleId":"1594","severity":1,"message":"1956","line":12,"column":45,"nodeType":"1596","messageId":"1597","endLine":12,"endColumn":60},{"ruleId":"1594","severity":1,"message":"1957","line":13,"column":9,"nodeType":"1596","messageId":"1597","endLine":13,"endColumn":31},{"ruleId":"1594","severity":1,"message":"1958","line":14,"column":8,"nodeType":"1596","messageId":"1597","endLine":14,"endColumn":13},{"ruleId":"1594","severity":1,"message":"1959","line":15,"column":9,"nodeType":"1596","messageId":"1597","endLine":15,"endColumn":28},{"ruleId":"1634","severity":1,"message":"1960","line":27,"column":8,"nodeType":"1636","endLine":27,"endColumn":33,"suggestions":"1961"},{"ruleId":"1594","severity":1,"message":"1862","line":1,"column":27,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":35},{"ruleId":"1634","severity":1,"message":"1962","line":35,"column":8,"nodeType":"1636","endLine":35,"endColumn":15,"suggestions":"1963"},{"ruleId":"1634","severity":1,"message":"1964","line":30,"column":8,"nodeType":"1636","endLine":30,"endColumn":17,"suggestions":"1965"},{"ruleId":"1634","severity":1,"message":"1966","line":36,"column":8,"nodeType":"1636","endLine":36,"endColumn":26,"suggestions":"1967"},{"ruleId":"1594","severity":1,"message":"1968","line":4,"column":9,"nodeType":"1596","messageId":"1597","endLine":4,"endColumn":21},{"ruleId":"1697","severity":1,"message":"1698","line":37,"column":24,"nodeType":"1699","messageId":"1700","endLine":37,"endColumn":50,"fix":"1969"},{"ruleId":"1634","severity":1,"message":"1650","line":21,"column":8,"nodeType":"1636","endLine":21,"endColumn":23,"suggestions":"1970"},{"ruleId":"1594","severity":1,"message":"1971","line":9,"column":9,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":26},{"ruleId":"1594","severity":1,"message":"1972","line":9,"column":28,"nodeType":"1596","messageId":"1597","endLine":9,"endColumn":37},{"ruleId":"1634","severity":1,"message":"1635","line":23,"column":8,"nodeType":"1636","endLine":23,"endColumn":23,"suggestions":"1973"},{"ruleId":"1634","severity":1,"message":"1842","line":28,"column":8,"nodeType":"1636","endLine":28,"endColumn":17,"suggestions":"1974"},{"ruleId":"1634","severity":1,"message":"1975","line":34,"column":8,"nodeType":"1636","endLine":34,"endColumn":24,"suggestions":"1976"},{"ruleId":"1697","severity":1,"message":"1698","line":99,"column":28,"nodeType":"1699","messageId":"1700","endLine":99,"endColumn":54,"fix":"1977"},{"ruleId":"1697","severity":1,"message":"1698","line":107,"column":28,"nodeType":"1699","messageId":"1700","endLine":107,"endColumn":54,"fix":"1978"},{"ruleId":"1634","severity":1,"message":"1979","line":32,"column":8,"nodeType":"1636","endLine":32,"endColumn":16,"suggestions":"1980"},{"ruleId":"1697","severity":1,"message":"1698","line":82,"column":28,"nodeType":"1699","messageId":"1700","endLine":82,"endColumn":54,"fix":"1981"},{"ruleId":"1697","severity":1,"message":"1698","line":89,"column":28,"nodeType":"1699","messageId":"1700","endLine":89,"endColumn":54,"fix":"1982"},{"ruleId":"1697","severity":1,"message":"1698","line":95,"column":28,"nodeType":"1699","messageId":"1700","endLine":95,"endColumn":54,"fix":"1983"},{"ruleId":"1778","severity":1,"message":"1912","line":96,"column":34,"nodeType":"1780","messageId":"1913","endLine":96,"endColumn":36},{"ruleId":"1634","severity":1,"message":"1984","line":417,"column":8,"nodeType":"1636","endLine":417,"endColumn":28,"suggestions":"1985"},{"ruleId":"1634","severity":1,"message":"1984","line":423,"column":8,"nodeType":"1636","endLine":423,"endColumn":31,"suggestions":"1986"},{"ruleId":"1634","severity":1,"message":"1987","line":429,"column":8,"nodeType":"1636","endLine":429,"endColumn":34,"suggestions":"1988"},{"ruleId":"1634","severity":1,"message":"1989","line":435,"column":8,"nodeType":"1636","endLine":435,"endColumn":36,"suggestions":"1990"},{"ruleId":"1634","severity":1,"message":"1991","line":441,"column":8,"nodeType":"1636","endLine":441,"endColumn":34,"suggestions":"1992"},{"ruleId":"1634","severity":1,"message":"1991","line":447,"column":8,"nodeType":"1636","endLine":447,"endColumn":37,"suggestions":"1993"},{"ruleId":"1634","severity":1,"message":"1994","line":453,"column":8,"nodeType":"1636","endLine":453,"endColumn":32,"suggestions":"1995"},{"ruleId":"1634","severity":1,"message":"1994","line":459,"column":8,"nodeType":"1636","endLine":459,"endColumn":35,"suggestions":"1996"},{"ruleId":"1634","severity":1,"message":"1997","line":465,"column":8,"nodeType":"1636","endLine":465,"endColumn":33,"suggestions":"1998"},{"ruleId":"1634","severity":1,"message":"1999","line":471,"column":8,"nodeType":"1636","endLine":471,"endColumn":27,"suggestions":"2000"},{"ruleId":"1634","severity":1,"message":"2001","line":477,"column":8,"nodeType":"1636","endLine":477,"endColumn":35,"suggestions":"2002"},{"ruleId":"1634","severity":1,"message":"2003","line":485,"column":8,"nodeType":"1636","endLine":485,"endColumn":15,"suggestions":"2004"},{"ruleId":"1594","severity":1,"message":"2005","line":577,"column":21,"nodeType":"1596","messageId":"1597","endLine":577,"endColumn":29},{"ruleId":"1594","severity":1,"message":"2006","line":578,"column":21,"nodeType":"1596","messageId":"1597","endLine":578,"endColumn":34},{"ruleId":"1594","severity":1,"message":"2007","line":579,"column":21,"nodeType":"1596","messageId":"1597","endLine":579,"endColumn":34},{"ruleId":"1594","severity":1,"message":"2008","line":580,"column":21,"nodeType":"1596","messageId":"1597","endLine":580,"endColumn":29},{"ruleId":"1594","severity":1,"message":"2009","line":581,"column":21,"nodeType":"1596","messageId":"1597","endLine":581,"endColumn":34},{"ruleId":"1594","severity":1,"message":"2010","line":582,"column":21,"nodeType":"1596","messageId":"1597","endLine":582,"endColumn":36},{"ruleId":"1594","severity":1,"message":"2011","line":583,"column":21,"nodeType":"1596","messageId":"1597","endLine":583,"endColumn":31},{"ruleId":"2012","severity":1,"message":"2013","line":597,"column":26,"nodeType":"1596","messageId":"2014","endLine":597,"endColumn":27},{"ruleId":"2015","severity":1,"message":"2016","line":601,"column":40,"nodeType":"1780","messageId":"2017","endLine":610,"endColumn":22},{"ruleId":"1594","severity":1,"message":"2018","line":662,"column":21,"nodeType":"1596","messageId":"1597","endLine":662,"endColumn":27},{"ruleId":"2019","severity":1,"message":"2020","line":7,"column":29,"nodeType":"2021","messageId":"1669","endLine":7,"endColumn":31},{"ruleId":"1895","severity":1,"message":"1896","line":27,"column":29,"nodeType":"1897","endLine":27,"endColumn":175},{"ruleId":"1895","severity":1,"message":"1896","line":33,"column":29,"nodeType":"1897","endLine":33,"endColumn":175},{"ruleId":"1634","severity":1,"message":"2022","line":24,"column":8,"nodeType":"1636","endLine":24,"endColumn":24,"suggestions":"2023"},{"ruleId":"1634","severity":1,"message":"2024","line":30,"column":8,"nodeType":"1636","endLine":30,"endColumn":21,"suggestions":"2025"},{"ruleId":"1634","severity":1,"message":"2026","line":36,"column":8,"nodeType":"1636","endLine":36,"endColumn":22,"suggestions":"2027"},{"ruleId":"1634","severity":1,"message":"2028","line":18,"column":8,"nodeType":"1636","endLine":18,"endColumn":24,"suggestions":"2029"},{"ruleId":"1594","severity":1,"message":"1915","line":1,"column":8,"nodeType":"1596","messageId":"1597","endLine":1,"endColumn":13},{"ruleId":"1594","severity":1,"message":"2030","line":2,"column":9,"nodeType":"1596","messageId":"1597","endLine":2,"endColumn":16},"no-native-reassign",["2031"],"no-negated-in-lhs",["2032"],"no-unused-vars","'ui' is assigned a value but never used.","Identifier","unusedVar","'setui' is assigned a value but never used.","'app' is assigned a value but never used.","'setapp' is assigned a value but never used.","'email' is assigned a value but never used.","'setemail' is assigned a value but never used.","'ecommerce' is assigned a value but never used.","'setecommerce' is assigned a value but never used.","'contact' is assigned a value but never used.","'setcontact' is assigned a value but never used.","'component' is assigned a value but never used.","'setcomponent' is assigned a value but never used.","'form' is assigned a value but never used.","'setform' is assigned a value but never used.","'table' is assigned a value but never used.","'settable' is assigned a value but never used.","'chart' is assigned a value but never used.","'setchart' is assigned a value but never used.","'icon' is assigned a value but never used.","'seticon' is assigned a value but never used.","'map' is assigned a value but never used.","'setmap' is assigned a value but never used.","'setextra' is assigned a value but never used.","'invoice' is assigned a value but never used.","'setinvoice' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'LanguageDropdown' is defined but never used.","'github' is defined but never used.","'bitbucket' is defined but never used.","'dribbble' is defined but never used.","'dropbox' is defined but never used.","'mail_chimp' is defined but never used.","'slack' is defined but never used.","'socialDrp' is assigned a value but never used.","'setsocialDrp' is assigned a value but never used.","'TopVendors' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["2033"],"'facebook' is defined but never used.","'google' is defined but never used.","'googleResponse' is assigned a value but never used.","'facebookResponse' is assigned a value but never used.","'CustomerFilter' is defined but never used.","'updateOrder' is defined but never used.",["2034"],"'loading' is assigned a value but never used.","'productChart' is assigned a value but never used.","'setProductChart' is assigned a value but never used.",["2035"],["2036"],"React Hook useEffect has missing dependencies: 'isEdit' and 'props.match.params.id'. Either include them or remove the dependency array.",["2037"],"'materialDefault' is assigned a value but never used.","'setMaterialDefault' is assigned a value but never used.","'publication' is assigned a value but never used.","'setPublication' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isEdit', 'onGetCategories', 'onGetFieldOptions', 'onGetSizes', and 'props.match.params.id'. Either include them or remove the dependency array.",["2038"],"React Hook useEffect has missing dependencies: 'onGetProduct', 'onResetProductImages', 'onResetProductSize', and 'product.id'. Either include them or remove the dependency array.",["2039"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["2040"],"React Hook useEffect has a missing dependency: 'product.size'. Either include it or remove the dependency array.",["2041"],"React Hook useEffect has a missing dependency: 'onGetFieldOptions'. Either include it or remove the dependency array.",["2042"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Spinner' is defined but never used.","'AvField' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getStates', 'isEdit', and 'props.match.params.id'. Either include them or remove the dependency array.",["2043"],["2044"],["2045"],["2046"],"'roles' is assigned a value but never used.",["2047"],["2048"],["2049"],["2050"],"React Hook useEffect has missing dependencies: 'isEdit', 'onGetMentions', and 'props.match.params.id'. Either include them or remove the dependency array.",["2051"],"React Hook useEffect has missing dependencies: 'isEdit' and 'setSourceValue'. Either include them or remove the dependency array.",["2052"],"React Hook useEffect has missing dependencies: 'isEdit', 'onGetDeliveryMethods', 'onGetFieldOptions', and 'props.match.params.id'. Either include them or remove the dependency array.",["2053"],["2054"],"React Hook useEffect has missing dependencies: 'printReportData', 'props', and 'reportBody'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2055"],"React Hook useEffect has missing dependencies: 'getOrdersByConditional' and 'isEdit'. Either include them or remove the dependency array.",["2056"],"React Hook useEffect has a missing dependency: 'getOrdersByConditional'. Either include it or remove the dependency array.",["2057"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"2058","text":"2059"},{"range":"2060","text":"2059"},{"range":"2061","text":"2059"},"'printReport' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onResetOrder'. Either include it or remove the dependency array.",["2062"],["2063"],["2064"],"Expected '!==' and instead saw '!='.","'mainUser' is assigned a value but never used.",{"range":"2065","text":"2059"},"'customerOrdersStats' is defined but never used.","'ORDER_STATUS' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'entity', 'entitySuggested', 'onGetCommentSuggested', and 'onGetObservations'. Either include them or remove the dependency array.",["2066"],"React Hook useEffect has missing dependencies: 'entity' and 'observations'. Either include them or remove the dependency array.",["2067"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression",{"range":"2068","text":"2059"},{"range":"2069","text":"2059"},{"range":"2070","text":"2059"},{"range":"2071","text":"2059"},{"range":"2072","text":"2059"},{"range":"2073","text":"2059"},{"range":"2074","text":"2059"},"React Hook useEffect has missing dependencies: 'currentPage', 'getConditionals', and 'onGetOrders'. Either include them or remove the dependency array.",["2075"],"React Hook useEffect has missing dependencies: 'conditional', 'onFilterAction', and 'showAsModal'. Either include them or remove the dependency array.",["2076"],"React Hook useEffect has a missing dependency: 'conciliationView'. Either include it or remove the dependency array.",["2077"],"React Hook useEffect has missing dependencies: 'customActions', 'getConditionals', and 'onResetOrders'. Either include them or remove the dependency array.",["2078"],"'showConciliationView' is assigned a value but never used.","'imageNotFound' is defined but never used.","'CardBody' is defined but never used.","'FieldNumber' is defined but never used.","'FieldSelect' is defined but never used.","'FieldText' is defined but never used.","'STATUS' is defined but never used.","'setProductData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fillValues'. Either include it or remove the dependency array.",["2079"],"'onGetProductImage' is assigned a value but never used.","'refresh' is assigned a value but never used.","'productImageList' is assigned a value but never used.","'productImageGroups' is assigned a value but never used.","'setProductImageGroups' is assigned a value but never used.",{"range":"2080","text":"2059"},{"range":"2081","text":"2059"},{"range":"2082","text":"2059"},{"range":"2083","text":"2059"},{"range":"2084","text":"2059"},"React Hook useEffect has missing dependencies: 'car', 'getProductListWithTotals', and 'onUpdateCar'. Either include them or remove the dependency array.",["2085"],"React Hook useEffect has missing dependencies: 'car.customer', 'car.isEdit', 'initComponent', and 'onGetCustomer'. Either include them or remove the dependency array.",["2086"],"React Hook useEffect has missing dependencies: 'car', 'hasCustomerOpenOrders', and 'onUpdateCar'. Either include them or remove the dependency array.",["2087"],"React Hook useEffect has missing dependencies: 'deliveryMethods', 'onGetDeliveryLocalities', and 'onGetDeliveryMethods'. Either include them or remove the dependency array.",["2088"],"React Hook useEffect has missing dependencies: 'deliveryMethods' and 'onChangeDeliveryOptions'. Either include them or remove the dependency array.",["2089"],"React Hook useEffect has missing dependencies: 'getQuote' and 'onChangeDeliveryOptions'. Either include them or remove the dependency array.",["2090"],"React Hook useEffect has a missing dependency: 'deliveryType'. Either include it or remove the dependency array.",["2091"],"React Hook useEffect has missing dependencies: 'car.deliveryOptions', 'car.isEdit', 'deliveryMethod', 'onChangeDeliveryOptions', and 'props'. Either include them or remove the dependency array.",["2092"],"React Hook useEffect has a missing dependency: 'onChangeDeliveryOptions'. Either include it or remove the dependency array.",["2093"],"React Hook useEffect has a missing dependency: 'getQuote'. Either include it or remove the dependency array.",["2094"],"React Hook useEffect has missing dependencies: 'car.isEdit', 'initComponent', and 'props'. Either include them or remove the dependency array.",["2095"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"range":"2096","text":"2059"},"'disabled' is assigned a value but never used.","'Select' is defined but never used.","'list' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetPayments'. Either include it or remove the dependency array.",["2097"],"'onDelete' is assigned a value but never used.","'resetOrder' is defined but never used.","'states' is assigned a value but never used.","'meta' is assigned a value but never used.","'getStates' is assigned a value but never used.","'SearchBar' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetOffices'. Either include it or remove the dependency array.",["2098"],"React Hook useEffect has a missing dependency: 'onResetOffices'. Either include it or remove the dependency array.",["2099"],"'selectRowProp' is assigned a value but never used.","'resetOffice' is defined but never used.","React Hook useEffect has a missing dependency: 'onGetBills'. Either include it or remove the dependency array.",["2100"],"React Hook useEffect has a missing dependency: 'onResetBill'. Either include it or remove the dependency array.",["2101"],{"range":"2102","text":"2059"},"React Hook useEffect has a missing dependency: 'onGetTemplates'. Either include it or remove the dependency array.",["2103"],"React Hook useEffect has a missing dependency: 'onResetTemplate'. Either include it or remove the dependency array.",["2104"],"React Hook useEffect has missing dependencies: 'conditional', 'currentPage', and 'onGetOrders'. Either include them or remove the dependency array.",["2105"],"React Hook useEffect has missing dependencies: 'conditional' and 'customActions'. Either include them or remove the dependency array.",["2106"],"React Hook useEffect has a missing dependency: 'groupSelected'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFieldOption' needs the current value of 'groupSelected'.",["2107"],"React Hook useEffect has a missing dependency: 'onGetUsers'. Either include it or remove the dependency array.",["2108"],"React Hook useEffect has a missing dependency: 'onResetUsers'. Either include it or remove the dependency array.",["2109"],"React Hook useEffect has a missing dependency: 'onGetMunicipalities'. Either include it or remove the dependency array.",["2110"],"React Hook useEffect has missing dependencies: 'getStates' and 'onResetLocation'. Either include them or remove the dependency array.",["2111"],"React Hook useEffect has a missing dependency: 'onGetStates'. Either include it or remove the dependency array.",["2112"],"React Hook useEffect has a missing dependency: 'onResetLocation'. Either include it or remove the dependency array.",["2113"],"React Hook useEffect has missing dependencies: 'conditional', 'currentPage', 'onGetCatalogBatchRequest', and 'onGetCategories'. Either include them or remove the dependency array.",["2114"],"React Hook useEffect has missing dependencies: 'onGetCatalogBatchRequest' and 'onResetCategories'. Either include them or remove the dependency array.",["2115"],"'series2' is assigned a value but never used.","'options2' is assigned a value but never used.","'series3' is assigned a value but never used.","'options3' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetProducts'. Either include it or remove the dependency array.",["2116"],"React Hook useEffect has a missing dependency: 'onResetProducts'. Either include it or remove the dependency array.",["2117"],{"range":"2118","text":"2059"},"React Hook useEffect has a missing dependency: 'onGetDeliveryMethods'. Either include it or remove the dependency array. If 'onGetDeliveryMethods' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2119"],"React Hook useEffect has missing dependencies: 'error' and 'onCloseModal'. Either include them or remove the dependency array. If 'onCloseModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2120"],"React Hook useEffect has missing dependencies: 'getStates' and 'props.match.params.id'. Either include them or remove the dependency array.",["2121"],{"range":"2122","text":"2059"},"React Hook useEffect has a missing dependency: 'getMunicipalities'. Either include it or remove the dependency array.",["2123"],"'isValidOption' is defined but never used.",["2124"],["2125"],"React Hook useEffect has a missing dependency: 'onGetDeliveryMethods'. Either include it or remove the dependency array.",["2126"],["2127"],"React Hook useEffect has missing dependencies: 'resetPasswordState' and 'toggleChangePasswordModal'. Either include them or remove the dependency array. If 'resetPasswordState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2128"],"React Hook useEffect has a missing dependency: 'onCloseChangePasswordModal'. Either include it or remove the dependency array.",["2129"],"React Hook useEffect has a missing dependency: 'getDataToday'. Either include it or remove the dependency array.",["2130"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'AvBaseInput' is defined but never used.","'messages' is defined but never used.","'FormText' is defined but never used.","'FormGroup' is defined but never used.","'InputAsyncSearchField' is defined but never used.","'FieldSelectBasic' is defined but never used.","'getEmptyOptions' is defined but never used.","'validate' is assigned a value but never used.",{"range":"2131","text":"2059"},{"range":"2132","text":"2059"},"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["2133"],["2134"],"'Card' is defined but never used.","'ReactApexChart' is defined but never used.","'CountUp' is defined but never used.","React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",["2135"],["2136"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["2137"],"'findOrderBy' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onReload'. Either include it or remove the dependency array.",["2138"],{"range":"2139","text":"2059"},"React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.",["2140"],"React Hook useEffect has missing dependencies: 'conciliationError', 'onCloseModal', and 'onConfirmConciliationRestart'. Either include them or remove the dependency array. If 'onCloseModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2141"],{"range":"2142","text":"2059"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Container' is defined but never used.","'orderResume' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onGetHistoric' and 'onGetOrder'. Either include them or remove the dependency array.",["2143"],"React Hook useEffect has missing dependencies: 'canEdit', 'car', 'onPrintOrder', 'onResumeOrder', and 'onUpdateCar'. Either include them or remove the dependency array.",["2144"],"'getDeliveryAddress' is assigned a value but never used.","'onGetProductSizes' is assigned a value but never used.","'productSizes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fillSelectValues' and 'parseList'. Either include them or remove the dependency array.",["2145"],"React Hook useEffect has a missing dependency: 'calculateTotals'. Either include it or remove the dependency array.",["2146"],"'parseDefaultValue' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside",{"range":"2147","text":"2059"},"'React' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'map' is defined but never used.","'onGetOrder' is assigned a value but never used.","'order' is assigned a value but never used.","'productId' is assigned a value but never used.","'openCustomerModal' is assigned a value but never used.","'setOpenCustomerModal' is assigned a value but never used.",{"range":"2148","text":"2059"},"React Hook useEffect has a missing dependency: 'onGetOrders'. Either include it or remove the dependency array.",["2149"],"'product' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetProductsPending'. Either include it or remove the dependency array. If 'onGetProductsPending' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2150"],"'avatar4' is defined but never used.","'avatar5' is defined but never used.","'avatar6' is defined but never used.","'avatar7' is defined but never used.","'avatar8' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'statsCustomerRegistered' is defined but never used.","'statsCustomerRegisteredToday' is defined but never used.","'resetProduct' is defined but never used.","React Hook useEffect has missing dependencies: 'onGetCustomerRegistereds' and 'onGetCustomers'. Either include them or remove the dependency array.",["2151"],"React Hook useEffect has missing dependencies: 'onGetCustomerRegistereds' and 'onResetCustomers'. Either include them or remove the dependency array.",["2152"],"'ButtonSubmit' is defined but never used.",{"range":"2153","text":"2059"},{"range":"2154","text":"2059"},"'AvForm' is defined but never used.","'Tooltip' is defined but never used.","'CustomizedTimeline' is defined but never used.","'ConfirmationModalAction' is defined but never used.","'threeDots' is defined but never used.","'deleteComment' is defined but never used.","'getCommentsByEntity' is defined but never used.","'registerComment' is defined but never used.","'findFieldOptionByGroup' is defined but never used.","'order' is defined but never used.","'doPrintBatchRequest' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2155"],"React Hook useEffect has missing dependencies: 'onRefreshCategory' and 'onResetBatchRequest'. Either include them or remove the dependency array.",["2156"],"React Hook useEffect has a missing dependency: 'onGetBillConfigs'. Either include it or remove the dependency array.",["2157"],"React Hook useEffect has a missing dependency: 'onResetBillConfig'. Either include it or remove the dependency array.",["2158"],"'buildOptions' is defined but never used.",{"range":"2159","text":"2059"},["2160"],"'getMunicipalities' is defined but never used.","'getStates' is defined but never used.",["2161"],["2162"],"React Hook useEffect has missing dependencies: 'onGetCategories' and 'onGetSizes'. Either include them or remove the dependency array.",["2163"],{"range":"2164","text":"2059"},{"range":"2165","text":"2059"},"React Hook useEffect has missing dependencies: 'findCategory', 'findCustomer', and 'findProduct'. Either include them or remove the dependency array.",["2166"],{"range":"2167","text":"2059"},{"range":"2168","text":"2059"},{"range":"2169","text":"2059"},"React Hook useEffect has missing dependencies: 'cargarVentas' and 'stats.ventas'. Either include them or remove the dependency array.",["2170"],["2171"],"React Hook useEffect has missing dependencies: 'stats.ventasEstado' and 'ventasEstadoCargar'. Either include them or remove the dependency array.",["2172"],"React Hook useEffect has missing dependencies: 'stats.ventasWhatsapp' and 'ventasWhatsappCargar'. Either include them or remove the dependency array.",["2173"],"React Hook useEffect has missing dependencies: 'stats.ventasOrigen' and 'ventasOrigenCargar'. Either include them or remove the dependency array.",["2174"],["2175"],"React Hook useEffect has missing dependencies: 'stats.ventasTipo' and 'ventasTipoCargar'. Either include them or remove the dependency array.",["2176"],["2177"],"React Hook useEffect has missing dependencies: 'masVendidosCargar' and 'stats.masVendidos'. Either include them or remove the dependency array.",["2178"],"React Hook useEffect has missing dependencies: 'horasCargar' and 'stats.horas'. Either include them or remove the dependency array.",["2179"],"React Hook useEffect has missing dependencies: 'reincidenciasCargar' and 'stats.reincidencias'. Either include them or remove the dependency array.",["2180"],"React Hook useEffect has a missing dependency: 'stats'. Either include it or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.",["2181"],"'datosWeb' is assigned a value but never used.","'datosWebMovil' is assigned a value but never used.","'datosFacebook' is assigned a value but never used.","'datosApp' is assigned a value but never used.","'datosWhatsapp' is assigned a value but never used.","'datosBlackberry' is assigned a value but never used.","'datosOtros' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'data', 'data'.","unsafeRefs","'fechas' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","React Hook useEffect has a missing dependency: 'getRoles'. Either include it or remove the dependency array.",["2182"],"React Hook useEffect has missing dependencies: 'filterPermissionsOptions' and 'reloadPermissions'. Either include them or remove the dependency array.",["2183"],"React Hook useEffect has a missing dependency: 'filterPermissionsOptions'. Either include it or remove the dependency array.",["2184"],"React Hook useEffect has a missing dependency: 'getPermissions'. Either include it or remove the dependency array.",["2185"],"'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"2186","fix":"2187"},{"desc":"2188","fix":"2189"},{"desc":"2190","fix":"2191"},{"desc":"2192","fix":"2193"},{"desc":"2194","fix":"2195"},{"desc":"2196","fix":"2197"},{"desc":"2198","fix":"2199"},{"desc":"2200","fix":"2201"},{"desc":"2202","fix":"2203"},{"desc":"2204","fix":"2205"},{"desc":"2206","fix":"2207"},{"desc":"2208","fix":"2209"},{"desc":"2210","fix":"2211"},{"desc":"2212","fix":"2213"},{"desc":"2214","fix":"2215"},{"desc":"2216","fix":"2217"},{"desc":"2218","fix":"2219"},{"desc":"2220","fix":"2221"},{"desc":"2222","fix":"2223"},{"desc":"2224","fix":"2225"},{"desc":"2226","fix":"2227"},{"desc":"2228","fix":"2229"},{"desc":"2230","fix":"2231"},{"desc":"2232","fix":"2233"},{"desc":"2234","fix":"2235"},[5640,5640],"()",[5885,5885],[8158,8158],{"desc":"2236","fix":"2237"},{"desc":"2238","fix":"2239"},{"desc":"2240","fix":"2241"},[1173,1173],{"desc":"2242","fix":"2243"},{"desc":"2244","fix":"2245"},[461,461],[1638,1638],[2789,2789],[3353,3353],[3634,3634],[4357,4357],[4965,4965],{"desc":"2246","fix":"2247"},{"desc":"2248","fix":"2249"},{"desc":"2250","fix":"2251"},{"desc":"2252","fix":"2253"},{"desc":"2254","fix":"2255"},[799,799],[1077,1077],[1442,1442],[826,826],[1091,1091],{"desc":"2256","fix":"2257"},{"desc":"2258","fix":"2259"},{"desc":"2260","fix":"2261"},{"desc":"2262","fix":"2263"},{"desc":"2264","fix":"2265"},{"desc":"2266","fix":"2267"},{"desc":"2268","fix":"2269"},{"desc":"2270","fix":"2271"},{"desc":"2272","fix":"2273"},{"desc":"2274","fix":"2275"},{"desc":"2276","fix":"2277"},[1304,1304],{"desc":"2278","fix":"2279"},{"desc":"2280","fix":"2281"},{"desc":"2282","fix":"2283"},{"desc":"2284","fix":"2285"},{"desc":"2286","fix":"2287"},[2934,2934],{"desc":"2288","fix":"2289"},{"desc":"2290","fix":"2291"},{"desc":"2292","fix":"2293"},{"desc":"2294","fix":"2295"},{"desc":"2296","fix":"2297"},{"desc":"2298","fix":"2299"},{"desc":"2300","fix":"2301"},{"desc":"2302","fix":"2303"},{"desc":"2304","fix":"2305"},{"desc":"2306","fix":"2307"},{"desc":"2308","fix":"2309"},{"desc":"2310","fix":"2311"},{"desc":"2312","fix":"2313"},{"desc":"2314","fix":"2315"},{"desc":"2316","fix":"2317"},[563,563],{"desc":"2318","fix":"2319"},{"desc":"2320","fix":"2321"},{"desc":"2322","fix":"2323"},[2792,2792],{"desc":"2324","fix":"2325"},{"desc":"2318","fix":"2326"},{"desc":"2320","fix":"2327"},{"desc":"2328","fix":"2329"},{"desc":"2320","fix":"2330"},{"desc":"2331","fix":"2332"},{"desc":"2333","fix":"2334"},{"desc":"2335","fix":"2336"},[1331,1331],[6080,6080],{"desc":"2337","fix":"2338"},{"desc":"2337","fix":"2339"},{"desc":"2340","fix":"2341"},{"desc":"2342","fix":"2343"},{"desc":"2320","fix":"2344"},{"desc":"2345","fix":"2346"},[1238,1238],{"desc":"2347","fix":"2348"},{"desc":"2349","fix":"2350"},[3460,3460],{"desc":"2351","fix":"2352"},{"desc":"2353","fix":"2354"},{"desc":"2355","fix":"2356"},{"desc":"2357","fix":"2358"},[10340,10340],[935,935],{"desc":"2359","fix":"2360"},{"desc":"2361","fix":"2362"},{"desc":"2363","fix":"2364"},{"desc":"2365","fix":"2366"},[1295,1295],[3053,3053],{"desc":"2367","fix":"2368"},{"desc":"2369","fix":"2370"},{"desc":"2371","fix":"2372"},{"desc":"2373","fix":"2374"},[993,993],{"desc":"2375","fix":"2376"},{"desc":"2377","fix":"2378"},{"desc":"2320","fix":"2379"},{"desc":"2380","fix":"2381"},[3704,3704],[4054,4054],{"desc":"2382","fix":"2383"},[2890,2890],[3220,3220],[3455,3455],{"desc":"2384","fix":"2385"},{"desc":"2386","fix":"2387"},{"desc":"2388","fix":"2389"},{"desc":"2390","fix":"2391"},{"desc":"2392","fix":"2393"},{"desc":"2394","fix":"2395"},{"desc":"2396","fix":"2397"},{"desc":"2398","fix":"2399"},{"desc":"2400","fix":"2401"},{"desc":"2402","fix":"2403"},{"desc":"2404","fix":"2405"},{"desc":"2406","fix":"2407"},{"desc":"2408","fix":"2409"},{"desc":"2410","fix":"2411"},{"desc":"2412","fix":"2413"},{"desc":"2414","fix":"2415"},"Update the dependencies array to be: [getProduct, props.match.params.id]",{"range":"2416","text":"2417"},"Update the dependencies array to be: [onGetOrder, props.match.params.id, refresh]",{"range":"2418","text":"2419"},"Update the dependencies array to be: [onGetCustomer, props.match.params.id]",{"range":"2420","text":"2421"},"Update the dependencies array to be: [onGetBill, props.match.params.id, refresh]",{"range":"2422","text":"2423"},"Update the dependencies array to be: [getCustomer, isEdit, props.match.params.id]",{"range":"2424","text":"2425"},"Update the dependencies array to be: [isEdit, onGetCategories, onGetFieldOptions, onGetProduct, onGetSizes, props.match.params.id]",{"range":"2426","text":"2427"},"Update the dependencies array to be: [onGetProduct, onResetProductImages, onResetProductSize, product.id, refreshProduct]",{"range":"2428","text":"2429"},"Update the dependencies array to be: [isEdit, product]",{"range":"2430","text":"2431"},"Update the dependencies array to be: [product.size, sizes]",{"range":"2432","text":"2433"},"Update the dependencies array to be: [onGetFieldOptions, refreshFieldOptions]",{"range":"2434","text":"2435"},"Update the dependencies array to be: [getMunicipality, getStates, isEdit, props.match.params.id]",{"range":"2436","text":"2437"},"Update the dependencies array to be: [isEdit, municipality]",{"range":"2438","text":"2439"},"Update the dependencies array to be: [getCategory, isEdit, props.match.params.id]",{"range":"2440","text":"2441"},"Update the dependencies array to be: [category, isEdit]",{"range":"2442","text":"2443"},"Update the dependencies array to be: [getUser, isEdit, props.match.params.id]",{"range":"2444","text":"2445"},"Update the dependencies array to be: [isEdit, user]",{"range":"2446","text":"2447"},"Update the dependencies array to be: [getState, isEdit, props.match.params.id]",{"range":"2448","text":"2449"},"Update the dependencies array to be: [estado, isEdit]",{"range":"2450","text":"2451"},"Update the dependencies array to be: [isEdit, onGetMentions, onGetTemplate, props.match.params.id]",{"range":"2452","text":"2453"},"Update the dependencies array to be: [isEdit, setSourceValue, template]",{"range":"2454","text":"2455"},"Update the dependencies array to be: [getOffice, isEdit, onGetDeliveryMethods, onGetFieldOptions, props.match.params.id]",{"range":"2456","text":"2457"},"Update the dependencies array to be: [isEdit, orders]",{"range":"2458","text":"2459"},"Update the dependencies array to be: [printReportData, printReportData.data, props, reportBody]",{"range":"2460","text":"2461"},"Update the dependencies array to be: [getOrdersByConditional, isEdit, office]",{"range":"2462","text":"2463"},"Update the dependencies array to be: [refreshOrders, refresh, getOrdersByConditional]",{"range":"2464","text":"2465"},"Update the dependencies array to be: [initComponent, onResetOrder]",{"range":"2466","text":"2467"},"Update the dependencies array to be: [isEdit, onGetPayment, props.match.params.id]",{"range":"2468","text":"2469"},"Update the dependencies array to be: [isEdit, payment]",{"range":"2470","text":"2471"},"Update the dependencies array to be: [entity, entityId, entitySuggested, onGetCommentSuggested, onGetObservations]",{"range":"2472","text":"2473"},"Update the dependencies array to be: [entity, observations]",{"range":"2474","text":"2475"},"Update the dependencies array to be: [currentPage, getConditionals, onGetOrders, refresh]",{"range":"2476","text":"2477"},"Update the dependencies array to be: [conciliationView, conditional, onFilterAction, showAsModal]",{"range":"2478","text":"2479"},"Update the dependencies array to be: [conciliation, conciliationView]",{"range":"2480","text":"2481"},"Update the dependencies array to be: [customActions, getConditionals, onGetOrders, onResetOrders]",{"range":"2482","text":"2483"},"Update the dependencies array to be: [fillValues, product]",{"range":"2484","text":"2485"},"Update the dependencies array to be: [car, car.products, getProductListWithTotals, globalDiscount, onUpdateCar]",{"range":"2486","text":"2487"},"Update the dependencies array to be: [car.customer, car.isEdit, initComponent, onGetCustomer, showAsModal]",{"range":"2488","text":"2489"},"Update the dependencies array to be: [car, customer, hasCustomerOpenOrders, onUpdateCar]",{"range":"2490","text":"2491"},"Update the dependencies array to be: [onGetFieldOptions, car.reset, deliveryMethods, onGetDeliveryMethods, onGetDeliveryLocalities]",{"range":"2492","text":"2493"},"Update the dependencies array to be: [deliveryMethods, deliveryType, onChangeDeliveryOptions]",{"range":"2494","text":"2495"},"Update the dependencies array to be: [deliveryMethod, getQuote, onChangeDeliveryOptions]",{"range":"2496","text":"2497"},"Update the dependencies array to be: [deliveryMethods, deliveryType]",{"range":"2498","text":"2499"},"Update the dependencies array to be: [car.deliveryOptions, car.isEdit, deliveryMethod, deliveryQuote, onChangeDeliveryOptions, props]",{"range":"2500","text":"2501"},"Update the dependencies array to be: [deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, otherMethod, onChangeDeliveryOptions]",{"range":"2502","text":"2503"},"Update the dependencies array to be: [car.products, getQuote]",{"range":"2504","text":"2505"},"Update the dependencies array to be: [car.deliveryOptions, car.isEdit, initComponent, props]",{"range":"2506","text":"2507"},"Update the dependencies array to be: [onGetPayments, refresh]",{"range":"2508","text":"2509"},"Update the dependencies array to be: [onGetOffices, refresh]",{"range":"2510","text":"2511"},"Update the dependencies array to be: [onGetOffices, onResetOffices]",{"range":"2512","text":"2513"},"Update the dependencies array to be: [onGetBills, refresh]",{"range":"2514","text":"2515"},"Update the dependencies array to be: [onGetBills, onResetBill]",{"range":"2516","text":"2517"},"Update the dependencies array to be: [onGetTemplates, refresh]",{"range":"2518","text":"2519"},"Update the dependencies array to be: [onGetTemplates, onResetTemplate]",{"range":"2520","text":"2521"},"Update the dependencies array to be: [conditional, currentPage, onGetOrders, refresh]",{"range":"2522","text":"2523"},"Update the dependencies array to be: [conditional, customActions, onGetOrders]",{"range":"2524","text":"2525"},"Update the dependencies array to be: [fieldOptions, groupSelected]",{"range":"2526","text":"2527"},"Update the dependencies array to be: [onGetUsers, refresh]",{"range":"2528","text":"2529"},"Update the dependencies array to be: [onGetUsers, onResetUsers]",{"range":"2530","text":"2531"},"Update the dependencies array to be: [onGetMunicipalities, refresh]",{"range":"2532","text":"2533"},"Update the dependencies array to be: [getStates, onGetMunicipalities, onResetLocation]",{"range":"2534","text":"2535"},"Update the dependencies array to be: [onGetStates, refresh]",{"range":"2536","text":"2537"},"Update the dependencies array to be: [onGetStates, onResetLocation]",{"range":"2538","text":"2539"},"Update the dependencies array to be: [conditional, currentPage, onGetCatalogBatchRequest, onGetCategories, refresh]",{"range":"2540","text":"2541"},"Update the dependencies array to be: [onGetCatalogBatchRequest, onGetCategories, onResetCategories]",{"range":"2542","text":"2543"},"Update the dependencies array to be: [onGetProducts, refresh]",{"range":"2544","text":"2545"},"Update the dependencies array to be: [onGetProducts, onResetProducts]",{"range":"2546","text":"2547"},"Update the dependencies array to be: [onGetDeliveryMethods, onRestartReport]",{"range":"2548","text":"2549"},"Update the dependencies array to be: [error, onCloseModal, success]",{"range":"2550","text":"2551"},"Update the dependencies array to be: [getCustomer, getStates, props.match.params.id]",{"range":"2552","text":"2553"},"Update the dependencies array to be: [getMunicipalities, state]",{"range":"2554","text":"2555"},{"range":"2556","text":"2549"},{"range":"2557","text":"2551"},"Update the dependencies array to be: [importFileReset, onGetDeliveryMethods]",{"range":"2558","text":"2559"},{"range":"2560","text":"2551"},"Update the dependencies array to be: [resetPasswordState, toggleChangePasswordModal, user]",{"range":"2561","text":"2562"},"Update the dependencies array to be: [onCloseChangePasswordModal, passwordChanged]",{"range":"2563","text":"2564"},"Update the dependencies array to be: [getData, getDataToday]",{"range":"2565","text":"2566"},"Update the dependencies array to be: [props.value, value]",{"range":"2567","text":"2568"},{"range":"2569","text":"2568"},"Update the dependencies array to be: [statusGroup, title]",{"range":"2570","text":"2571"},"Update the dependencies array to be: [reportData, title]",{"range":"2572","text":"2573"},{"range":"2574","text":"2551"},"Update the dependencies array to be: [onReload, paymentSelected, refresh]",{"range":"2575","text":"2576"},"Update the dependencies array to be: [order, orders]",{"range":"2577","text":"2578"},"Update the dependencies array to be: [conciliationError, conciliationSuccess, onCloseModal, onConfirmConciliationRestart]",{"range":"2579","text":"2580"},"Update the dependencies array to be: [onGetHistoric, onGetOrder, orderId, refresh]",{"range":"2581","text":"2582"},"Update the dependencies array to be: [canEdit, car, onPrintOrder, onResumeOrder, onUpdateCar, order]",{"range":"2583","text":"2584"},"Update the dependencies array to be: [fillSelectValues, parseList, product]",{"range":"2585","text":"2586"},"Update the dependencies array to be: [calculateTotals, productSizesList]",{"range":"2587","text":"2588"},"Update the dependencies array to be: [customerId, onGetOrders]",{"range":"2589","text":"2590"},"Update the dependencies array to be: [onGetProductsPending, product]",{"range":"2591","text":"2592"},"Update the dependencies array to be: [onGetCustomerRegistereds, onGetCustomers, refresh]",{"range":"2593","text":"2594"},"Update the dependencies array to be: [onGetCustomerRegistereds, onGetCustomers, onResetCustomers]",{"range":"2595","text":"2596"},"Update the dependencies array to be: [conditionals, doRequest, props]",{"range":"2597","text":"2598"},"Update the dependencies array to be: [batch, onRefreshCategory, onResetBatchRequest]",{"range":"2599","text":"2600"},"Update the dependencies array to be: [onGetBillConfigs, refresh]",{"range":"2601","text":"2602"},"Update the dependencies array to be: [onGetBillConfigs, onResetBillConfig]",{"range":"2603","text":"2604"},"Update the dependencies array to be: [getBillConfig, isEdit, props.match.params.id]",{"range":"2605","text":"2606"},"Update the dependencies array to be: [getBillConfig, props.match.params.id]",{"range":"2607","text":"2608"},{"range":"2609","text":"2551"},"Update the dependencies array to be: [onGetCategories, onGetSizes, onResetProduct]",{"range":"2610","text":"2611"},"Update the dependencies array to be: [findCategory, findCustomer, findProduct, prefix]",{"range":"2612","text":"2613"},"Update the dependencies array to be: [cargarVentas, stats.ventas, stats.ventas.fecha]",{"range":"2614","text":"2615"},"Update the dependencies array to be: [cargarVentas, stats.ventas, stats.ventas.opciones]",{"range":"2616","text":"2617"},"Update the dependencies array to be: [stats.ventasEstado, stats.ventasEstado.fecha, ventasEstadoCargar]",{"range":"2618","text":"2619"},"Update the dependencies array to be: [stats.ventasWhatsapp, stats.ventasWhatsapp.fecha, ventasWhatsappCargar]",{"range":"2620","text":"2621"},"Update the dependencies array to be: [stats.ventasOrigen, stats.ventasOrigen.fecha, ventasOrigenCargar]",{"range":"2622","text":"2623"},"Update the dependencies array to be: [stats.ventasOrigen, stats.ventasOrigen.opciones, ventasOrigenCargar]",{"range":"2624","text":"2625"},"Update the dependencies array to be: [stats.ventasTipo, stats.ventasTipo.fecha, ventasTipoCargar]",{"range":"2626","text":"2627"},"Update the dependencies array to be: [stats.ventasTipo, stats.ventasTipo.opciones, ventasTipoCargar]",{"range":"2628","text":"2629"},"Update the dependencies array to be: [masVendidosCargar, stats.masVendidos, stats.masVendidos.fecha]",{"range":"2630","text":"2631"},"Update the dependencies array to be: [horasCargar, stats.horas, stats.horas.fecha]",{"range":"2632","text":"2633"},"Update the dependencies array to be: [reincidenciasCargar, stats.reincidencias, stats.reincidencias.fecha]",{"range":"2634","text":"2635"},"Update the dependencies array to be: [stats, users]",{"range":"2636","text":"2637"},"Update the dependencies array to be: [getRoles, setPermissions]",{"range":"2638","text":"2639"},"Update the dependencies array to be: [filterPermissionsOptions, permissions, reloadPermissions]",{"range":"2640","text":"2641"},"Update the dependencies array to be: [filterPermissionsOptions, roleSelected]",{"range":"2642","text":"2643"},"Update the dependencies array to be: [getPermissions, setPermissions]",{"range":"2644","text":"2645"},[983,995],"[getProduct, props.match.params.id]",[956,977],"[onGetOrder, props.match.params.id, refresh]",[1687,1702],"[onGetCustomer, props.match.params.id]",[838,858],"[onGetBill, props.match.params.id, refresh]",[727,740],"[getCustomer, isEdit, props.match.params.id]",[3150,3164],"[isEdit, onGetCategories, onGetFieldOptions, onGetProduct, onGetSizes, props.match.params.id]",[3333,3349],"[onGetProduct, onResetProductImages, onResetProductSize, product.id, refreshProduct]",[4074,4083],"[isEdit, product]",[4724,4731],"[product.size, sizes]",[5575,5596],"[onGetFieldOptions, refreshFieldOptions]",[1374,1391],"[getMunicipality, getStates, isEdit, props.match.params.id]",[1728,1742],"[isEdit, municipality]",[1063,1076],"[getCategory, isEdit, props.match.params.id]",[1261,1271],"[category, isEdit]",[1336,1345],"[getUser, isEdit, props.match.params.id]",[1643,1649],"[isEdit, user]",[1059,1069],"[getState, isEdit, props.match.params.id]",[1250,1258],"[estado, isEdit]",[1516,1531],"[isEdit, onGetMentions, onGetTemplate, props.match.params.id]",[1769,1779],"[isEdit, setSourceValue, template]",[2823,2834],"[getOffice, isEdit, onGetDeliveryMethods, onGetFieldOptions, props.match.params.id]",[3346,3354],"[isEdit, orders]",[3601,3623],"[printReportData, printReportData.data, props, reportBody]",[3899,3907],"[getOrdersByConditional, isEdit, office]",[3974,3998],"[refreshOrders, refresh, getOrdersByConditional]",[1296,1311],"[initComponent, onResetOrder]",[1331,1345],"[isEdit, onGetPayment, props.match.params.id]",[1491,1500],"[isEdit, payment]",[1389,1399],"[entity, entityId, entitySuggested, onGetCommentSuggested, onGetObservations]",[1707,1729],"[entity, observations]",[2418,2427],"[currentPage, getConditionals, onGetOrders, refresh]",[2634,2652],"[conciliationView, conditional, onFilterAction, showAsModal]",[2815,2829],"[conciliation, conciliationView]",[2999,3012],"[customActions, getConditionals, onGetOrders, onResetOrders]",[867,876],"[fillValues, product]",[1205,1235],"[car, car.products, getProductListWithTotals, globalDiscount, onUpdateCar]",[2292,2305],"[car.customer, car.isEdit, initComponent, onGetCustomer, showAsModal]",[2667,2677],"[car, customer, hasCustomerOpenOrders, onUpdateCar]",[3146,3176],"[onGetFieldOptions, car.reset, deliveryMethods, onGetDeliveryMethods, onGetDeliveryLocalities]",[3895,3909],"[deliveryMethods, deliveryType, onChangeDeliveryOptions]",[4134,4150],"[deliveryMethod, getQuote, onChangeDeliveryOptions]",[4458,4475],"[deliveryMethods, deliveryType]",[4788,4803],"[car.deliveryOptions, car.isEdit, deliveryMethod, deliveryQuote, onChangeDeliveryOptions, props]",[4871,4954],"[deliveryCost, paymentType, pieceToChange, tracking, deliveryLocality, otherMethod, onChangeDeliveryOptions]",[5007,5021],"[car.products, getQuote]",[6019,6040],"[car.deliveryOptions, car.isEdit, initComponent, props]",[1870,1879],"[onGetPayments, refresh]",[1636,1645],"[onGetOffices, refresh]",[1749,1763],"[onGetOffices, onResetOffices]",[1870,1879],"[onGetBills, refresh]",[1979,1991],"[onGetBills, onResetBill]",[1464,1473],"[onGetTemplates, refresh]",[1557,1573],"[onGetTemplates, onResetTemplate]",[2004,2013],"[conditional, currentPage, onGetOrders, refresh]",[2152,2165],"[conditional, customActions, onGetOrders]",[2320,2334],"[fieldOptions, groupSelected]",[1746,1755],"[onGetUsers, refresh]",[1832,1844],"[onGetUsers, onResetUsers]",[1561,1570],"[onGetMunicipalities, refresh]",[1680,1701],"[getStates, onGetMunicipalities, onResetLocation]",[1494,1503],"[onGetStates, refresh]",[1584,1597],"[onGetStates, onResetLocation]",[2324,2333],"[conditional, currentPage, onGetCatalogBatchRequest, onGetCategories, refresh]",[2457,2474],"[onGetCatalogBatchRequest, onGetCategories, onResetCategories]",[4094,4103],"[onGetProducts, refresh]",[4187,4202],"[onGetProducts, onResetProducts]",[1278,1295],"[onGetDeliveryMethods, onRestartReport]",[1403,1412],"[error, onCloseModal, success]",[1469,1482],"[getCustomer, getStates, props.match.params.id]",[2904,2911],"[getMunicipalities, state]",[1302,1319],[1427,1436],[1364,1381],"[importFileReset, onGetDeliveryMethods]",[1931,1940],[1021,1027],"[resetPasswordState, toggleChangePasswordModal, user]",[1142,1159],"[onCloseChangePasswordModal, passwordChanged]",[406,415],"[getData, getDataToday]",[2846,2859],"[props.value, value]",[4322,4335],[2092,2105],"[statusGroup, title]",[1819,1831],"[reportData, title]",[1183,1192],[1083,1109],"[onReload, paymentSelected, refresh]",[2481,2488],"[order, orders]",[2783,2804],"[conciliationError, conciliationSuccess, onCloseModal, onConfirmConciliationRestart]",[2818,2836],"[onGetHistoric, onGetOrder, orderId, refresh]",[5065,5072],"[canEdit, car, onPrintOrder, onResumeOrder, onUpdateCar, order]",[1079,1088],"[fillSelectValues, parseList, product]",[1147,1165],"[calculateTotals, productSizesList]",[1073,1085],"[customerId, onGetOrders]",[648,657],"[onGetProductsPending, product]",[2336,2345],"[onGetCustomerRegistereds, onGetCustomers, refresh]",[2467,2483],"[onGetCustomerRegistereds, onGetCustomers, onResetCustomers]",[1274,1299],"[conditionals, doRequest, props]",[1272,1279],"[batch, onRefreshCategory, onResetBatchRequest]",[1456,1465],"[onGetBillConfigs, refresh]",[1577,1595],"[onGetBillConfigs, onResetBillConfig]",[745,760],"[getBillConfig, isEdit, props.match.params.id]",[1086,1101],"[getBillConfig, props.match.params.id]",[1046,1055],[1550,1566],"[onGetCategories, onGetSizes, onResetProduct]",[1092,1100],"[findCategory, findCustomer, findProduct, prefix]",[11060,11080],"[cargarVentas, stats.ventas, stats.ventas.fecha]",[11178,11201],"[cargarVentas, stats.ventas, stats.ventas.opciones]",[11311,11337],"[stats.ventasEstado, stats.ventasEstado.fecha, ventasEstadoCargar]",[11451,11479],"[stats.ventasWhatsapp, stats.ventasWhatsapp.fecha, ventasWhatsappCargar]",[11589,11615],"[stats.ventasOrigen, stats.ventasOrigen.fecha, ventasOrigenCargar]",[11725,11754],"[stats.ventasOrigen, stats.ventasOrigen.opciones, ventasOrigenCargar]",[11860,11884],"[stats.ventasTipo, stats.ventasTipo.fecha, ventasTipoCargar]",[11990,12017],"[stats.ventasTipo, stats.ventasTipo.opciones, ventasTipoCargar]",[12125,12150],"[masVendidosCargar, stats.masVendidos, stats.masVendidos.fecha]",[12246,12265],"[horasCargar, stats.horas, stats.horas.fecha]",[12377,12404],"[reincidenciasCargar, stats.reincidencias, stats.reincidencias.fecha]",[12671,12678],"[stats, users]",[1042,1058],"[getRoles, setPermissions]",[1215,1228],"[filterPermissionsOptions, permissions, reloadPermissions]",[1358,1372],"[filterPermissionsOptions, roleSelected]",[684,700],"[getPermissions, setPermissions]"]